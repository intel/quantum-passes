// NOTE: Assertions have been autogenerated by utils/update_cc_test_checks.py UTC_ARGS: --version 3
// RUN: %clang -S -emit-llvm %include_dirs %loadintelclangextensions  %s -o - | FileCheck %s --dump-input fail


#include "clang/Quantum/quintrinsics.h"

// CHECK-LABEL: define dso_local noundef i32 @main(
// CHECK-SAME: ) #[[ATTR2:[0-9]+]] {
// CHECK:    [[RETVAL:%.*]] = alloca i32, align 4
// CHECK-NEXT:    [[Q:%.*]] = alloca [4 x i16], align 2
// CHECK-NEXT:    store i32 0, ptr [[RETVAL]], align 4
// CHECK-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds [4 x i16], ptr [[Q]], i64 0, i64 0
// CHECK-NEXT:    [[ARRAYIDX1:%.*]] = getelementptr inbounds [4 x i16], ptr [[Q]], i64 0, i64 1
// CHECK-NEXT:    call void @_Z2CZRtS_(ptr noundef nonnull align 2 dereferenceable(2) [[ARRAYIDX]], ptr noundef nonnull align 2 dereferenceable(2) [[ARRAYIDX1]])
// CHECK-NEXT:    [[ARRAYIDX2:%.*]] = getelementptr inbounds [4 x i16], ptr [[Q]], i64 0, i64 2
// CHECK-NEXT:    [[ARRAYIDX3:%.*]] = getelementptr inbounds [4 x i16], ptr [[Q]], i64 0, i64 0
// CHECK-NEXT:    call void @_Z4CNOTRtS_(ptr noundef nonnull align 2 dereferenceable(2) [[ARRAYIDX2]], ptr noundef nonnull align 2 dereferenceable(2) [[ARRAYIDX3]])
// CHECK-NEXT:    [[ARRAYIDX4:%.*]] = getelementptr inbounds [4 x i16], ptr [[Q]], i64 0, i64 0
// CHECK-NEXT:    [[ARRAYIDX5:%.*]] = getelementptr inbounds [4 x i16], ptr [[Q]], i64 0, i64 1
// CHECK-NEXT:    call void @_Z2CZRtS_(ptr noundef nonnull align 2 dereferenceable(2) [[ARRAYIDX4]], ptr noundef nonnull align 2 dereferenceable(2) [[ARRAYIDX5]])
// CHECK-NEXT:    [[ARRAYIDX6:%.*]] = getelementptr inbounds [4 x i16], ptr [[Q]], i64 0, i64 0
// CHECK-NEXT:    [[ARRAYIDX7:%.*]] = getelementptr inbounds [4 x i16], ptr [[Q]], i64 0, i64 1
// CHECK-NEXT:    call void @_Z2CZRtS_(ptr noundef nonnull align 2 dereferenceable(2) [[ARRAYIDX6]], ptr noundef nonnull align 2 dereferenceable(2) [[ARRAYIDX7]])
// CHECK-NEXT:    [[ARRAYIDX8:%.*]] = getelementptr inbounds [4 x i16], ptr [[Q]], i64 0, i64 2
// CHECK-NEXT:    [[ARRAYIDX9:%.*]] = getelementptr inbounds [4 x i16], ptr [[Q]], i64 0, i64 0
// CHECK-NEXT:    call void @_Z4CNOTRtS_(ptr noundef nonnull align 2 dereferenceable(2) [[ARRAYIDX8]], ptr noundef nonnull align 2 dereferenceable(2) [[ARRAYIDX9]])
// CHECK-NEXT:    [[ARRAYIDX10:%.*]] = getelementptr inbounds [4 x i16], ptr [[Q]], i64 0, i64 3
// CHECK-NEXT:    call void @_Z1HRt(ptr noundef nonnull align 2 dereferenceable(2) [[ARRAYIDX10]])
// CHECK-NEXT:    [[ARRAYIDX11:%.*]] = getelementptr inbounds [4 x i16], ptr [[Q]], i64 0, i64 0
// CHECK-NEXT:    [[ARRAYIDX12:%.*]] = getelementptr inbounds [4 x i16], ptr [[Q]], i64 0, i64 1
// CHECK-NEXT:    call void @_Z2CZRtS_(ptr noundef nonnull align 2 dereferenceable(2) [[ARRAYIDX11]], ptr noundef nonnull align 2 dereferenceable(2) [[ARRAYIDX12]])
// CHECK-NEXT:    ret i32 0
//
int main() {
  qbit q[4];
  //CU(q1,q2)CX(q3,q1)CU(q1,q2)=CU(q3,q2)CX(q3,q1)
  CZ(q[0], q[1]);
  CNOT(q[2], q[0]);
  CZ(q[0], q[1]);

  CZ(q[0], q[1]);
  CNOT(q[2], q[0]);
  H(q[3]);
  CZ(q[0], q[1]);
  /// NOTE: 04/13/2022 - Commented out measurement operation(s) since they are
  ///       being redesigned and measurement is not necessary for this test.
  // __quantum_measz(q[0], 0);
  return 0;

  // expected reduction
  // H(q[3])
  // __quantum_measz(q[0])
}

/* NOTE: The validation of the global annotations corresponding to quintrinsic functions is covered in other test(s). */

































