// NOTE: Assertions have been autogenerated by utils/update_cc_test_checks.py UTC_ARGS: --version 3
// RUN: %clang -S -emit-llvm %include_dirs %loadintelclangextensions  %s -o - | FileCheck %s --dump-input fail


#include "clang/Quantum/quintrinsics.h"

/* -- Quantum Error Detection -- *
 * Five Qubit Repetition Code    *
 * ----------------------------- *
 */

qbit q[5];
cbit c[2];

// CHECK-LABEL: define dso_local noundef i32 @main(
// CHECK-SAME: ) #[[ATTR2:[0-9]+]] {
// CHECK:    [[RETVAL:%.*]] = alloca i32, align 4
// CHECK-NEXT:    store i32 0, ptr [[RETVAL]], align 4
// CHECK-NEXT:    call void @_Z5PrepZRt(ptr noundef nonnull align 2 dereferenceable(2) @q)
// CHECK-NEXT:    call void @_Z5PrepZRt(ptr noundef nonnull align 2 dereferenceable(2) getelementptr inbounds ([5 x i16], ptr @q, i64 0, i64 1))
// CHECK-NEXT:    call void @_Z5PrepZRt(ptr noundef nonnull align 2 dereferenceable(2) getelementptr inbounds ([5 x i16], ptr @q, i64 0, i64 2))
// CHECK-NEXT:    call void @_Z5PrepZRt(ptr noundef nonnull align 2 dereferenceable(2) getelementptr inbounds ([5 x i16], ptr @q, i64 0, i64 3))
// CHECK-NEXT:    call void @_Z5PrepZRt(ptr noundef nonnull align 2 dereferenceable(2) getelementptr inbounds ([5 x i16], ptr @q, i64 0, i64 4))
// CHECK-NEXT:    call void @_Z1HRt(ptr noundef nonnull align 2 dereferenceable(2) getelementptr inbounds ([5 x i16], ptr @q, i64 0, i64 1))
// CHECK-NEXT:    call void @_Z1HRt(ptr noundef nonnull align 2 dereferenceable(2) getelementptr inbounds ([5 x i16], ptr @q, i64 0, i64 3))
// CHECK-NEXT:    call void @_Z2CZRtS_(ptr noundef nonnull align 2 dereferenceable(2) @q, ptr noundef nonnull align 2 dereferenceable(2) getelementptr inbounds ([5 x i16], ptr @q, i64 0, i64 1))
// CHECK-NEXT:    call void @_Z2CZRtS_(ptr noundef nonnull align 2 dereferenceable(2) getelementptr inbounds ([5 x i16], ptr @q, i64 0, i64 2), ptr noundef nonnull align 2 dereferenceable(2) getelementptr inbounds ([5 x i16], ptr @q, i64 0, i64 3))
// CHECK-NEXT:    call void @_Z2CZRtS_(ptr noundef nonnull align 2 dereferenceable(2) getelementptr inbounds ([5 x i16], ptr @q, i64 0, i64 1), ptr noundef nonnull align 2 dereferenceable(2) getelementptr inbounds ([5 x i16], ptr @q, i64 0, i64 2))
// CHECK-NEXT:    call void @_Z2CZRtS_(ptr noundef nonnull align 2 dereferenceable(2) getelementptr inbounds ([5 x i16], ptr @q, i64 0, i64 3), ptr noundef nonnull align 2 dereferenceable(2) getelementptr inbounds ([5 x i16], ptr @q, i64 0, i64 4))
// CHECK-NEXT:    call void @_Z1HRt(ptr noundef nonnull align 2 dereferenceable(2) getelementptr inbounds ([5 x i16], ptr @q, i64 0, i64 1))
// CHECK-NEXT:    call void @_Z1HRt(ptr noundef nonnull align 2 dereferenceable(2) getelementptr inbounds ([5 x i16], ptr @q, i64 0, i64 3))
// CHECK-NEXT:    call void @_Z5MeasZRtRbb(ptr noundef nonnull align 2 dereferenceable(2) getelementptr inbounds ([5 x i16], ptr @q, i64 0, i64 1), ptr noundef nonnull align 1 dereferenceable(1) @c, i1 noundef zeroext false)
// CHECK-NEXT:    call void @_Z5MeasZRtRbb(ptr noundef nonnull align 2 dereferenceable(2) getelementptr inbounds ([5 x i16], ptr @q, i64 0, i64 3), ptr noundef nonnull align 1 dereferenceable(1) getelementptr inbounds ([2 x i8], ptr @c, i64 0, i64 1), i1 noundef zeroext false)
// CHECK-NEXT:    ret i32 0
//
int main() {

  PrepZ(q[0]);
  PrepZ(q[1]);
  PrepZ(q[2]);
  PrepZ(q[3]);
  PrepZ(q[4]);

  H(q[1]);
  H(q[3]);

  CZ(q[0], q[1]);
  CZ(q[2], q[3]);
  CZ(q[1], q[2]);
  CZ(q[3], q[4]);

  H(q[1]);
  H(q[3]);

  MeasZ(q[1], c[0]);
  MeasZ(q[3], c[1]);

  return 0;
}

/* Testing of the intrinsics is covered in other Clang tests */




















