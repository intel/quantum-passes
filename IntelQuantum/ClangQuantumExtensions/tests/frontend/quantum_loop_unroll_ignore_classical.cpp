// NOTE: Assertions have been autogenerated by utils/update_cc_test_checks.py UTC_ARGS: --version 3
// RUN: %clang -S -emit-llvm %include_dirs %loadintelclangextensions  %s -o - | FileCheck %s --dump-input fail


#include "clang/Quantum/quintrinsics.h"

const unsigned N = 15;
qbit q[N];

// CHECK-LABEL: define dso_local void @_Z14basicOperationv(
// CHECK-SAME: ) #[[ATTR0:[0-9]+]] section ".qbbs_text" {
// CHECK:    call void @_Z4CNOTRtS_(ptr noundef nonnull align 2 dereferenceable(2) @q, ptr noundef nonnull align 2 dereferenceable(2) getelementptr inbounds ([15 x i16], ptr @q, i64 0, i64 1))
// CHECK-NEXT:    ret void
//
quantum_kernel void basicOperation() {
    CNOT(q[0], q[1]);
}

// CHECK-LABEL: define dso_local noundef i32 @main(
// CHECK-SAME: ) #[[ATTR2:[0-9]+]] {
// CHECK:    [[RETVAL:%.*]] = alloca i32, align 4
// CHECK-NEXT:    [[I:%.*]] = alloca i32, align 4
// CHECK-NEXT:    store i32 0, ptr [[RETVAL]], align 4
// CHECK-NEXT:    store i32 0, ptr [[I]], align 4
// CHECK-NEXT:    br label %[[FOR_COND:.*]]
// CHECK:       [[FOR_COND]]:
// CHECK-NEXT:    [[TMP0:%.*]] = load i32, ptr [[I]], align 4
// CHECK-NEXT:    [[CMP:%.*]] = icmp ult i32 [[TMP0]], 15
// CHECK-NEXT:    br i1 [[CMP]], label %[[FOR_BODY:.*]], label %[[FOR_END:.*]]
// CHECK:       [[FOR_BODY]]:
// CHECK-NEXT:    call void @_Z14basicOperationv()
// CHECK-NEXT:    br label %[[FOR_INC:.*]]
// CHECK:       [[FOR_INC]]:
// CHECK-NEXT:    [[TMP1:%.*]] = load i32, ptr [[I]], align 4
// CHECK-NEXT:    [[INC:%.*]] = add nsw i32 [[TMP1]], 1
// CHECK-NEXT:    store i32 [[INC]], ptr [[I]], align 4
// CHECK-NEXT:    br label %[[FOR_COND]], !llvm.loop [[LOOP6:![0-9]+]]
// CHECK:       [[FOR_END]]:
// CHECK-NEXT:    ret i32 0
//
int main() {
    for (int i = 0; i < N; i++){
        basicOperation();
    }

    return 0;
}















