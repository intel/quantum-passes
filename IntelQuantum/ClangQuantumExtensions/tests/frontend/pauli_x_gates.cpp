// NOTE: Assertions have been autogenerated by utils/update_cc_test_checks.py UTC_ARGS: --check-globals --include-generated-funcs --version 3
// RUN: %clang -S -emit-llvm %include_dirs %loadintelclangextensions  %s -o - | FileCheck %s --dump-input fail


#include "clang/Quantum/quintrinsics.h"



/* <--- X gate : spot check ---> */










/* <--- Main function : spot check ---> */
int main() {

  qbit q[1];
  X(q[0]);

  return 0;

}

// CHECK-LABEL: define dso_local void @_Z1XRt(
// CHECK-SAME: ptr noundef nonnull align 2 dereferenceable(2) [[Q:%.*]]) #[[ATTR0:[0-9]+]] {
// CHECK:    [[Q_ADDR:%.*]] = alloca ptr, align 8
// CHECK-NEXT:    store ptr [[Q]], ptr [[Q_ADDR]], align 8
// CHECK-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[Q_ADDR]], align 8
// CHECK-NEXT:    call void @_Z15__quantum_qubitPt(ptr noundef [[TMP0]])
// CHECK-NEXT:    ret void
//
// CHECK-LABEL: define dso_local noundef i32 @main(
// CHECK-SAME: ) #[[ATTR2:[0-9]+]] {
// CHECK:    [[RETVAL:%.*]] = alloca i32, align 4
// CHECK-NEXT:    [[Q:%.*]] = alloca [1 x i16], align 2
// CHECK-NEXT:    store i32 0, ptr [[RETVAL]], align 4
// CHECK-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds [1 x i16], ptr [[Q]], i64 0, i64 0
// CHECK-NEXT:    call void @_Z1XRt(ptr noundef nonnull align 2 dereferenceable(2) [[ARRAYIDX]])
// CHECK-NEXT:    ret i32 0
//

