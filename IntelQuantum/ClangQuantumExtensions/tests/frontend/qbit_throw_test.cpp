// NOTE: Assertions have been autogenerated by utils/update_cc_test_checks.py UTC_ARGS: --version 3
// RUN: %clang -S -emit-llvm %include_dirs %loadintelclangextensions  %s -o - | FileCheck %s --dump-input fail


/// Development mode
#include "clang/Quantum/quintrinsics.h"

//#include <quantum.hpp>
#include <iostream>
#include <cassert>
#include <algorithm>

// Allocate 2 global qubits.
const int N = 2;
qbit qumem[N];

// Type test 2


// CHECK-LABEL: define dso_local noundef i32 @main(
// CHECK-SAME: ) #[[ATTR5:[0-9]+]] personality ptr @__gxx_personality_v0 {
// CHECK:    [[RETVAL:%.*]] = alloca i32, align 4
// CHECK-NEXT:    [[Q:%.*]] = alloca ptr, align 8
// CHECK-NEXT:    [[EXN_SLOT:%.*]] = alloca ptr, align 8
// CHECK-NEXT:    [[EHSELECTOR_SLOT:%.*]] = alloca i32, align 4
// CHECK-NEXT:    store i32 0, ptr [[RETVAL]], align 4
// CHECK-NEXT:    store ptr @qumem, ptr [[Q]], align 8
// CHECK-NEXT:    [[EXCEPTION:%.*]] = call ptr @__cxa_allocate_exception(i64 2) #[[ATTR4:[0-9]+]]
// CHECK-NEXT:    [[TMP0:%.*]] = load i16, ptr @qumem, align 2
// CHECK-NEXT:    store i16 [[TMP0]], ptr [[EXCEPTION]], align 16
// CHECK-NEXT:    invoke void @__cxa_throw(ptr [[EXCEPTION]], ptr @_ZTIt, ptr null) #[[ATTR7:[0-9]+]]
// CHECK-NEXT:    to label %[[UNREACHABLE:.*]] unwind label %[[LPAD:.*]]
// CHECK:       [[LPAD]]:
// CHECK-NEXT:    [[TMP1:%.*]] = landingpad { ptr, i32 }
// CHECK-NEXT:    catch ptr null
// CHECK-NEXT:    [[TMP2:%.*]] = extractvalue { ptr, i32 } [[TMP1]], 0
// CHECK-NEXT:    store ptr [[TMP2]], ptr [[EXN_SLOT]], align 8
// CHECK-NEXT:    [[TMP3:%.*]] = extractvalue { ptr, i32 } [[TMP1]], 1
// CHECK-NEXT:    store i32 [[TMP3]], ptr [[EHSELECTOR_SLOT]], align 4
// CHECK-NEXT:    br label %[[CATCH:.*]]
// CHECK:       [[CATCH]]:
// CHECK-NEXT:    [[EXN:%.*]] = load ptr, ptr [[EXN_SLOT]], align 8
// CHECK-NEXT:    [[TMP4:%.*]] = call ptr @__cxa_begin_catch(ptr [[EXN]]) #[[ATTR4]]
// CHECK-NEXT:    [[CALL:%.*]] = invoke noundef nonnull align 8 dereferenceable(8) ptr @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc(ptr noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, ptr noundef @.str.25)
// CHECK-NEXT:    to label %[[INVOKE_CONT:.*]] unwind label %[[LPAD1:.*]]
// CHECK:       [[INVOKE_CONT]]:
// CHECK-NEXT:    [[CALL3:%.*]] = invoke noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEPFRSoS_E(ptr noundef nonnull align 8 dereferenceable(8) [[CALL]], ptr noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
// CHECK-NEXT:    to label %[[INVOKE_CONT2:.*]] unwind label %[[LPAD1]]
// CHECK:       [[INVOKE_CONT2]]:
// CHECK-NEXT:    call void @__cxa_end_catch()
// CHECK-NEXT:    br label %[[TRY_CONT:.*]]
// CHECK:       [[TRY_CONT]]:
// CHECK-NEXT:    ret i32 0
// CHECK:       [[LPAD1]]:
// CHECK-NEXT:    [[TMP5:%.*]] = landingpad { ptr, i32 }
// CHECK-NEXT:    cleanup
// CHECK-NEXT:    [[TMP6:%.*]] = extractvalue { ptr, i32 } [[TMP5]], 0
// CHECK-NEXT:    store ptr [[TMP6]], ptr [[EXN_SLOT]], align 8
// CHECK-NEXT:    [[TMP7:%.*]] = extractvalue { ptr, i32 } [[TMP5]], 1
// CHECK-NEXT:    store i32 [[TMP7]], ptr [[EHSELECTOR_SLOT]], align 4
// CHECK-NEXT:    invoke void @__cxa_end_catch()
// CHECK-NEXT:    to label %[[INVOKE_CONT4:.*]] unwind label %[[TERMINATE_LPAD:.*]]
// CHECK:       [[INVOKE_CONT4]]:
// CHECK-NEXT:    br label %[[EH_RESUME:.*]]
// CHECK:       [[EH_RESUME]]:
// CHECK-NEXT:    [[EXN5:%.*]] = load ptr, ptr [[EXN_SLOT]], align 8
// CHECK-NEXT:    [[SEL:%.*]] = load i32, ptr [[EHSELECTOR_SLOT]], align 4
// CHECK-NEXT:    [[LPAD_VAL:%.*]] = insertvalue { ptr, i32 } poison, ptr [[EXN5]], 0
// CHECK-NEXT:    [[LPAD_VAL6:%.*]] = insertvalue { ptr, i32 } [[LPAD_VAL]], i32 [[SEL]], 1
// CHECK-NEXT:    resume { ptr, i32 } [[LPAD_VAL6]]
// CHECK:       [[TERMINATE_LPAD]]:
// CHECK-NEXT:    [[TMP8:%.*]] = landingpad { ptr, i32 }
// CHECK-NEXT:    catch ptr null
// CHECK-NEXT:    [[TMP9:%.*]] = extractvalue { ptr, i32 } [[TMP8]], 0
// CHECK-NEXT:    call void @__clang_call_terminate(ptr [[TMP9]]) #[[ATTR8:[0-9]+]]
// CHECK-NEXT:    unreachable
// CHECK:       [[UNREACHABLE]]:
// CHECK-NEXT:    unreachable
//
int main()
{
    try
    {
        qbit& q = qumem[0];
        throw(q);
    }
    catch(...)
    {
        std::cout << "Caught exception!" << std::endl;
    }

    return 0;

}

