// NOTE: Assertions have been autogenerated by utils/update_cc_test_checks.py UTC_ARGS: --version 3
// RUN: %clang %include_dirs -O1 -S -emit-llvm %loadintelclangextensions -o - %s | FileCheck %s --dump-input fail
#include <clang/Quantum/quintrinsics.h>
#include <clang/Quantum/qexpr.h>

#include <iostream>
#include <cassert>
#include <vector>

//This test is to verify a bug fix were the intermediate
//"quantum_builtin" FLEQ functions were being called in
//IR via an "invoke" instruction and thus being ignored
//by pass which replaced them with intrinsics.
//The fix is done in the header declaration of these
//functions by declaring them as "noexcept".

const int N = 4;
qbit q[N];

// CHECK-LABEL: define dso_local noundef i32 @main(
// CHECK-SAME: ) local_unnamed_addr #[[ATTR6:[0-9]+]] personality ptr @__gxx_personality_v0 {
// CHECK:    [[TMP1:%.*]] = alloca i64, align 8
// CHECK-NEXT:    [[TMP2:%.*]] = alloca %"class.std::__cxx11::basic_string", align 8
// CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 32, ptr nonnull [[TMP2]]) #[[ATTR11:[0-9]+]]
// CHECK-NEXT:    [[TMP3:%.*]] = getelementptr inbounds %"class.std::__cxx11::basic_string", ptr [[TMP2]], i64 0, i32 2
// CHECK-NEXT:    store ptr [[TMP3]], ptr [[TMP2]], align 8, !tbaa [[TBAA10:![0-9]+]]
// CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 8, ptr nonnull [[TMP1]]) #[[ATTR11]]
// CHECK-NEXT:    store i64 17, ptr [[TMP1]], align 8, !tbaa [[TBAA12:![0-9]+]]
// CHECK-NEXT:    [[TMP4:%.*]] = call noundef ptr @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(ptr noundef nonnull align 8 dereferenceable(32) [[TMP2]], ptr noundef nonnull align 8 dereferenceable(8) [[TMP1]], i64 noundef 0)
// CHECK-NEXT:    store ptr [[TMP4]], ptr [[TMP2]], align 8, !tbaa [[TBAA14:![0-9]+]]
// CHECK-NEXT:    [[TMP5:%.*]] = load i64, ptr [[TMP1]], align 8, !tbaa [[TBAA12]]
// CHECK-NEXT:    store i64 [[TMP5]], ptr [[TMP3]], align 8, !tbaa [[TBAA16:![0-9]+]]
// CHECK-NEXT:    call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 1 dereferenceable(17) [[TMP4]], ptr noundef nonnull align 1 dereferenceable(17) @.str.28, i64 17, i1 false)
// CHECK-NEXT:    [[TMP6:%.*]] = getelementptr inbounds %"class.std::__cxx11::basic_string", ptr [[TMP2]], i64 0, i32 1
// CHECK-NEXT:    store i64 [[TMP5]], ptr [[TMP6]], align 8, !tbaa [[TBAA17:![0-9]+]]
// CHECK-NEXT:    [[TMP7:%.*]] = load ptr, ptr [[TMP2]], align 8, !tbaa [[TBAA14]]
// CHECK-NEXT:    [[TMP8:%.*]] = getelementptr inbounds i8, ptr [[TMP7]], i64 [[TMP5]]
// CHECK-NEXT:    store i8 0, ptr [[TMP8]], align 1, !tbaa [[TBAA16]]
// CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 8, ptr nonnull [[TMP1]]) #[[ATTR11]]
// CHECK-NEXT:    [[TMP9:%.*]] = call noundef i32 @_ZN15quantum_builtin9__qexpr_HEPt(ptr noundef nonnull @q) #[[ATTR11]]
// CHECK-NEXT:    call void @_ZN15quantum_builtin17__qexpr_eval_holdEi(i32 noundef [[TMP9]]) #[[ATTR11]]
// CHECK-NEXT:    [[TMP10:%.*]] = load ptr, ptr [[TMP2]], align 8, !tbaa [[TBAA14]]
// CHECK-NEXT:    [[TMP11:%.*]] = icmp eq ptr [[TMP10]], [[TMP3]]
// CHECK-NEXT:    br i1 [[TMP11]], label %[[TMP13:.*]], label %[[TMP12:.*]]
//
int main() {

    std::string test = "this is a string.";

    qexpr::eval_hold(qexpr::_H(q[0]));

    return 0;
}
