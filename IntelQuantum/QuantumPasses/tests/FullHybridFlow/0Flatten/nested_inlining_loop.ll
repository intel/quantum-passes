; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 2
; RUN: opt -S %loadintelquantumpasses -p="flatten-qk" %s -o - | FileCheck %s --dump-input fail
; ModuleID = 'test.ll'
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [325 x i8] c"{     \22matrix_real\22 : \221/sqrt(2)*[1, 1, 1, -1]\22,     \22matrix_imag\22 : [0, 0, 0, 0],     \22matrix_order\22 : \22rm\22,     \22is_hermitian\22 : true,     \22is_unitary\22 : true,     \22is_mutable\22 : true,     \22qubit_list\22 : [0],     \22parametric_list\22 : [],     \22control_qubit_list\22 : [],     \22local_basis_list\22 : [4],     \22identifier\22 : 3   }\00", section "llvm.metadata"
@.str.1 = private unnamed_addr constant [37 x i8] c"include/clang/Quantum/quintrinsics.h\00", section "llvm.metadata"
@.str.2 = private unnamed_addr constant [313 x i8] c"{     \22matrix_real\22 : [0, 1, 1, 0],     \22matrix_imag\22 : [0, 0, 0, 0],     \22matrix_order\22 : \22rm\22,     \22is_hermitian\22 : true,     \22is_unitary\22 : true,     \22is_mutable\22 : true,     \22qubit_list\22 : [0],     \22parametric_list\22 : [],     \22control_qubit_list\22 : [],     \22local_basis_list\22 : [1],     \22identifier\22 : 12   }\00", section "llvm.metadata"
@.str.3 = private unnamed_addr constant [314 x i8] c"{     \22matrix_real\22 : [0, 0, 0, 0],     \22matrix_imag\22 : [0, -1, 1, 0],     \22matrix_order\22 : \22rm\22,     \22is_hermitian\22 : true,     \22is_unitary\22 : true,     \22is_mutable\22 : true,     \22qubit_list\22 : [0],     \22parametric_list\22 : [],     \22control_qubit_list\22 : [],     \22local_basis_list\22 : [2],     \22identifier\22 : 18   }\00", section "llvm.metadata"
@.str.4 = private unnamed_addr constant [313 x i8] c"{     \22matrix_real\22 : [1, 0, 0, -1],     \22matrix_imag\22 : [0, 0, 0, 0],     \22matrix_order\22 : \22rm\22,     \22is_hermitian\22 : true,     \22is_unitary\22 : true,     \22is_mutable\22 : true,     \22qubit_list\22 : [0],     \22parametric_list\22 : [],     \22control_qubit_list\22 : [],     \22local_basis_list\22 : [3],     \22identifier\22 : 6   }\00", section "llvm.metadata"
@.str.5 = private unnamed_addr constant [313 x i8] c"{     \22matrix_real\22 : [1, 0, 0, 0],     \22matrix_imag\22 : [0, 0, 0, 1],     \22matrix_order\22 : \22rm\22,     \22is_hermitian\22 : false,     \22is_unitary\22 : true,     \22is_mutable\22 : true,     \22qubit_list\22 : [0],     \22parametric_list\22 : [],     \22control_qubit_list\22 : [],     \22local_basis_list\22 : [3],     \22identifier\22 : 5   }\00", section "llvm.metadata"
@.str.6 = private unnamed_addr constant [315 x i8] c"{     \22matrix_real\22 : [1, 0, 0, 0],     \22matrix_imag\22 : [0, 0, 0, -1],     \22matrix_order\22 : \22rm\22,     \22is_hermitian\22 : false,     \22is_unitary\22 : true,     \22is_mutable\22 : true,     \22qubit_list\22 : [0],     \22parametric_list\22 : [],     \22control_qubit_list\22 : [],     \22local_basis_list\22 : [3],     \22identifier\22 : 11   }\00", section "llvm.metadata"
@.str.7 = private unnamed_addr constant [334 x i8] c"{     \22matrix_real\22 : \22[1, 0, 0, cos(pi/4)]\22,     \22matrix_imag\22 : \22[0, 0, 0, sin(pi/4)]\22,     \22matrix_order\22 : \22rm\22,     \22is_hermitian\22 : false,     \22is_unitary\22 : true,     \22is_mutable\22 : true,     \22qubit_list\22 : [0],     \22parametric_list\22 : [],     \22control_qubit_list\22 : [],     \22local_basis_list\22 : [3],     \22identifier\22 : 24   }\00", section "llvm.metadata"
@.str.8 = private unnamed_addr constant [335 x i8] c"{     \22matrix_real\22 : \22[1, 0, 0, cos(pi/4)]\22,     \22matrix_imag\22 : \22[0, 0, 0, -sin(pi/4)]\22,     \22matrix_order\22 : \22rm\22,     \22is_hermitian\22 : false,     \22is_unitary\22 : true,     \22is_mutable\22 : true,     \22qubit_list\22 : [0],     \22parametric_list\22 : [],     \22control_qubit_list\22 : [],     \22local_basis_list\22 : [3],     \22identifier\22 : 25   }\00", section "llvm.metadata"
@.str.9 = private unnamed_addr constant [364 x i8] c"{     \22matrix_real\22 : \22[cos(angle/2), 0, 0, cos(angle/2)]\22,     \22matrix_imag\22 : \22[0, -sin(angle/2), sin(angle/2), 0]\22,     \22matrix_order\22 : \22rm\22,     \22is_hermitian\22 : false,     \22is_unitary\22 : true,     \22is_mutable\22 : true,     \22qubit_list\22 : [0],     \22parametric_list\22 : [1],     \22control_qubit_list\22 : [],     \22local_basis_list\22 : [1],     \22identifier\22 : 26   }\00", section "llvm.metadata"
@.str.10 = private unnamed_addr constant [362 x i8] c"{     \22matrix_real\22 : \22[cos(angle/2), -sin(angle/2), sin(angle/2), cos(angle/2)]\22,     \22matrix_imag\22 : [0, 0, 0, 0],     \22matrix_order\22 : \22rm\22,     \22is_hermitian\22 : false,     \22is_unitary\22 : true,     \22is_mutable\22 : true,     \22qubit_list\22 : [0],     \22parametric_list\22 : [1],     \22control_qubit_list\22 : [],     \22local_basis_list\22 : [2],     \22identifier\22 : 27   }\00", section "llvm.metadata"
@.str.11 = private unnamed_addr constant [364 x i8] c"{     \22matrix_real\22 : \22[cos(angle/2), 0, 0, cos(angle/2)]\22,     \22matrix_imag\22 : \22[-sin(angle/2), 0, 0, sin(angle/2)]\22,     \22matrix_order\22 : \22rm\22,     \22is_hermitian\22 : false,     \22is_unitary\22 : true,     \22is_mutable\22 : true,     \22qubit_list\22 : [0],     \22parametric_list\22 : [1],     \22control_qubit_list\22 : [],     \22local_basis_list\22 : [3],     \22identifier\22 : 28   }\00", section "llvm.metadata"
@.str.12 = private unnamed_addr constant [396 x i8] c"{     \22matrix_real\22 : [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, -1],     \22matrix_imag\22 : [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     \22matrix_order\22 : \22rm\22,     \22is_hermitian\22 : true,     \22is_unitary\22 : true,     \22is_mutable\22 : true,     \22qubit_list\22 : [0, 1],     \22parametric_list\22 : [],     \22control_qubit_list\22 : [0, 1],     \22local_basis_list\22 : [3, 3],     \22identifier\22 : 37   }\00", section "llvm.metadata"
@.str.13 = private unnamed_addr constant [392 x i8] c"{     \22matrix_real\22 : [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0],     \22matrix_imag\22 : [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     \22matrix_order\22 : \22rm\22,     \22is_hermitian\22 : true,     \22is_unitary\22 : true,     \22is_mutable\22 : true,     \22qubit_list\22 : [0, 1],     \22parametric_list\22 : [],     \22control_qubit_list\22 : [0],     \22local_basis_list\22 : [3, 1],     \22identifier\22 : 35   }\00", section "llvm.metadata"
@.str.14 = private unnamed_addr constant [391 x i8] c"{     \22matrix_real\22 : [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1],     \22matrix_imag\22 : [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     \22matrix_order\22 : \22rm\22,     \22is_hermitian\22 : true,     \22is_unitary\22 : true,     \22is_mutable\22 : true,     \22qubit_list\22 : [0, 1],     \22parametric_list\22 : [],     \22control_qubit_list\22 : [],     \22local_basis_list\22 : [0, 0],     \22identifier\22 : 38   }\00", section "llvm.metadata"
@.str.15 = private unnamed_addr constant [689 x i8] c"{     \22matrix_real\22 : [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0],     \22matrix_imag\22 : [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     \22matrix_order\22 : \22rm\22,     \22is_hermitian\22 : true,     \22is_unitary\22 : true,     \22is_mutable\22 : true,     \22qubit_list\22 : [0, 1, 2],     \22parametric_list\22 : [],     \22control_qubit_list\22 : [0, 1],     \22local_basis_list\22 : [3, 3, 1],     \22identifier\22 : 39   }\00", section "llvm.metadata"
@.str.16 = private unnamed_addr constant [417 x i8] c"{     \22matrix_real\22 : \22{qt(prob0) : [0.5, 0.5, 0.5, 0.5], qt(prob1) : [0.5, -0.5, 0.5, -0.5]}\22,     \22matrix_imag\22 : \22{qt(prob0) : [0, 0, 0, 0], qt(prob1) : [0, 0, 0, 0]}\22,     \22matrix_order\22 : \22rm\22,     \22is_hermitian\22 : false,     \22is_unitary\22 : false,     \22is_mutable\22 : true,     \22qubit_list\22 : [0],     \22parametric_list\22 : [],     \22control_qubit_list\22 : [],     \22local_basis_list\22 : [1],     \22identifier\22 : 40   }\00", section "llvm.metadata"
@.str.17 = private unnamed_addr constant [417 x i8] c"{     \22matrix_real\22 : \22{qt(prob0) : [0.5, 0, 0, 0.5], qt(prob1) : [0.5, 0, 0, -0.5]}\22,     \22matrix_imag\22 : \22{qt(prob0) : [0, 0.5, -0.5, 0], qt(prob1) : [0, 0.5, 0.5, 0]}\22,     \22matrix_order\22 : \22rm\22,     \22is_hermitian\22 : false,     \22is_unitary\22 : false,     \22is_mutable\22 : true,     \22qubit_list\22 : [0],     \22parametric_list\22 : [],     \22control_qubit_list\22 : [],     \22local_basis_list\22 : [2],     \22identifier\22 : 41   }\00", section "llvm.metadata"
@.str.18 = private unnamed_addr constant [399 x i8] c"{     \22matrix_real\22 : \22{qt(prob0) : [1, 0, 0, 0], qt(prob1) : [0, 1, 0, 0]}\22,     \22matrix_imag\22 : \22{qt(prob0) : [0, 0, 0, 0], qt(prob1) : [0, 0, 0, 0]}\22,     \22matrix_order\22 : \22rm\22,     \22is_hermitian\22 : false,     \22is_unitary\22 : false,     \22is_mutable\22 : true,     \22qubit_list\22 : [0],     \22parametric_list\22 : [],     \22control_qubit_list\22 : [],     \22local_basis_list\22 : [3],     \22identifier\22 : 42   }\00", section "llvm.metadata"
@.str.19 = private unnamed_addr constant [421 x i8] c"{     \22matrix_real\22 : \22{qt(prob0) : [0.5, 0.5, 0.5, 0.5], qt(prob1) : [0.5, -0.5, -0.5, 0.5]}\22,     \22matrix_imag\22 : \22{qt(prob0) : [0, 0, 0, 0], qt(prob1) : [0, 0, 0, 0]}\22,     \22matrix_order\22 : \22rm\22,     \22is_hermitian\22 : false,     \22is_unitary\22 : false,     \22is_mutable\22 : true,     \22qubit_list\22 : [0],     \22parametric_list\22 : [1, 2],     \22control_qubit_list\22 : [],     \22local_basis_list\22 : [1],     \22identifier\22 : 43   }\00", section "llvm.metadata"
@.str.20 = private unnamed_addr constant [421 x i8] c"{     \22matrix_real\22 : \22{qt(prob0) : [0.5, 0, 0, 0.5], qt(prob1) : [0.5, 0, 0, 0.5]}\22,     \22matrix_imag\22 : \22{qt(prob0) : [0, 0.5, -0.5, 0], qt(prob1) : [0, -0.5, 0.5, 0]}\22,     \22matrix_order\22 : \22rm\22,     \22is_hermitian\22 : false,     \22is_unitary\22 : false,     \22is_mutable\22 : true,     \22qubit_list\22 : [0],     \22parametric_list\22 : [1, 2],     \22control_qubit_list\22 : [],     \22local_basis_list\22 : [2],     \22identifier\22 : 44   }\00", section "llvm.metadata"
@.str.21 = private unnamed_addr constant [403 x i8] c"{     \22matrix_real\22 : \22{qt(prob0) : [1, 0, 0, 0], qt(prob1) : [0, 0, 0, 1]}\22,     \22matrix_imag\22 : \22{qt(prob0) : [0, 0, 0, 0], qt(prob1) : [0, 0, 0, 0]}\22,     \22matrix_order\22 : \22rm\22,     \22is_hermitian\22 : false,     \22is_unitary\22 : false,     \22is_mutable\22 : true,     \22qubit_list\22 : [0],     \22parametric_list\22 : [1, 2],     \22control_qubit_list\22 : [],     \22local_basis_list\22 : [3],     \22identifier\22 : 45   }\00", section "llvm.metadata"
@.str.22 = private unnamed_addr constant [420 x i8] c"{     \22matrix_real\22 : \22[1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, cos(angle)]\22,     \22matrix_imag\22 : \22[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -sin(angle)]\22,     \22matrix_order\22 : \22rm\22,     \22is_hermitian\22 : false,     \22is_unitary\22 : true,     \22is_mutable\22 : true,     \22qubit_list\22 : [0, 1],     \22parametric_list\22 : [2],     \22control_qubit_list\22 : [0, 1],     \22local_basis_list\22 : [3, 3],     \22identifier\22 : 46   }\00", section "llvm.metadata"
@.str.23 = private unnamed_addr constant [423 x i8] c"{     \22matrix_real\22 : \22[cos(theta/2), -sin(theta/2) sin(phi), sin(theta/2) sin(phi), cos(theta/2)]\22,     \22matrix_imag\22 : \22[0, -sin(theta/2)cos(phi), sin(theta/2)cos(phi), 0]\22,     \22matrix_order\22 : \22rm\22,     \22is_hermitian\22 : false,     \22is_unitary\22 : true,     \22is_mutable\22 : true,     \22qubit_list\22 : [0],     \22parametric_list\22 : [1,2],     \22control_qubit_list\22 : [],     \22local_basis_list\22 : [0],     \22identifier\22 : 47   }\00", section "llvm.metadata"
@.str.24 = private unnamed_addr constant [503 x i8] c"{     \22matrix_real\22 : \22[1, 0, 0, 0, 0, (1+cos(angle))/2, (1-cos(angle))/2, 0, 0, (1-cos(angle))/2, (1+cos(angle))/2, 0, 0, 0, 0, 1]\22,     \22matrix_imag\22 : \22[1, 0, 0, 0, 0, sin(angle)/2, -sin(angle)/2, 0, 0, -sin(angle)/2, sin(angle)/2, 0, 0, 0, 0, 1]\22,     \22matrix_order\22 : \22rm\22,     \22is_hermitian\22 : false,     \22is_unitary\22 : true,     \22is_mutable\22 : true,     \22qubit_list\22 : [0, 1],     \22parametric_list\22 : [2],     \22control_qubit_list\22 : [],     \22local_basis_list\22 : [0, 0],     \22identifier\22 : 53   }\00", section "llvm.metadata"
@q = dso_local global [3 x i16] zeroinitializer, align 2
@llvm.global.annotations = appending global [24 x { ptr, ptr, ptr, i32, ptr }] [{ ptr, ptr, ptr, i32, ptr } { ptr @_Z1HRt, ptr @.str, ptr @.str.1, i32 48, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @_Z1XRt, ptr @.str.2, ptr @.str.1, i32 68, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @_Z1YRt, ptr @.str.3, ptr @.str.1, i32 88, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @_Z1ZRt, ptr @.str.4, ptr @.str.1, i32 109, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @_Z1SRt, ptr @.str.5, ptr @.str.1, i32 129, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @_Z4SdagRt, ptr @.str.6, ptr @.str.1, i32 149, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @_Z1TRt, ptr @.str.7, ptr @.str.1, i32 169, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @_Z4TdagRt, ptr @.str.8, ptr @.str.1, i32 189, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @_Z2RXRtd, ptr @.str.9, ptr @.str.1, i32 209, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @_Z2RYRtd, ptr @.str.10, ptr @.str.1, i32 230, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @_Z2RZRtd, ptr @.str.11, ptr @.str.1, i32 251, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @_Z2CZRtS_, ptr @.str.12, ptr @.str.1, i32 272, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @_Z4CNOTRtS_, ptr @.str.13, ptr @.str.1, i32 293, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @_Z4SWAPRtS_, ptr @.str.14, ptr @.str.1, i32 314, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @_Z7ToffoliRtS_S_, ptr @.str.15, ptr @.str.1, i32 335, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @_Z5PrepXRt, ptr @.str.16, ptr @.str.1, i32 359, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @_Z5PrepYRt, ptr @.str.17, ptr @.str.1, i32 377, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @_Z5PrepZRt, ptr @.str.18, ptr @.str.1, i32 395, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @_Z5MeasXRtRbb, ptr @.str.19, ptr @.str.1, i32 413, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @_Z5MeasYRtRbb, ptr @.str.20, ptr @.str.1, i32 433, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @_Z5MeasZRtRbb, ptr @.str.21, ptr @.str.1, i32 453, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @_Z6CPhaseRtS_d, ptr @.str.22, ptr @.str.1, i32 481, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @_Z3RXYRtdd, ptr @.str.23, ptr @.str.1, i32 503, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @_Z5SwapARtS_d, ptr @.str.24, ptr @.str.1, i32 525, ptr null }], section "llvm.metadata"

; Function Attrs: mustprogress noinline uwtable
define dso_local void @_Z1HRt(ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" %q) #0 {
; CHECK-LABEL: define dso_local void @_Z1HRt
; CHECK-SAME: (ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" [[Q:%.*]]) #[[ATTR0:[0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    call void @llvm.quantum.qubit(ptr noundef nonnull [[Q]])
; CHECK-NEXT:    ret void
;
entry:
  call void @llvm.quantum.qubit(ptr noundef nonnull %q)
  ret void
}

; Function Attrs: mustprogress noinline uwtable
define dso_local void @_Z1XRt(ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" %q) #0 {
; CHECK-LABEL: define dso_local void @_Z1XRt
; CHECK-SAME: (ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" [[Q:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    call void @llvm.quantum.qubit(ptr noundef nonnull [[Q]])
; CHECK-NEXT:    ret void
;
entry:
  call void @llvm.quantum.qubit(ptr noundef nonnull %q)
  ret void
}

; Function Attrs: mustprogress noinline uwtable
define dso_local void @_Z1YRt(ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" %q) #0 {
; CHECK-LABEL: define dso_local void @_Z1YRt
; CHECK-SAME: (ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" [[Q:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    call void @llvm.quantum.qubit(ptr noundef nonnull [[Q]])
; CHECK-NEXT:    ret void
;
entry:
  call void @llvm.quantum.qubit(ptr noundef nonnull %q)
  ret void
}

; Function Attrs: mustprogress noinline uwtable
define dso_local void @_Z1ZRt(ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" %q) #0 {
; CHECK-LABEL: define dso_local void @_Z1ZRt
; CHECK-SAME: (ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" [[Q:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    call void @llvm.quantum.qubit(ptr noundef nonnull [[Q]])
; CHECK-NEXT:    ret void
;
entry:
  call void @llvm.quantum.qubit(ptr noundef nonnull %q)
  ret void
}

; Function Attrs: mustprogress noinline uwtable
define dso_local void @_Z1SRt(ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" %q) #0 {
; CHECK-LABEL: define dso_local void @_Z1SRt
; CHECK-SAME: (ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" [[Q:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    call void @llvm.quantum.qubit(ptr noundef nonnull [[Q]])
; CHECK-NEXT:    ret void
;
entry:
  call void @llvm.quantum.qubit(ptr noundef nonnull %q)
  ret void
}

; Function Attrs: mustprogress noinline uwtable
define dso_local void @_Z4SdagRt(ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" %q) #0 {
; CHECK-LABEL: define dso_local void @_Z4SdagRt
; CHECK-SAME: (ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" [[Q:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    call void @llvm.quantum.qubit(ptr noundef nonnull [[Q]])
; CHECK-NEXT:    ret void
;
entry:
  call void @llvm.quantum.qubit(ptr noundef nonnull %q)
  ret void
}

; Function Attrs: mustprogress noinline uwtable
define dso_local void @_Z1TRt(ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" %q) #0 {
; CHECK-LABEL: define dso_local void @_Z1TRt
; CHECK-SAME: (ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" [[Q:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    call void @llvm.quantum.qubit(ptr noundef nonnull [[Q]])
; CHECK-NEXT:    ret void
;
entry:
  call void @llvm.quantum.qubit(ptr noundef nonnull %q)
  ret void
}

; Function Attrs: mustprogress noinline uwtable
define dso_local void @_Z4TdagRt(ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" %q) #0 {
; CHECK-LABEL: define dso_local void @_Z4TdagRt
; CHECK-SAME: (ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" [[Q:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    call void @llvm.quantum.qubit(ptr noundef nonnull [[Q]])
; CHECK-NEXT:    ret void
;
entry:
  call void @llvm.quantum.qubit(ptr noundef nonnull %q)
  ret void
}

; Function Attrs: mustprogress noinline uwtable
define dso_local void @_Z2RXRtd(ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" %q, double noundef %angle) #0 {
; CHECK-LABEL: define dso_local void @_Z2RXRtd
; CHECK-SAME: (ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" [[Q:%.*]], double noundef [[ANGLE:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    call void @llvm.quantum.qubit(ptr noundef nonnull [[Q]])
; CHECK-NEXT:    call void @llvm.quantum.param(double noundef [[ANGLE]])
; CHECK-NEXT:    ret void
;
entry:
  call void @llvm.quantum.qubit(ptr noundef nonnull %q)
  call void @llvm.quantum.param(double noundef %angle)
  ret void
}

; Function Attrs: mustprogress noinline uwtable
define dso_local void @_Z2RYRtd(ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" %q, double noundef %angle) #0 {
; CHECK-LABEL: define dso_local void @_Z2RYRtd
; CHECK-SAME: (ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" [[Q:%.*]], double noundef [[ANGLE:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    call void @llvm.quantum.qubit(ptr noundef nonnull [[Q]])
; CHECK-NEXT:    call void @llvm.quantum.param(double noundef [[ANGLE]])
; CHECK-NEXT:    ret void
;
entry:
  call void @llvm.quantum.qubit(ptr noundef nonnull %q)
  call void @llvm.quantum.param(double noundef %angle)
  ret void
}

; Function Attrs: mustprogress noinline uwtable
define dso_local void @_Z2RZRtd(ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" %q, double noundef %angle) #0 {
; CHECK-LABEL: define dso_local void @_Z2RZRtd
; CHECK-SAME: (ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" [[Q:%.*]], double noundef [[ANGLE:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    call void @llvm.quantum.qubit(ptr noundef nonnull [[Q]])
; CHECK-NEXT:    call void @llvm.quantum.param(double noundef [[ANGLE]])
; CHECK-NEXT:    ret void
;
entry:
  call void @llvm.quantum.qubit(ptr noundef nonnull %q)
  call void @llvm.quantum.param(double noundef %angle)
  ret void
}

; Function Attrs: mustprogress noinline uwtable
define dso_local void @_Z2CZRtS_(ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" %ctrl, ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" %target) #0 {
; CHECK-LABEL: define dso_local void @_Z2CZRtS_
; CHECK-SAME: (ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" [[CTRL:%.*]], ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" [[TARGET:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    call void @llvm.quantum.qubit(ptr noundef nonnull [[CTRL]])
; CHECK-NEXT:    call void @llvm.quantum.qubit(ptr noundef nonnull [[TARGET]])
; CHECK-NEXT:    ret void
;
entry:
  call void @llvm.quantum.qubit(ptr noundef nonnull %ctrl)
  call void @llvm.quantum.qubit(ptr noundef nonnull %target)
  ret void
}

; Function Attrs: mustprogress noinline uwtable
define dso_local void @_Z4CNOTRtS_(ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" %ctrl, ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" %target) #0 {
; CHECK-LABEL: define dso_local void @_Z4CNOTRtS_
; CHECK-SAME: (ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" [[CTRL:%.*]], ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" [[TARGET:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    call void @llvm.quantum.qubit(ptr noundef nonnull [[CTRL]])
; CHECK-NEXT:    call void @llvm.quantum.qubit(ptr noundef nonnull [[TARGET]])
; CHECK-NEXT:    ret void
;
entry:
  call void @llvm.quantum.qubit(ptr noundef nonnull %ctrl)
  call void @llvm.quantum.qubit(ptr noundef nonnull %target)
  ret void
}

; Function Attrs: mustprogress noinline uwtable
define dso_local void @_Z4SWAPRtS_(ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" %ctrl, ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" %target) #0 {
; CHECK-LABEL: define dso_local void @_Z4SWAPRtS_
; CHECK-SAME: (ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" [[CTRL:%.*]], ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" [[TARGET:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    call void @llvm.quantum.qubit(ptr noundef nonnull [[CTRL]])
; CHECK-NEXT:    call void @llvm.quantum.qubit(ptr noundef nonnull [[TARGET]])
; CHECK-NEXT:    ret void
;
entry:
  call void @llvm.quantum.qubit(ptr noundef nonnull %ctrl)
  call void @llvm.quantum.qubit(ptr noundef nonnull %target)
  ret void
}

; Function Attrs: mustprogress noinline uwtable
define dso_local void @_Z7ToffoliRtS_S_(ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" %ctrl0, ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" %ctrl1, ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" %target) #0 {
; CHECK-LABEL: define dso_local void @_Z7ToffoliRtS_S_
; CHECK-SAME: (ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" [[CTRL0:%.*]], ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" [[CTRL1:%.*]], ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" [[TARGET:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    call void @llvm.quantum.qubit(ptr noundef nonnull [[CTRL0]])
; CHECK-NEXT:    call void @llvm.quantum.qubit(ptr noundef nonnull [[CTRL1]])
; CHECK-NEXT:    call void @llvm.quantum.qubit(ptr noundef nonnull [[TARGET]])
; CHECK-NEXT:    ret void
;
entry:
  call void @llvm.quantum.qubit(ptr noundef nonnull %ctrl0)
  call void @llvm.quantum.qubit(ptr noundef nonnull %ctrl1)
  call void @llvm.quantum.qubit(ptr noundef nonnull %target)
  ret void
}

; Function Attrs: mustprogress noinline uwtable
define dso_local void @_Z5PrepXRt(ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" %q) #0 {
; CHECK-LABEL: define dso_local void @_Z5PrepXRt
; CHECK-SAME: (ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" [[Q:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    call void @llvm.quantum.qubit(ptr noundef nonnull [[Q]])
; CHECK-NEXT:    ret void
;
entry:
  call void @llvm.quantum.qubit(ptr noundef nonnull %q)
  ret void
}

; Function Attrs: mustprogress noinline uwtable
define dso_local void @_Z5PrepYRt(ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" %q) #0 {
; CHECK-LABEL: define dso_local void @_Z5PrepYRt
; CHECK-SAME: (ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" [[Q:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    call void @llvm.quantum.qubit(ptr noundef nonnull [[Q]])
; CHECK-NEXT:    ret void
;
entry:
  call void @llvm.quantum.qubit(ptr noundef nonnull %q)
  ret void
}

; Function Attrs: mustprogress noinline uwtable
define dso_local void @_Z5PrepZRt(ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" %q) #0 {
; CHECK-LABEL: define dso_local void @_Z5PrepZRt
; CHECK-SAME: (ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" [[Q:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    call void @llvm.quantum.qubit(ptr noundef nonnull [[Q]])
; CHECK-NEXT:    ret void
;
entry:
  call void @llvm.quantum.qubit(ptr noundef nonnull %q)
  ret void
}

; Function Attrs: mustprogress noinline uwtable
define dso_local void @_Z5MeasXRtRbb(ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" %q, ptr noundef nonnull align 1 dereferenceable(1) "cbit_ref" %c, i1 noundef zeroext %flip) #0 {
; CHECK-LABEL: define dso_local void @_Z5MeasXRtRbb
; CHECK-SAME: (ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" [[Q:%.*]], ptr noundef nonnull align 1 dereferenceable(1) "cbit_ref" [[C:%.*]], i1 noundef zeroext [[FLIP:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    call void @llvm.quantum.qubit(ptr noundef nonnull [[Q]])
; CHECK-NEXT:    call void @llvm.quantum.cbit(ptr noundef nonnull [[C]])
; CHECK-NEXT:    [[CONV:%.*]] = uitofp i1 [[FLIP]] to double
; CHECK-NEXT:    call void @llvm.quantum.param(double noundef [[CONV]])
; CHECK-NEXT:    ret void
;
entry:
  call void @llvm.quantum.qubit(ptr noundef nonnull %q)
  call void @llvm.quantum.cbit(ptr noundef nonnull %c)
  %conv = uitofp i1 %flip to double
  call void @llvm.quantum.param(double noundef %conv)
  ret void
}

; Function Attrs: mustprogress noinline uwtable
define dso_local void @_Z5MeasYRtRbb(ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" %q, ptr noundef nonnull align 1 dereferenceable(1) "cbit_ref" %c, i1 noundef zeroext %flip) #0 {
; CHECK-LABEL: define dso_local void @_Z5MeasYRtRbb
; CHECK-SAME: (ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" [[Q:%.*]], ptr noundef nonnull align 1 dereferenceable(1) "cbit_ref" [[C:%.*]], i1 noundef zeroext [[FLIP:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    call void @llvm.quantum.qubit(ptr noundef nonnull [[Q]])
; CHECK-NEXT:    call void @llvm.quantum.cbit(ptr noundef nonnull [[C]])
; CHECK-NEXT:    [[CONV:%.*]] = uitofp i1 [[FLIP]] to double
; CHECK-NEXT:    call void @llvm.quantum.param(double noundef [[CONV]])
; CHECK-NEXT:    ret void
;
entry:
  call void @llvm.quantum.qubit(ptr noundef nonnull %q)
  call void @llvm.quantum.cbit(ptr noundef nonnull %c)
  %conv = uitofp i1 %flip to double
  call void @llvm.quantum.param(double noundef %conv)
  ret void
}

; Function Attrs: mustprogress noinline uwtable
define dso_local void @_Z5MeasZRtRbb(ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" %q, ptr noundef nonnull align 1 dereferenceable(1) "cbit_ref" %c, i1 noundef zeroext %flip) #0 {
; CHECK-LABEL: define dso_local void @_Z5MeasZRtRbb
; CHECK-SAME: (ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" [[Q:%.*]], ptr noundef nonnull align 1 dereferenceable(1) "cbit_ref" [[C:%.*]], i1 noundef zeroext [[FLIP:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    call void @llvm.quantum.qubit(ptr noundef nonnull [[Q]])
; CHECK-NEXT:    call void @llvm.quantum.cbit(ptr noundef nonnull [[C]])
; CHECK-NEXT:    [[CONV:%.*]] = uitofp i1 [[FLIP]] to double
; CHECK-NEXT:    call void @llvm.quantum.param(double noundef [[CONV]])
; CHECK-NEXT:    ret void
;
entry:
  call void @llvm.quantum.qubit(ptr noundef nonnull %q)
  call void @llvm.quantum.cbit(ptr noundef nonnull %c)
  %conv = uitofp i1 %flip to double
  call void @llvm.quantum.param(double noundef %conv)
  ret void
}

; Function Attrs: mustprogress noinline uwtable
define dso_local void @_Z6CPhaseRtS_d(ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" %ctrl, ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" %target, double noundef %angle) #0 {
; CHECK-LABEL: define dso_local void @_Z6CPhaseRtS_d
; CHECK-SAME: (ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" [[CTRL:%.*]], ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" [[TARGET:%.*]], double noundef [[ANGLE:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    call void @llvm.quantum.qubit(ptr noundef nonnull [[CTRL]])
; CHECK-NEXT:    call void @llvm.quantum.qubit(ptr noundef nonnull [[TARGET]])
; CHECK-NEXT:    call void @llvm.quantum.param(double noundef [[ANGLE]])
; CHECK-NEXT:    ret void
;
entry:
  call void @llvm.quantum.qubit(ptr noundef nonnull %ctrl)
  call void @llvm.quantum.qubit(ptr noundef nonnull %target)
  call void @llvm.quantum.param(double noundef %angle)
  ret void
}

; Function Attrs: mustprogress noinline uwtable
define dso_local void @_Z3RXYRtdd(ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" %q, double noundef %theta, double noundef %phi) #0 {
; CHECK-LABEL: define dso_local void @_Z3RXYRtdd
; CHECK-SAME: (ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" [[Q:%.*]], double noundef [[THETA:%.*]], double noundef [[PHI:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    call void @llvm.quantum.qubit(ptr noundef nonnull [[Q]])
; CHECK-NEXT:    call void @llvm.quantum.param(double noundef [[THETA]])
; CHECK-NEXT:    call void @llvm.quantum.param(double noundef [[PHI]])
; CHECK-NEXT:    ret void
;
entry:
  call void @llvm.quantum.qubit(ptr noundef nonnull %q)
  call void @llvm.quantum.param(double noundef %theta)
  call void @llvm.quantum.param(double noundef %phi)
  ret void
}

; Function Attrs: mustprogress noinline uwtable
define dso_local void @_Z5SwapARtS_d(ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" %q1, ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" %q2, double noundef %angle) #0 {
; CHECK-LABEL: define dso_local void @_Z5SwapARtS_d
; CHECK-SAME: (ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" [[Q1:%.*]], ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" [[Q2:%.*]], double noundef [[ANGLE:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    call void @llvm.quantum.qubit(ptr noundef nonnull [[Q1]])
; CHECK-NEXT:    call void @llvm.quantum.qubit(ptr noundef nonnull [[Q2]])
; CHECK-NEXT:    call void @llvm.quantum.param(double noundef [[ANGLE]])
; CHECK-NEXT:    ret void
;
entry:
  call void @llvm.quantum.qubit(ptr noundef nonnull %q1)
  call void @llvm.quantum.qubit(ptr noundef nonnull %q2)
  call void @llvm.quantum.param(double noundef %angle)
  ret void
}

; Function Attrs: mustprogress noinline uwtable
define dso_local void @_Z3RZZRtS_d.stub(ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" %q1, ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" %q2, double noundef %a) local_unnamed_addr #0 section ".qbbs_text" {
; CHECK-LABEL: define dso_local void @_Z3RZZRtS_d.stub
; CHECK-SAME: (ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" [[Q1:%.*]], ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" [[Q2:%.*]], double noundef [[A:%.*]]) local_unnamed_addr #[[ATTR1:[0-9]+]] section ".qbbs_text" {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    tail call void @_Z4CNOTRtS_(ptr noundef nonnull align 2 dereferenceable(2) [[Q1]], ptr noundef nonnull align 2 dereferenceable(2) [[Q2]])
; CHECK-NEXT:    tail call void @_Z2RZRtd(ptr noundef nonnull align 2 dereferenceable(2) [[Q2]], double noundef [[A]])
; CHECK-NEXT:    tail call void @_Z4CNOTRtS_(ptr noundef nonnull align 2 dereferenceable(2) [[Q1]], ptr noundef nonnull align 2 dereferenceable(2) [[Q2]])
; CHECK-NEXT:    ret void
;
entry:
  tail call void @_Z4CNOTRtS_(ptr noundef nonnull align 2 dereferenceable(2) %q1, ptr noundef nonnull align 2 dereferenceable(2) %q2)
  tail call void @_Z2RZRtd(ptr noundef nonnull align 2 dereferenceable(2) %q2, double noundef %a)
  tail call void @_Z4CNOTRtS_(ptr noundef nonnull align 2 dereferenceable(2) %q1, ptr noundef nonnull align 2 dereferenceable(2) %q2)
  ret void
}

; Function Attrs: mustprogress noinline uwtable
define dso_local void @_Z5IsingPtd.stub(ptr noundef "qubit_ref" %qs, double noundef %a) local_unnamed_addr #0 section ".qbbs_text" {
; CHECK-LABEL: define dso_local void @_Z5IsingPtd.stub
; CHECK-SAME: (ptr noundef "qubit_ref" [[QS:%.*]], double noundef [[A:%.*]]) local_unnamed_addr #[[ATTR1:[0-9]+]] section ".qbbs_text" {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    br label [[FOR_BODY:%.*]]
; CHECK:       for.cond.cleanup:
; CHECK-NEXT:    ret void
; CHECK:       for.body:
; CHECK-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ 0, [[ENTRY:%.*]] ], [ [[INDVARS_IV_NEXT:%.*]], [[FOR_BODY]] ]
; CHECK-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds i16, ptr [[QS]], i64 [[INDVARS_IV]]
; CHECK-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; CHECK-NEXT:    [[TMP0:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], 3
; CHECK-NEXT:    [[SEXT:%.*]] = shl i64 [[INDVARS_IV_NEXT]], 32
; CHECK-NEXT:    [[TMP1:%.*]] = ashr exact i64 [[SEXT]], 32
; CHECK-NEXT:    [[IDXPROM1:%.*]] = select i1 [[TMP0]], i64 0, i64 [[TMP1]]
; CHECK-NEXT:    [[ARRAYIDX2:%.*]] = getelementptr inbounds i16, ptr [[QS]], i64 [[IDXPROM1]]
; CHECK-NEXT:    tail call void @_Z4CNOTRtS_(ptr noundef nonnull align 2 dereferenceable(2) [[ARRAYIDX]], ptr noundef nonnull align 2 dereferenceable(2) [[ARRAYIDX2]])
; CHECK-NEXT:    tail call void @_Z2RZRtd(ptr noundef nonnull align 2 dereferenceable(2) [[ARRAYIDX2]], double noundef [[A]])
; CHECK-NEXT:    tail call void @_Z4CNOTRtS_(ptr noundef nonnull align 2 dereferenceable(2) [[ARRAYIDX]], ptr noundef nonnull align 2 dereferenceable(2) [[ARRAYIDX2]])
; CHECK-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], 3
; CHECK-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_COND_CLEANUP:%.*]], label [[FOR_BODY]], !llvm.loop [[LOOP0:![0-9]+]]
;
entry:
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body
  ret void

for.body:                                         ; preds = %for.body, %entry
  %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next, %for.body ]
  %arrayidx = getelementptr inbounds i16, ptr %qs, i64 %indvars.iv
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %0 = icmp eq i64 %indvars.iv.next, 3
  %sext = shl i64 %indvars.iv.next, 32
  %1 = ashr exact i64 %sext, 32
  %idxprom1 = select i1 %0, i64 0, i64 %1
  %arrayidx2 = getelementptr inbounds i16, ptr %qs, i64 %idxprom1
  tail call void @_Z3RZZRtS_d.stub(ptr noundef nonnull align 2 dereferenceable(2) %arrayidx, ptr noundef nonnull align 2 dereferenceable(2) %arrayidx2, double noundef %a)
  %exitcond.not = icmp eq i64 %indvars.iv.next, 3
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body, !llvm.loop !0
}

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #1

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #1

; Function Attrs: mustprogress noinline uwtable
define dso_local void @_Z8MeasureHPtRd.stub(ptr noundef "qubit_ref" %qs, ptr nocapture noundef nonnull writeonly align 8 dereferenceable(8) %E) local_unnamed_addr #0 section ".qbbs_text" {
; CHECK-LABEL: define dso_local void @_Z8MeasureHPtRd.stub
; CHECK-SAME: (ptr noundef "qubit_ref" [[QS:%.*]], ptr nocapture noundef nonnull writeonly align 8 dereferenceable(8) [[E:%.*]]) local_unnamed_addr #[[ATTR1:[0-9]+]] section ".qbbs_text" {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[C:%.*]] = alloca [3 x i8], align 1
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 3, ptr nonnull [[C]]) #[[ATTR5:[0-9]+]]
; CHECK-NEXT:    br label [[FOR_BODY:%.*]]
; CHECK:       for.cond.cleanup:
; CHECK-NEXT:    [[TMP0:%.*]] = load i8, ptr [[C]], align 1, !tbaa [[TBAA3:![0-9]+]], !range [[RNG7:![0-9]+]], !noundef !8
; CHECK-NEXT:    [[TOBOOL:%.*]] = icmp ne i8 [[TMP0]], 0
; CHECK-NEXT:    [[CONV:%.*]] = uitofp i1 [[TOBOOL]] to double
; CHECK-NEXT:    [[ARRAYIDX4:%.*]] = getelementptr inbounds [3 x i8], ptr [[C]], i64 0, i64 1
; CHECK-NEXT:    [[TMP1:%.*]] = load i8, ptr [[ARRAYIDX4]], align 1, !tbaa [[TBAA3]], !range [[RNG7]], !noundef !8
; CHECK-NEXT:    [[TOBOOL5:%.*]] = icmp ne i8 [[TMP1]], 0
; CHECK-NEXT:    [[CONV6:%.*]] = uitofp i1 [[TOBOOL5]] to double
; CHECK-NEXT:    [[ADD:%.*]] = fadd double [[CONV]], [[CONV6]]
; CHECK-NEXT:    [[ARRAYIDX7:%.*]] = getelementptr inbounds [3 x i8], ptr [[C]], i64 0, i64 2
; CHECK-NEXT:    [[TMP2:%.*]] = load i8, ptr [[ARRAYIDX7]], align 1, !tbaa [[TBAA3]], !range [[RNG7]], !noundef !8
; CHECK-NEXT:    [[TOBOOL8:%.*]] = icmp ne i8 [[TMP2]], 0
; CHECK-NEXT:    [[CONV9:%.*]] = uitofp i1 [[TOBOOL8]] to double
; CHECK-NEXT:    [[ADD10:%.*]] = fadd double [[ADD]], [[CONV9]]
; CHECK-NEXT:    store double [[ADD10]], ptr [[E]], align 8, !tbaa [[TBAA9:![0-9]+]]
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 3, ptr nonnull [[C]]) #[[ATTR5]]
; CHECK-NEXT:    ret void
; CHECK:       for.body:
; CHECK-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ 0, [[ENTRY:%.*]] ], [ [[INDVARS_IV_NEXT:%.*]], [[FOR_BODY]] ]
; CHECK-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds i16, ptr [[QS]], i64 [[INDVARS_IV]]
; CHECK-NEXT:    [[ARRAYIDX2:%.*]] = getelementptr inbounds [3 x i8], ptr [[C]], i64 0, i64 [[INDVARS_IV]]
; CHECK-NEXT:    call void @_Z5MeasXRtRbb(ptr noundef nonnull align 2 dereferenceable(2) [[ARRAYIDX]], ptr noundef nonnull align 1 dereferenceable(1) [[ARRAYIDX2]], i1 noundef zeroext false)
; CHECK-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; CHECK-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], 3
; CHECK-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_COND_CLEANUP:%.*]], label [[FOR_BODY]], !llvm.loop [[LOOP11:![0-9]+]]
;
entry:
  %c = alloca [3 x i8], align 1
  call void @llvm.lifetime.start.p0(i64 3, ptr nonnull %c) #5
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body
  %0 = load i8, ptr %c, align 1, !tbaa !3, !range !7, !noundef !8
  %tobool = icmp ne i8 %0, 0
  %conv = uitofp i1 %tobool to double
  %arrayidx4 = getelementptr inbounds [3 x i8], ptr %c, i64 0, i64 1
  %1 = load i8, ptr %arrayidx4, align 1, !tbaa !3, !range !7, !noundef !8
  %tobool5 = icmp ne i8 %1, 0
  %conv6 = uitofp i1 %tobool5 to double
  %add = fadd double %conv, %conv6
  %arrayidx7 = getelementptr inbounds [3 x i8], ptr %c, i64 0, i64 2
  %2 = load i8, ptr %arrayidx7, align 1, !tbaa !3, !range !7, !noundef !8
  %tobool8 = icmp ne i8 %2, 0
  %conv9 = uitofp i1 %tobool8 to double
  %add10 = fadd double %add, %conv9
  store double %add10, ptr %E, align 8, !tbaa !9
  call void @llvm.lifetime.end.p0(i64 3, ptr nonnull %c) #5
  ret void

for.body:                                         ; preds = %for.body, %entry
  %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next, %for.body ]
  %arrayidx = getelementptr inbounds i16, ptr %qs, i64 %indvars.iv
  %arrayidx2 = getelementptr inbounds [3 x i8], ptr %c, i64 0, i64 %indvars.iv
  call void @_Z5MeasXRtRbb(ptr noundef nonnull align 2 dereferenceable(2) %arrayidx, ptr noundef nonnull align 1 dereferenceable(1) %arrayidx2, i1 noundef zeroext false)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, 3
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body, !llvm.loop !11
}

; Function Attrs: mustprogress noinline uwtable
define dso_local void @_Z7computedRd.stub(double noundef %coef, ptr nocapture noundef nonnull writeonly align 8 dereferenceable(8) %E) local_unnamed_addr #0 section ".qbbs_text" {
; CHECK-LABEL: define dso_local void @_Z7computedRd.stub
; CHECK-SAME: (double noundef [[COEF:%.*]], ptr nocapture noundef nonnull writeonly align 8 dereferenceable(8) [[E:%.*]]) local_unnamed_addr #[[ATTR0]] section ".qbbs_text" {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[C_I:%.*]] = alloca [3 x i8], align 1
; CHECK-NEXT:    br label [[FOR_BODY:%.*]]
; CHECK:       for.cond.cleanup:
; CHECK-NEXT:    br label [[FOR_BODY_I:%.*]]
; CHECK:       for.body.i:
; CHECK-NEXT:    [[INDVARS_IV_I:%.*]] = phi i64 [ 0, [[FOR_COND_CLEANUP:%.*]] ], [ [[INDVARS_IV_NEXT_I:%.*]], [[FOR_BODY_I]] ]
; CHECK-NEXT:    [[ARRAYIDX_I:%.*]] = getelementptr inbounds i16, ptr @q, i64 [[INDVARS_IV_I]]
; CHECK-NEXT:    [[INDVARS_IV_NEXT_I]] = add nuw nsw i64 [[INDVARS_IV_I]], 1
; CHECK-NEXT:    [[TMP0:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT_I]], 3
; CHECK-NEXT:    [[SEXT_I:%.*]] = shl i64 [[INDVARS_IV_NEXT_I]], 32
; CHECK-NEXT:    [[TMP1:%.*]] = ashr exact i64 [[SEXT_I]], 32
; CHECK-NEXT:    [[IDXPROM1_I:%.*]] = select i1 [[TMP0]], i64 0, i64 [[TMP1]]
; CHECK-NEXT:    [[ARRAYIDX2_I:%.*]] = getelementptr inbounds i16, ptr @q, i64 [[IDXPROM1_I]]
; CHECK-NEXT:    tail call void @_Z4CNOTRtS_(ptr noundef nonnull align 2 dereferenceable(2) [[ARRAYIDX_I]], ptr noundef nonnull align 2 dereferenceable(2) [[ARRAYIDX2_I]])
; CHECK-NEXT:    tail call void @_Z2RZRtd(ptr noundef nonnull align 2 dereferenceable(2) [[ARRAYIDX2_I]], double noundef [[COEF]])
; CHECK-NEXT:    tail call void @_Z4CNOTRtS_(ptr noundef nonnull align 2 dereferenceable(2) [[ARRAYIDX_I]], ptr noundef nonnull align 2 dereferenceable(2) [[ARRAYIDX2_I]])
; CHECK-NEXT:    [[EXITCOND_NOT_I:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT_I]], 3
; CHECK-NEXT:    br i1 [[EXITCOND_NOT_I]], label [[_Z5ISINGPTD_STUB_EXIT:%.*]], label [[FOR_BODY_I]], !llvm.loop [[LOOP0]]
; CHECK:       _Z5IsingPtd.stub.exit:
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 3, ptr nonnull [[C_I]]) #[[ATTR5]]
; CHECK-NEXT:    br label [[FOR_BODY_I1:%.*]]
; CHECK:       for.body.i1:
; CHECK-NEXT:    [[INDVARS_IV_I2:%.*]] = phi i64 [ 0, [[_Z5ISINGPTD_STUB_EXIT]] ], [ [[INDVARS_IV_NEXT_I5:%.*]], [[FOR_BODY_I1]] ]
; CHECK-NEXT:    [[ARRAYIDX_I3:%.*]] = getelementptr inbounds i16, ptr @q, i64 [[INDVARS_IV_I2]]
; CHECK-NEXT:    [[ARRAYIDX2_I4:%.*]] = getelementptr inbounds [3 x i8], ptr [[C_I]], i64 0, i64 [[INDVARS_IV_I2]]
; CHECK-NEXT:    call void @_Z5MeasXRtRbb(ptr noundef nonnull align 2 dereferenceable(2) [[ARRAYIDX_I3]], ptr noundef nonnull align 1 dereferenceable(1) [[ARRAYIDX2_I4]], i1 noundef zeroext false)
; CHECK-NEXT:    [[INDVARS_IV_NEXT_I5]] = add nuw nsw i64 [[INDVARS_IV_I2]], 1
; CHECK-NEXT:    [[EXITCOND_NOT_I6:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT_I5]], 3
; CHECK-NEXT:    br i1 [[EXITCOND_NOT_I6]], label [[_Z8MEASUREHPTRD_STUB_EXIT:%.*]], label [[FOR_BODY_I1]], !llvm.loop [[LOOP11]]
; CHECK:       _Z8MeasureHPtRd.stub.exit:
; CHECK-NEXT:    [[TMP2:%.*]] = load i8, ptr [[C_I]], align 1, !tbaa [[TBAA3]], !range [[RNG7]], !noundef !8
; CHECK-NEXT:    [[TOBOOL_I:%.*]] = icmp ne i8 [[TMP2]], 0
; CHECK-NEXT:    [[CONV_I:%.*]] = uitofp i1 [[TOBOOL_I]] to double
; CHECK-NEXT:    [[ARRAYIDX4_I:%.*]] = getelementptr inbounds [3 x i8], ptr [[C_I]], i64 0, i64 1
; CHECK-NEXT:    [[TMP3:%.*]] = load i8, ptr [[ARRAYIDX4_I]], align 1, !tbaa [[TBAA3]], !range [[RNG7]], !noundef !8
; CHECK-NEXT:    [[TOBOOL5_I:%.*]] = icmp ne i8 [[TMP3]], 0
; CHECK-NEXT:    [[CONV6_I:%.*]] = uitofp i1 [[TOBOOL5_I]] to double
; CHECK-NEXT:    [[ADD_I:%.*]] = fadd double [[CONV_I]], [[CONV6_I]]
; CHECK-NEXT:    [[ARRAYIDX7_I:%.*]] = getelementptr inbounds [3 x i8], ptr [[C_I]], i64 0, i64 2
; CHECK-NEXT:    [[TMP4:%.*]] = load i8, ptr [[ARRAYIDX7_I]], align 1, !tbaa [[TBAA3]], !range [[RNG7]], !noundef !8
; CHECK-NEXT:    [[TOBOOL8_I:%.*]] = icmp ne i8 [[TMP4]], 0
; CHECK-NEXT:    [[CONV9_I:%.*]] = uitofp i1 [[TOBOOL8_I]] to double
; CHECK-NEXT:    [[ADD10_I:%.*]] = fadd double [[ADD_I]], [[CONV9_I]]
; CHECK-NEXT:    store double [[ADD10_I]], ptr [[E]], align 8, !tbaa [[TBAA9]]
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 3, ptr nonnull [[C_I]]) #[[ATTR5]]
; CHECK-NEXT:    ret void
; CHECK:       for.body:
; CHECK-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ 0, [[ENTRY:%.*]] ], [ [[INDVARS_IV_NEXT:%.*]], [[FOR_BODY]] ]
; CHECK-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds [3 x i16], ptr @q, i64 0, i64 [[INDVARS_IV]]
; CHECK-NEXT:    tail call void @_Z5PrepXRt(ptr noundef nonnull align 2 dereferenceable(2) [[ARRAYIDX]])
; CHECK-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; CHECK-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], 3
; CHECK-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_COND_CLEANUP]], label [[FOR_BODY]], !llvm.loop [[LOOP12:![0-9]+]]
;
entry:
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body
  tail call void @_Z5IsingPtd.stub(ptr noundef nonnull @q, double noundef %coef)
  tail call void @_Z8MeasureHPtRd.stub(ptr noundef nonnull @q, ptr noundef nonnull align 8 dereferenceable(8) %E)
  ret void

for.body:                                         ; preds = %for.body, %entry
  %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next, %for.body ]
  %arrayidx = getelementptr inbounds [3 x i16], ptr @q, i64 0, i64 %indvars.iv
  tail call void @_Z5PrepXRt(ptr noundef nonnull align 2 dereferenceable(2) %arrayidx)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, 3
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body, !llvm.loop !12
}

; Function Attrs: mustprogress uwtable
define dso_local noundef double @_Z8minimizev() local_unnamed_addr #2 {
; CHECK-LABEL: define dso_local noundef double @_Z8minimizev
; CHECK-SAME: () local_unnamed_addr #[[ATTR2:[0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[E:%.*]] = alloca double, align 8
; CHECK-NEXT:    [[COEF:%.*]] = alloca double, align 8
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 8, ptr nonnull [[E]]) #[[ATTR5]]
; CHECK-NEXT:    store double 0.000000e+00, ptr [[E]], align 8, !tbaa [[TBAA9]]
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 8, ptr nonnull [[COEF]]) #[[ATTR5]]
; CHECK-NEXT:    store double 1.000000e-01, ptr [[COEF]], align 8, !tbaa [[TBAA9]]
; CHECK-NEXT:    [[CALL1:%.*]] = call noundef zeroext i1 @_Z13min_classicalRdS_(ptr noundef nonnull align 8 dereferenceable(8) [[COEF]], ptr noundef nonnull align 8 dereferenceable(8) [[E]])
; CHECK-NEXT:    br i1 [[CALL1]], label [[WHILE_BODY:%.*]], label [[WHILE_END:%.*]]
; CHECK:       while.body:
; CHECK-NEXT:    [[TMP0:%.*]] = load double, ptr [[COEF]], align 8, !tbaa [[TBAA9]]
; CHECK-NEXT:    call void @_Z7computedRd.stub(double noundef [[TMP0]], ptr noundef nonnull align 8 dereferenceable(8) [[E]])
; CHECK-NEXT:    [[CALL:%.*]] = call noundef zeroext i1 @_Z13min_classicalRdS_(ptr noundef nonnull align 8 dereferenceable(8) [[COEF]], ptr noundef nonnull align 8 dereferenceable(8) [[E]])
; CHECK-NEXT:    br i1 [[CALL]], label [[WHILE_BODY]], label [[WHILE_END]], !llvm.loop [[LOOP13:![0-9]+]]
; CHECK:       while.end:
; CHECK-NEXT:    [[TMP1:%.*]] = load double, ptr [[E]], align 8, !tbaa [[TBAA9]]
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 8, ptr nonnull [[COEF]]) #[[ATTR5]]
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 8, ptr nonnull [[E]]) #[[ATTR5]]
; CHECK-NEXT:    ret double [[TMP1]]
;
entry:
  %E = alloca double, align 8
  %coef = alloca double, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %E) #5
  store double 0.000000e+00, ptr %E, align 8, !tbaa !9
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %coef) #5
  store double 1.000000e-01, ptr %coef, align 8, !tbaa !9
  %call1 = call noundef zeroext i1 @_Z13min_classicalRdS_(ptr noundef nonnull align 8 dereferenceable(8) %coef, ptr noundef nonnull align 8 dereferenceable(8) %E)
  br i1 %call1, label %while.body, label %while.end

while.body:                                       ; preds = %while.body, %entry
  %0 = load double, ptr %coef, align 8, !tbaa !9
  call void @_Z7computedRd.stub(double noundef %0, ptr noundef nonnull align 8 dereferenceable(8) %E)
  %call = call noundef zeroext i1 @_Z13min_classicalRdS_(ptr noundef nonnull align 8 dereferenceable(8) %coef, ptr noundef nonnull align 8 dereferenceable(8) %E)
  br i1 %call, label %while.body, label %while.end, !llvm.loop !13

while.end:                                        ; preds = %while.body, %entry
  %1 = load double, ptr %E, align 8, !tbaa !9
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %coef) #5
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %E) #5
  ret double %1
}

declare noundef zeroext i1 @_Z13min_classicalRdS_(ptr noundef nonnull align 8 dereferenceable(8), ptr noundef nonnull align 8 dereferenceable(8)) local_unnamed_addr #3

; Function Attrs: mustprogress norecurse uwtable
define dso_local noundef i32 @main() local_unnamed_addr #4 {
; CHECK-LABEL: define dso_local noundef i32 @main
; CHECK-SAME: () local_unnamed_addr #[[ATTR4:[0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[E_I:%.*]] = alloca double, align 8
; CHECK-NEXT:    [[COEF_I:%.*]] = alloca double, align 8
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 8, ptr nonnull [[E_I]]) #[[ATTR5]]
; CHECK-NEXT:    store double 0.000000e+00, ptr [[E_I]], align 8, !tbaa [[TBAA9]]
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 8, ptr nonnull [[COEF_I]]) #[[ATTR5]]
; CHECK-NEXT:    store double 1.000000e-01, ptr [[COEF_I]], align 8, !tbaa [[TBAA9]]
; CHECK-NEXT:    [[CALL1_I:%.*]] = call noundef zeroext i1 @_Z13min_classicalRdS_(ptr noundef nonnull align 8 dereferenceable(8) [[COEF_I]], ptr noundef nonnull align 8 dereferenceable(8) [[E_I]])
; CHECK-NEXT:    br i1 [[CALL1_I]], label [[WHILE_BODY_I:%.*]], label [[_Z8MINIMIZEV_EXIT:%.*]]
; CHECK:       while.body.i:
; CHECK-NEXT:    [[TMP0:%.*]] = load double, ptr [[COEF_I]], align 8, !tbaa [[TBAA9]]
; CHECK-NEXT:    call void @_Z7computedRd.stub(double noundef [[TMP0]], ptr noundef nonnull align 8 dereferenceable(8) [[E_I]])
; CHECK-NEXT:    [[CALL_I:%.*]] = call noundef zeroext i1 @_Z13min_classicalRdS_(ptr noundef nonnull align 8 dereferenceable(8) [[COEF_I]], ptr noundef nonnull align 8 dereferenceable(8) [[E_I]])
; CHECK-NEXT:    br i1 [[CALL_I]], label [[WHILE_BODY_I]], label [[_Z8MINIMIZEV_EXIT]], !llvm.loop [[LOOP13]]
; CHECK:       _Z8minimizev.exit:
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 8, ptr nonnull [[COEF_I]]) #[[ATTR5]]
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 8, ptr nonnull [[E_I]]) #[[ATTR5]]
; CHECK-NEXT:    ret i32 0
;
entry:
  %E.i = alloca double, align 8
  %coef.i = alloca double, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %E.i) #5
  store double 0.000000e+00, ptr %E.i, align 8, !tbaa !9
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %coef.i) #5
  store double 1.000000e-01, ptr %coef.i, align 8, !tbaa !9
  %call1.i = call noundef zeroext i1 @_Z13min_classicalRdS_(ptr noundef nonnull align 8 dereferenceable(8) %coef.i, ptr noundef nonnull align 8 dereferenceable(8) %E.i)
  br i1 %call1.i, label %while.body.i, label %_Z8minimizev.exit

while.body.i:                                     ; preds = %while.body.i, %entry
  %0 = load double, ptr %coef.i, align 8, !tbaa !9
  call void @_Z7computedRd.stub(double noundef %0, ptr noundef nonnull align 8 dereferenceable(8) %E.i)
  %call.i = call noundef zeroext i1 @_Z13min_classicalRdS_(ptr noundef nonnull align 8 dereferenceable(8) %coef.i, ptr noundef nonnull align 8 dereferenceable(8) %E.i)
  br i1 %call.i, label %while.body.i, label %_Z8minimizev.exit, !llvm.loop !13

_Z8minimizev.exit:                                ; preds = %while.body.i, %entry
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %coef.i) #5
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %E.i) #5
  ret i32 0
}

; Function Attrs: nounwind
declare void @llvm.quantum.qubit(ptr) #5

; Function Attrs: nounwind
declare void @llvm.quantum.param(double) #5

; Function Attrs: nounwind
declare void @llvm.quantum.cbit(ptr) #5

attributes #0 = { mustprogress noinline uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }
attributes #2 = { mustprogress uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { mustprogress norecurse uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { nounwind }

!0 = distinct !{!0, !1, !2}
!1 = !{!"llvm.loop.mustprogress"}
!2 = !{!"llvm.loop.unroll.disable"}
!3 = !{!4, !4, i64 0}
!4 = !{!"bool", !5, i64 0}
!5 = !{!"omnipotent char", !6, i64 0}
!6 = !{!"Simple C++ TBAA"}
!7 = !{i8 0, i8 2}
!8 = !{}
!9 = !{!10, !10, i64 0}
!10 = !{!"double", !5, i64 0}
!11 = distinct !{!11, !1, !2}
!12 = distinct !{!12, !1, !2}
!13 = distinct !{!13, !1, !2}
