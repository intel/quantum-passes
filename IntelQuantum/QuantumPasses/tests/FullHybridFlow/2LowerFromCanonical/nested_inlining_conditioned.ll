; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 2
; RUN: opt -S %loadintelquantumpasses -p=q-annotations-to-json,spin-native-annotate,spin-lower-from-canonical %s -o - | FileCheck %s --dump-input fail
; ModuleID = 'test.ll'
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [325 x i8] c"{     \22matrix_real\22 : \221/sqrt(2)*[1, 1, 1, -1]\22,     \22matrix_imag\22 : [0, 0, 0, 0],     \22matrix_order\22 : \22rm\22,     \22is_hermitian\22 : true,     \22is_unitary\22 : true,     \22is_mutable\22 : true,     \22qubit_list\22 : [0],     \22parametric_list\22 : [],     \22control_qubit_list\22 : [],     \22local_basis_list\22 : [4],     \22identifier\22 : 3   }\00", section "llvm.metadata"
@.str.1 = private unnamed_addr constant [37 x i8] c"include/clang/Quantum/quintrinsics.h\00", section "llvm.metadata"
@.str.2 = private unnamed_addr constant [313 x i8] c"{     \22matrix_real\22 : [0, 1, 1, 0],     \22matrix_imag\22 : [0, 0, 0, 0],     \22matrix_order\22 : \22rm\22,     \22is_hermitian\22 : true,     \22is_unitary\22 : true,     \22is_mutable\22 : true,     \22qubit_list\22 : [0],     \22parametric_list\22 : [],     \22control_qubit_list\22 : [],     \22local_basis_list\22 : [1],     \22identifier\22 : 12   }\00", section "llvm.metadata"
@.str.3 = private unnamed_addr constant [314 x i8] c"{     \22matrix_real\22 : [0, 0, 0, 0],     \22matrix_imag\22 : [0, -1, 1, 0],     \22matrix_order\22 : \22rm\22,     \22is_hermitian\22 : true,     \22is_unitary\22 : true,     \22is_mutable\22 : true,     \22qubit_list\22 : [0],     \22parametric_list\22 : [],     \22control_qubit_list\22 : [],     \22local_basis_list\22 : [2],     \22identifier\22 : 18   }\00", section "llvm.metadata"
@.str.4 = private unnamed_addr constant [313 x i8] c"{     \22matrix_real\22 : [1, 0, 0, -1],     \22matrix_imag\22 : [0, 0, 0, 0],     \22matrix_order\22 : \22rm\22,     \22is_hermitian\22 : true,     \22is_unitary\22 : true,     \22is_mutable\22 : true,     \22qubit_list\22 : [0],     \22parametric_list\22 : [],     \22control_qubit_list\22 : [],     \22local_basis_list\22 : [3],     \22identifier\22 : 6   }\00", section "llvm.metadata"
@.str.5 = private unnamed_addr constant [313 x i8] c"{     \22matrix_real\22 : [1, 0, 0, 0],     \22matrix_imag\22 : [0, 0, 0, 1],     \22matrix_order\22 : \22rm\22,     \22is_hermitian\22 : false,     \22is_unitary\22 : true,     \22is_mutable\22 : true,     \22qubit_list\22 : [0],     \22parametric_list\22 : [],     \22control_qubit_list\22 : [],     \22local_basis_list\22 : [3],     \22identifier\22 : 5   }\00", section "llvm.metadata"
@.str.6 = private unnamed_addr constant [315 x i8] c"{     \22matrix_real\22 : [1, 0, 0, 0],     \22matrix_imag\22 : [0, 0, 0, -1],     \22matrix_order\22 : \22rm\22,     \22is_hermitian\22 : false,     \22is_unitary\22 : true,     \22is_mutable\22 : true,     \22qubit_list\22 : [0],     \22parametric_list\22 : [],     \22control_qubit_list\22 : [],     \22local_basis_list\22 : [3],     \22identifier\22 : 11   }\00", section "llvm.metadata"
@.str.7 = private unnamed_addr constant [334 x i8] c"{     \22matrix_real\22 : \22[1, 0, 0, cos(pi/4)]\22,     \22matrix_imag\22 : \22[0, 0, 0, sin(pi/4)]\22,     \22matrix_order\22 : \22rm\22,     \22is_hermitian\22 : false,     \22is_unitary\22 : true,     \22is_mutable\22 : true,     \22qubit_list\22 : [0],     \22parametric_list\22 : [],     \22control_qubit_list\22 : [],     \22local_basis_list\22 : [3],     \22identifier\22 : 24   }\00", section "llvm.metadata"
@.str.8 = private unnamed_addr constant [335 x i8] c"{     \22matrix_real\22 : \22[1, 0, 0, cos(pi/4)]\22,     \22matrix_imag\22 : \22[0, 0, 0, -sin(pi/4)]\22,     \22matrix_order\22 : \22rm\22,     \22is_hermitian\22 : false,     \22is_unitary\22 : true,     \22is_mutable\22 : true,     \22qubit_list\22 : [0],     \22parametric_list\22 : [],     \22control_qubit_list\22 : [],     \22local_basis_list\22 : [3],     \22identifier\22 : 25   }\00", section "llvm.metadata"
@.str.9 = private unnamed_addr constant [364 x i8] c"{     \22matrix_real\22 : \22[cos(angle/2), 0, 0, cos(angle/2)]\22,     \22matrix_imag\22 : \22[0, -sin(angle/2), sin(angle/2), 0]\22,     \22matrix_order\22 : \22rm\22,     \22is_hermitian\22 : false,     \22is_unitary\22 : true,     \22is_mutable\22 : true,     \22qubit_list\22 : [0],     \22parametric_list\22 : [1],     \22control_qubit_list\22 : [],     \22local_basis_list\22 : [1],     \22identifier\22 : 26   }\00", section "llvm.metadata"
@.str.10 = private unnamed_addr constant [362 x i8] c"{     \22matrix_real\22 : \22[cos(angle/2), -sin(angle/2), sin(angle/2), cos(angle/2)]\22,     \22matrix_imag\22 : [0, 0, 0, 0],     \22matrix_order\22 : \22rm\22,     \22is_hermitian\22 : false,     \22is_unitary\22 : true,     \22is_mutable\22 : true,     \22qubit_list\22 : [0],     \22parametric_list\22 : [1],     \22control_qubit_list\22 : [],     \22local_basis_list\22 : [2],     \22identifier\22 : 27   }\00", section "llvm.metadata"
@.str.11 = private unnamed_addr constant [364 x i8] c"{     \22matrix_real\22 : \22[cos(angle/2), 0, 0, cos(angle/2)]\22,     \22matrix_imag\22 : \22[-sin(angle/2), 0, 0, sin(angle/2)]\22,     \22matrix_order\22 : \22rm\22,     \22is_hermitian\22 : false,     \22is_unitary\22 : true,     \22is_mutable\22 : true,     \22qubit_list\22 : [0],     \22parametric_list\22 : [1],     \22control_qubit_list\22 : [],     \22local_basis_list\22 : [3],     \22identifier\22 : 28   }\00", section "llvm.metadata"
@.str.12 = private unnamed_addr constant [396 x i8] c"{     \22matrix_real\22 : [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, -1],     \22matrix_imag\22 : [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     \22matrix_order\22 : \22rm\22,     \22is_hermitian\22 : true,     \22is_unitary\22 : true,     \22is_mutable\22 : true,     \22qubit_list\22 : [0, 1],     \22parametric_list\22 : [],     \22control_qubit_list\22 : [0, 1],     \22local_basis_list\22 : [3, 3],     \22identifier\22 : 37   }\00", section "llvm.metadata"
@.str.13 = private unnamed_addr constant [392 x i8] c"{     \22matrix_real\22 : [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0],     \22matrix_imag\22 : [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     \22matrix_order\22 : \22rm\22,     \22is_hermitian\22 : true,     \22is_unitary\22 : true,     \22is_mutable\22 : true,     \22qubit_list\22 : [0, 1],     \22parametric_list\22 : [],     \22control_qubit_list\22 : [0],     \22local_basis_list\22 : [3, 1],     \22identifier\22 : 35   }\00", section "llvm.metadata"
@.str.14 = private unnamed_addr constant [391 x i8] c"{     \22matrix_real\22 : [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1],     \22matrix_imag\22 : [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     \22matrix_order\22 : \22rm\22,     \22is_hermitian\22 : true,     \22is_unitary\22 : true,     \22is_mutable\22 : true,     \22qubit_list\22 : [0, 1],     \22parametric_list\22 : [],     \22control_qubit_list\22 : [],     \22local_basis_list\22 : [0, 0],     \22identifier\22 : 38   }\00", section "llvm.metadata"
@.str.15 = private unnamed_addr constant [689 x i8] c"{     \22matrix_real\22 : [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0],     \22matrix_imag\22 : [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     \22matrix_order\22 : \22rm\22,     \22is_hermitian\22 : true,     \22is_unitary\22 : true,     \22is_mutable\22 : true,     \22qubit_list\22 : [0, 1, 2],     \22parametric_list\22 : [],     \22control_qubit_list\22 : [0, 1],     \22local_basis_list\22 : [3, 3, 1],     \22identifier\22 : 39   }\00", section "llvm.metadata"
@.str.16 = private unnamed_addr constant [417 x i8] c"{     \22matrix_real\22 : \22{qt(prob0) : [0.5, 0.5, 0.5, 0.5], qt(prob1) : [0.5, -0.5, 0.5, -0.5]}\22,     \22matrix_imag\22 : \22{qt(prob0) : [0, 0, 0, 0], qt(prob1) : [0, 0, 0, 0]}\22,     \22matrix_order\22 : \22rm\22,     \22is_hermitian\22 : false,     \22is_unitary\22 : false,     \22is_mutable\22 : true,     \22qubit_list\22 : [0],     \22parametric_list\22 : [],     \22control_qubit_list\22 : [],     \22local_basis_list\22 : [1],     \22identifier\22 : 40   }\00", section "llvm.metadata"
@.str.17 = private unnamed_addr constant [417 x i8] c"{     \22matrix_real\22 : \22{qt(prob0) : [0.5, 0, 0, 0.5], qt(prob1) : [0.5, 0, 0, -0.5]}\22,     \22matrix_imag\22 : \22{qt(prob0) : [0, 0.5, -0.5, 0], qt(prob1) : [0, 0.5, 0.5, 0]}\22,     \22matrix_order\22 : \22rm\22,     \22is_hermitian\22 : false,     \22is_unitary\22 : false,     \22is_mutable\22 : true,     \22qubit_list\22 : [0],     \22parametric_list\22 : [],     \22control_qubit_list\22 : [],     \22local_basis_list\22 : [2],     \22identifier\22 : 41   }\00", section "llvm.metadata"
@.str.18 = private unnamed_addr constant [399 x i8] c"{     \22matrix_real\22 : \22{qt(prob0) : [1, 0, 0, 0], qt(prob1) : [0, 1, 0, 0]}\22,     \22matrix_imag\22 : \22{qt(prob0) : [0, 0, 0, 0], qt(prob1) : [0, 0, 0, 0]}\22,     \22matrix_order\22 : \22rm\22,     \22is_hermitian\22 : false,     \22is_unitary\22 : false,     \22is_mutable\22 : true,     \22qubit_list\22 : [0],     \22parametric_list\22 : [],     \22control_qubit_list\22 : [],     \22local_basis_list\22 : [3],     \22identifier\22 : 42   }\00", section "llvm.metadata"
@.str.19 = private unnamed_addr constant [421 x i8] c"{     \22matrix_real\22 : \22{qt(prob0) : [0.5, 0.5, 0.5, 0.5], qt(prob1) : [0.5, -0.5, -0.5, 0.5]}\22,     \22matrix_imag\22 : \22{qt(prob0) : [0, 0, 0, 0], qt(prob1) : [0, 0, 0, 0]}\22,     \22matrix_order\22 : \22rm\22,     \22is_hermitian\22 : false,     \22is_unitary\22 : false,     \22is_mutable\22 : true,     \22qubit_list\22 : [0],     \22parametric_list\22 : [1, 2],     \22control_qubit_list\22 : [],     \22local_basis_list\22 : [1],     \22identifier\22 : 43   }\00", section "llvm.metadata"
@.str.20 = private unnamed_addr constant [421 x i8] c"{     \22matrix_real\22 : \22{qt(prob0) : [0.5, 0, 0, 0.5], qt(prob1) : [0.5, 0, 0, 0.5]}\22,     \22matrix_imag\22 : \22{qt(prob0) : [0, 0.5, -0.5, 0], qt(prob1) : [0, -0.5, 0.5, 0]}\22,     \22matrix_order\22 : \22rm\22,     \22is_hermitian\22 : false,     \22is_unitary\22 : false,     \22is_mutable\22 : true,     \22qubit_list\22 : [0],     \22parametric_list\22 : [1, 2],     \22control_qubit_list\22 : [],     \22local_basis_list\22 : [2],     \22identifier\22 : 44   }\00", section "llvm.metadata"
@.str.21 = private unnamed_addr constant [403 x i8] c"{     \22matrix_real\22 : \22{qt(prob0) : [1, 0, 0, 0], qt(prob1) : [0, 0, 0, 1]}\22,     \22matrix_imag\22 : \22{qt(prob0) : [0, 0, 0, 0], qt(prob1) : [0, 0, 0, 0]}\22,     \22matrix_order\22 : \22rm\22,     \22is_hermitian\22 : false,     \22is_unitary\22 : false,     \22is_mutable\22 : true,     \22qubit_list\22 : [0],     \22parametric_list\22 : [1, 2],     \22control_qubit_list\22 : [],     \22local_basis_list\22 : [3],     \22identifier\22 : 45   }\00", section "llvm.metadata"
@.str.22 = private unnamed_addr constant [420 x i8] c"{     \22matrix_real\22 : \22[1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, cos(angle)]\22,     \22matrix_imag\22 : \22[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -sin(angle)]\22,     \22matrix_order\22 : \22rm\22,     \22is_hermitian\22 : false,     \22is_unitary\22 : true,     \22is_mutable\22 : true,     \22qubit_list\22 : [0, 1],     \22parametric_list\22 : [2],     \22control_qubit_list\22 : [0, 1],     \22local_basis_list\22 : [3, 3],     \22identifier\22 : 46   }\00", section "llvm.metadata"
@.str.23 = private unnamed_addr constant [423 x i8] c"{     \22matrix_real\22 : \22[cos(theta/2), -sin(theta/2) sin(phi), sin(theta/2) sin(phi), cos(theta/2)]\22,     \22matrix_imag\22 : \22[0, -sin(theta/2)cos(phi), sin(theta/2)cos(phi), 0]\22,     \22matrix_order\22 : \22rm\22,     \22is_hermitian\22 : false,     \22is_unitary\22 : true,     \22is_mutable\22 : true,     \22qubit_list\22 : [0],     \22parametric_list\22 : [1,2],     \22control_qubit_list\22 : [],     \22local_basis_list\22 : [0],     \22identifier\22 : 47   }\00", section "llvm.metadata"
@.str.24 = private unnamed_addr constant [503 x i8] c"{     \22matrix_real\22 : \22[1, 0, 0, 0, 0, (1+cos(angle))/2, (1-cos(angle))/2, 0, 0, (1-cos(angle))/2, (1+cos(angle))/2, 0, 0, 0, 0, 1]\22,     \22matrix_imag\22 : \22[1, 0, 0, 0, 0, sin(angle)/2, -sin(angle)/2, 0, 0, -sin(angle)/2, sin(angle)/2, 0, 0, 0, 0, 1]\22,     \22matrix_order\22 : \22rm\22,     \22is_hermitian\22 : false,     \22is_unitary\22 : true,     \22is_mutable\22 : true,     \22qubit_list\22 : [0, 1],     \22parametric_list\22 : [2],     \22control_qubit_list\22 : [],     \22local_basis_list\22 : [0, 0],     \22identifier\22 : 53   }\00", section "llvm.metadata"
@q = dso_local global [3 x i16] zeroinitializer, align 2
@llvm.global.annotations = appending global [24 x { ptr, ptr, ptr, i32, ptr }] [{ ptr, ptr, ptr, i32, ptr } { ptr @_Z1HRt, ptr @.str, ptr @.str.1, i32 48, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @_Z1XRt, ptr @.str.2, ptr @.str.1, i32 68, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @_Z1YRt, ptr @.str.3, ptr @.str.1, i32 88, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @_Z1ZRt, ptr @.str.4, ptr @.str.1, i32 109, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @_Z1SRt, ptr @.str.5, ptr @.str.1, i32 129, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @_Z4SdagRt, ptr @.str.6, ptr @.str.1, i32 149, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @_Z1TRt, ptr @.str.7, ptr @.str.1, i32 169, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @_Z4TdagRt, ptr @.str.8, ptr @.str.1, i32 189, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @_Z2RXRtd, ptr @.str.9, ptr @.str.1, i32 209, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @_Z2RYRtd, ptr @.str.10, ptr @.str.1, i32 230, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @_Z2RZRtd, ptr @.str.11, ptr @.str.1, i32 251, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @_Z2CZRtS_, ptr @.str.12, ptr @.str.1, i32 272, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @_Z4CNOTRtS_, ptr @.str.13, ptr @.str.1, i32 293, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @_Z4SWAPRtS_, ptr @.str.14, ptr @.str.1, i32 314, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @_Z7ToffoliRtS_S_, ptr @.str.15, ptr @.str.1, i32 335, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @_Z5PrepXRt, ptr @.str.16, ptr @.str.1, i32 359, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @_Z5PrepYRt, ptr @.str.17, ptr @.str.1, i32 377, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @_Z5PrepZRt, ptr @.str.18, ptr @.str.1, i32 395, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @_Z5MeasXRtRbb, ptr @.str.19, ptr @.str.1, i32 413, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @_Z5MeasYRtRbb, ptr @.str.20, ptr @.str.1, i32 433, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @_Z5MeasZRtRbb, ptr @.str.21, ptr @.str.1, i32 453, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @_Z6CPhaseRtS_d, ptr @.str.22, ptr @.str.1, i32 481, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @_Z3RXYRtdd, ptr @.str.23, ptr @.str.1, i32 503, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @_Z5SwapARtS_d, ptr @.str.24, ptr @.str.1, i32 525, ptr null }], section "llvm.metadata"

; Function Attrs: mustprogress noinline nounwind uwtable
define dso_local void @_Z1HRt(ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" %q) #0 {
entry:
  tail call void @llvm.quantum.qubit(ptr noundef nonnull align 2 dereferenceable(2) %q)
  ret void
}

; Function Attrs: mustprogress noinline nounwind uwtable
define dso_local void @_Z1XRt(ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" %q) #0 {
entry:
  tail call void @llvm.quantum.qubit(ptr noundef nonnull align 2 dereferenceable(2) %q)
  ret void
}

; Function Attrs: mustprogress noinline nounwind uwtable
define dso_local void @_Z1YRt(ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" %q) #0 {
entry:
  tail call void @llvm.quantum.qubit(ptr noundef nonnull align 2 dereferenceable(2) %q)
  ret void
}

; Function Attrs: mustprogress noinline nounwind uwtable
define dso_local void @_Z1ZRt(ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" %q) #0 {
entry:
  tail call void @llvm.quantum.qubit(ptr noundef nonnull align 2 dereferenceable(2) %q)
  ret void
}

; Function Attrs: mustprogress noinline nounwind uwtable
define dso_local void @_Z1SRt(ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" %q) #0 {
entry:
  tail call void @llvm.quantum.qubit(ptr noundef nonnull align 2 dereferenceable(2) %q)
  ret void
}

; Function Attrs: mustprogress noinline nounwind uwtable
define dso_local void @_Z4SdagRt(ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" %q) #0 {
entry:
  tail call void @llvm.quantum.qubit(ptr noundef nonnull align 2 dereferenceable(2) %q)
  ret void
}

; Function Attrs: mustprogress noinline nounwind uwtable
define dso_local void @_Z1TRt(ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" %q) #0 {
entry:
  tail call void @llvm.quantum.qubit(ptr noundef nonnull align 2 dereferenceable(2) %q)
  ret void
}

; Function Attrs: mustprogress noinline nounwind uwtable
define dso_local void @_Z4TdagRt(ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" %q) #0 {
entry:
  tail call void @llvm.quantum.qubit(ptr noundef nonnull align 2 dereferenceable(2) %q)
  ret void
}

; Function Attrs: mustprogress noinline nounwind uwtable
define dso_local void @_Z2RXRtd(ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" %q, double noundef %angle) #0 {
entry:
  tail call void @llvm.quantum.qubit(ptr noundef nonnull align 2 dereferenceable(2) %q)
  tail call void @llvm.quantum.param(double noundef %angle)
  ret void
}

; Function Attrs: mustprogress noinline nounwind uwtable
define dso_local void @_Z2RYRtd(ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" %q, double noundef %angle) #0 {
entry:
  tail call void @llvm.quantum.qubit(ptr noundef nonnull align 2 dereferenceable(2) %q)
  tail call void @llvm.quantum.param(double noundef %angle)
  ret void
}

; Function Attrs: mustprogress noinline nounwind uwtable
define dso_local void @_Z2RZRtd(ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" %q, double noundef %angle) #0 {
entry:
  tail call void @llvm.quantum.qubit(ptr noundef nonnull align 2 dereferenceable(2) %q)
  tail call void @llvm.quantum.param(double noundef %angle)
  ret void
}

; Function Attrs: mustprogress noinline nounwind uwtable
define dso_local void @_Z2CZRtS_(ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" %ctrl, ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" %target) #0 {
entry:
  tail call void @llvm.quantum.qubit(ptr noundef nonnull align 2 dereferenceable(2) %ctrl)
  tail call void @llvm.quantum.qubit(ptr noundef nonnull %target)
  ret void
}

; Function Attrs: mustprogress noinline nounwind uwtable
define dso_local void @_Z4CNOTRtS_(ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" %ctrl, ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" %target) #0 {
entry:
  tail call void @llvm.quantum.qubit(ptr noundef nonnull align 2 dereferenceable(2) %ctrl)
  tail call void @llvm.quantum.qubit(ptr noundef nonnull %target)
  ret void
}

; Function Attrs: mustprogress noinline nounwind uwtable
define dso_local void @_Z4SWAPRtS_(ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" %ctrl, ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" %target) #0 {
entry:
  tail call void @llvm.quantum.qubit(ptr noundef nonnull align 2 dereferenceable(2) %ctrl)
  tail call void @llvm.quantum.qubit(ptr noundef nonnull %target)
  ret void
}

; Function Attrs: mustprogress noinline nounwind uwtable
define dso_local void @_Z7ToffoliRtS_S_(ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" %ctrl0, ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" %ctrl1, ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" %target) #0 {
entry:
  tail call void @llvm.quantum.qubit(ptr noundef nonnull align 2 dereferenceable(2) %ctrl0)
  tail call void @llvm.quantum.qubit(ptr noundef nonnull %ctrl1)
  tail call void @llvm.quantum.qubit(ptr noundef nonnull %target)
  ret void
}

; Function Attrs: mustprogress noinline nounwind uwtable
define dso_local void @_Z5PrepXRt(ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" %q) #0 {
entry:
  tail call void @llvm.quantum.qubit(ptr noundef nonnull align 2 dereferenceable(2) %q)
  ret void
}

; Function Attrs: mustprogress noinline nounwind uwtable
define dso_local void @_Z5PrepYRt(ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" %q) #0 {
entry:
  tail call void @llvm.quantum.qubit(ptr noundef nonnull align 2 dereferenceable(2) %q)
  ret void
}

; Function Attrs: mustprogress noinline nounwind uwtable
define dso_local void @_Z5PrepZRt(ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" %q) #0 {
entry:
  tail call void @llvm.quantum.qubit(ptr noundef nonnull align 2 dereferenceable(2) %q)
  ret void
}

; Function Attrs: mustprogress noinline nounwind uwtable
define dso_local void @_Z5MeasXRtRbb(ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" %q, ptr noundef nonnull align 1 dereferenceable(1) "cbit_ref" %c, i1 noundef zeroext %flip) #0 {
entry:
  tail call void @llvm.quantum.qubit(ptr noundef nonnull align 2 dereferenceable(2) %q)
  tail call void @llvm.quantum.cbit(ptr noundef nonnull %c)
  %conv = uitofp i1 %flip to double
  tail call void @llvm.quantum.param(double noundef %conv)
  ret void
}

; Function Attrs: mustprogress noinline nounwind uwtable
define dso_local void @_Z5MeasYRtRbb(ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" %q, ptr noundef nonnull align 1 dereferenceable(1) "cbit_ref" %c, i1 noundef zeroext %flip) #0 {
entry:
  tail call void @llvm.quantum.qubit(ptr noundef nonnull align 2 dereferenceable(2) %q)
  tail call void @llvm.quantum.cbit(ptr noundef nonnull %c)
  %conv = uitofp i1 %flip to double
  tail call void @llvm.quantum.param(double noundef %conv)
  ret void
}

; Function Attrs: mustprogress noinline nounwind uwtable
define dso_local void @_Z5MeasZRtRbb(ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" %q, ptr noundef nonnull align 1 dereferenceable(1) "cbit_ref" %c, i1 noundef zeroext %flip) #0 {
entry:
  tail call void @llvm.quantum.qubit(ptr noundef nonnull align 2 dereferenceable(2) %q)
  tail call void @llvm.quantum.cbit(ptr noundef nonnull %c)
  %conv = uitofp i1 %flip to double
  tail call void @llvm.quantum.param(double noundef %conv)
  ret void
}

; Function Attrs: mustprogress noinline nounwind uwtable
define dso_local void @_Z6CPhaseRtS_d(ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" %ctrl, ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" %target, double noundef %angle) #0 {
entry:
  tail call void @llvm.quantum.qubit(ptr noundef nonnull align 2 dereferenceable(2) %ctrl)
  tail call void @llvm.quantum.qubit(ptr noundef nonnull %target)
  tail call void @llvm.quantum.param(double noundef %angle)
  ret void
}

; Function Attrs: mustprogress noinline nounwind uwtable
define dso_local void @_Z3RXYRtdd(ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" %q, double noundef %theta, double noundef %phi) #0 {
entry:
  tail call void @llvm.quantum.qubit(ptr noundef nonnull align 2 dereferenceable(2) %q)
  tail call void @llvm.quantum.param(double noundef %theta)
  tail call void @llvm.quantum.param(double noundef %phi)
  ret void
}

; Function Attrs: mustprogress noinline nounwind uwtable
define dso_local void @_Z5SwapARtS_d(ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" %q1, ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" %q2, double noundef %angle) #0 {
entry:
  tail call void @llvm.quantum.qubit(ptr noundef nonnull align 2 dereferenceable(2) %q1)
  tail call void @llvm.quantum.qubit(ptr noundef nonnull %q2)
  tail call void @llvm.quantum.param(double noundef %angle)
  ret void
}

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #1

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #1

; Function Attrs: mustprogress noinline nounwind uwtable
define dso_local void @_Z7computedRd.stub(double noundef %coef, ptr nocapture nofree noundef nonnull writeonly align 8 dereferenceable(8) %E) local_unnamed_addr #0 section ".qbbs_text" {
; CHECK-LABEL: define dso_local void @_Z7computedRd.stub
; CHECK-SAME: (double noundef [[COEF:%.*]], ptr nocapture nofree noundef nonnull writeonly align 8 dereferenceable(8) [[E:%.*]]) local_unnamed_addr #[[ATTR1:[0-9]+]] section ".qbbs_text" {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[C_I:%.*]] = alloca [3 x i8], align 1
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 noundef 3, ptr noundef nonnull dereferenceable(3) [[C_I]]) #[[ATTR5:[0-9]+]]
; CHECK-NEXT:    [[ARRAYIDX3_I:%.*]] = getelementptr inbounds [3 x i8], ptr [[C_I]], i64 0, i64 1
; CHECK-NEXT:    [[ARRAYIDX5_I:%.*]] = getelementptr inbounds [3 x i8], ptr [[C_I]], i64 0, i64 2
; CHECK-NEXT:    br label [[AQCC_QUANTUM:%.*]]
; CHECK:       aqcc.quantum:
; CHECK-NEXT:    [[ARRAYIDX20:%.*]] = getelementptr inbounds [3 x i16], ptr @q, i64 0, i64 0
; CHECK-NEXT:    [[ARRAYIDX65:%.*]] = getelementptr inbounds [3 x i16], ptr @q, i64 0, i64 0
; CHECK-NEXT:    [[TMP0:%.*]] = load i16, ptr [[ARRAYIDX65]], align 2
; CHECK-NEXT:    call void @llvm.quantum.rotxy(i16 [[TMP0]], double 0x3FF921FB54442D18, double 0x4012D97C7F3321D2, i32 1)
; CHECK-NEXT:    [[ARRAYIDX64:%.*]] = getelementptr inbounds [3 x i16], ptr @q, i64 0, i64 0
; CHECK-NEXT:    [[TMP1:%.*]] = load i16, ptr [[ARRAYIDX64]], align 2
; CHECK-NEXT:    call void @llvm.quantum.prepz(i16 [[TMP1]], i32 0)
; CHECK-NEXT:    [[ARRAYIDX63:%.*]] = getelementptr inbounds [3 x i16], ptr @q, i64 0, i64 0
; CHECK-NEXT:    [[TMP2:%.*]] = load i16, ptr [[ARRAYIDX63]], align 2
; CHECK-NEXT:    call void @llvm.quantum.rotxy(i16 [[TMP2]], double 0x3FF921FB54442D18, double 0x3FF921FB54442D18, i32 0)
; CHECK-NEXT:    [[ARRAYIDX19:%.*]] = getelementptr inbounds [3 x i16], ptr @q, i64 0, i64 0
; CHECK-NEXT:    [[ARRAYIDX62:%.*]] = getelementptr inbounds [3 x i16], ptr @q, i64 0, i64 0
; CHECK-NEXT:    [[TMP3:%.*]] = load i16, ptr [[ARRAYIDX62]], align 2
; CHECK-NEXT:    call void @llvm.quantum.rotxy(i16 [[TMP3]], double 0x3FF921FB54442D18, double 0x4012D97C7F3321D2, i32 0)
; CHECK-NEXT:    [[ARRAYIDX61:%.*]] = getelementptr inbounds [3 x i16], ptr @q, i64 0, i64 0
; CHECK-NEXT:    [[TMP4:%.*]] = load i16, ptr [[ARRAYIDX61]], align 2
; CHECK-NEXT:    call void @llvm.quantum.prepz(i16 [[TMP4]], i32 0)
; CHECK-NEXT:    [[ARRAYIDX60:%.*]] = getelementptr inbounds [3 x i16], ptr @q, i64 0, i64 0
; CHECK-NEXT:    [[TMP5:%.*]] = load i16, ptr [[ARRAYIDX60]], align 2
; CHECK-NEXT:    call void @llvm.quantum.rotxy(i16 [[TMP5]], double 0x3FF921FB54442D18, double 0x3FF921FB54442D18, i32 0)
; CHECK-NEXT:    [[ARRAYIDX18:%.*]] = getelementptr inbounds [3 x i16], ptr @q, i64 0, i64 0
; CHECK-NEXT:    [[ARRAYIDX59:%.*]] = getelementptr inbounds [3 x i16], ptr @q, i64 0, i64 0
; CHECK-NEXT:    [[TMP6:%.*]] = load i16, ptr [[ARRAYIDX59]], align 2
; CHECK-NEXT:    call void @llvm.quantum.rotxy(i16 [[TMP6]], double 0x3FF921FB54442D18, double 0x4012D97C7F3321D2, i32 0)
; CHECK-NEXT:    [[ARRAYIDX58:%.*]] = getelementptr inbounds [3 x i16], ptr @q, i64 0, i64 0
; CHECK-NEXT:    [[TMP7:%.*]] = load i16, ptr [[ARRAYIDX58]], align 2
; CHECK-NEXT:    call void @llvm.quantum.prepz(i16 [[TMP7]], i32 0)
; CHECK-NEXT:    [[ARRAYIDX57:%.*]] = getelementptr inbounds [3 x i16], ptr @q, i64 0, i64 0
; CHECK-NEXT:    [[TMP8:%.*]] = load i16, ptr [[ARRAYIDX57]], align 2
; CHECK-NEXT:    call void @llvm.quantum.rotxy(i16 [[TMP8]], double 0x3FF921FB54442D18, double 0x3FF921FB54442D18, i32 0)
; CHECK-NEXT:    [[ARRAYIDX16:%.*]] = getelementptr inbounds [3 x i16], ptr @q, i64 0, i64 0
; CHECK-NEXT:    [[ARRAYIDX17:%.*]] = getelementptr inbounds [3 x i16], ptr @q, i64 0, i64 1
; CHECK-NEXT:    [[ARRAYIDX56:%.*]] = getelementptr inbounds [3 x i16], ptr @q, i64 0, i64 1
; CHECK-NEXT:    [[TMP9:%.*]] = load i16, ptr [[ARRAYIDX56]], align 2
; CHECK-NEXT:    call void @llvm.quantum.rotxy(i16 [[TMP9]], double 0x3FF921FB54442D18, double 0x4012D97C7F3321D2, i32 0)
; CHECK-NEXT:    [[ARRAYIDX54:%.*]] = getelementptr inbounds [3 x i16], ptr @q, i64 0, i64 0
; CHECK-NEXT:    [[TMP10:%.*]] = load i16, ptr [[ARRAYIDX54]], align 2
; CHECK-NEXT:    [[ARRAYIDX55:%.*]] = getelementptr inbounds [3 x i16], ptr @q, i64 0, i64 1
; CHECK-NEXT:    [[TMP11:%.*]] = load i16, ptr [[ARRAYIDX55]], align 2
; CHECK-NEXT:    call void @llvm.quantum.cphase(i16 [[TMP10]], i16 [[TMP11]], double 0x400921FB54442D18, i32 0)
; CHECK-NEXT:    [[ARRAYIDX53:%.*]] = getelementptr inbounds [3 x i16], ptr @q, i64 0, i64 1
; CHECK-NEXT:    [[TMP12:%.*]] = load i16, ptr [[ARRAYIDX53]], align 2
; CHECK-NEXT:    call void @llvm.quantum.rotxy(i16 [[TMP12]], double 0x3FF921FB54442D18, double 0x3FF921FB54442D18, i32 0)
; CHECK-NEXT:    [[ARRAYIDX15:%.*]] = getelementptr inbounds [3 x i16], ptr @q, i64 0, i64 1
; CHECK-NEXT:    [[ARRAYIDX52:%.*]] = getelementptr inbounds [3 x i16], ptr @q, i64 0, i64 1
; CHECK-NEXT:    [[TMP13:%.*]] = load i16, ptr [[ARRAYIDX52]], align 2
; CHECK-NEXT:    call void @llvm.quantum.rotz(i16 [[TMP13]], double [[COEF]], i32 0)
; CHECK-NEXT:    [[ARRAYIDX13:%.*]] = getelementptr inbounds [3 x i16], ptr @q, i64 0, i64 0
; CHECK-NEXT:    [[ARRAYIDX14:%.*]] = getelementptr inbounds [3 x i16], ptr @q, i64 0, i64 1
; CHECK-NEXT:    [[ARRAYIDX51:%.*]] = getelementptr inbounds [3 x i16], ptr @q, i64 0, i64 1
; CHECK-NEXT:    [[TMP14:%.*]] = load i16, ptr [[ARRAYIDX51]], align 2
; CHECK-NEXT:    call void @llvm.quantum.rotxy(i16 [[TMP14]], double 0x3FF921FB54442D18, double 0x4012D97C7F3321D2, i32 0)
; CHECK-NEXT:    [[ARRAYIDX49:%.*]] = getelementptr inbounds [3 x i16], ptr @q, i64 0, i64 0
; CHECK-NEXT:    [[TMP15:%.*]] = load i16, ptr [[ARRAYIDX49]], align 2
; CHECK-NEXT:    [[ARRAYIDX50:%.*]] = getelementptr inbounds [3 x i16], ptr @q, i64 0, i64 1
; CHECK-NEXT:    [[TMP16:%.*]] = load i16, ptr [[ARRAYIDX50]], align 2
; CHECK-NEXT:    call void @llvm.quantum.cphase(i16 [[TMP15]], i16 [[TMP16]], double 0x400921FB54442D18, i32 0)
; CHECK-NEXT:    [[ARRAYIDX48:%.*]] = getelementptr inbounds [3 x i16], ptr @q, i64 0, i64 1
; CHECK-NEXT:    [[TMP17:%.*]] = load i16, ptr [[ARRAYIDX48]], align 2
; CHECK-NEXT:    call void @llvm.quantum.rotxy(i16 [[TMP17]], double 0x3FF921FB54442D18, double 0x3FF921FB54442D18, i32 0)
; CHECK-NEXT:    [[ARRAYIDX11:%.*]] = getelementptr inbounds [3 x i16], ptr @q, i64 0, i64 1
; CHECK-NEXT:    [[ARRAYIDX12:%.*]] = getelementptr inbounds [3 x i16], ptr @q, i64 0, i64 2
; CHECK-NEXT:    [[ARRAYIDX47:%.*]] = getelementptr inbounds [3 x i16], ptr @q, i64 0, i64 2
; CHECK-NEXT:    [[TMP18:%.*]] = load i16, ptr [[ARRAYIDX47]], align 2
; CHECK-NEXT:    call void @llvm.quantum.rotxy(i16 [[TMP18]], double 0x3FF921FB54442D18, double 0x4012D97C7F3321D2, i32 0)
; CHECK-NEXT:    [[ARRAYIDX45:%.*]] = getelementptr inbounds [3 x i16], ptr @q, i64 0, i64 1
; CHECK-NEXT:    [[TMP19:%.*]] = load i16, ptr [[ARRAYIDX45]], align 2
; CHECK-NEXT:    [[ARRAYIDX46:%.*]] = getelementptr inbounds [3 x i16], ptr @q, i64 0, i64 2
; CHECK-NEXT:    [[TMP20:%.*]] = load i16, ptr [[ARRAYIDX46]], align 2
; CHECK-NEXT:    call void @llvm.quantum.cphase(i16 [[TMP19]], i16 [[TMP20]], double 0x400921FB54442D18, i32 0)
; CHECK-NEXT:    [[ARRAYIDX44:%.*]] = getelementptr inbounds [3 x i16], ptr @q, i64 0, i64 2
; CHECK-NEXT:    [[TMP21:%.*]] = load i16, ptr [[ARRAYIDX44]], align 2
; CHECK-NEXT:    call void @llvm.quantum.rotxy(i16 [[TMP21]], double 0x3FF921FB54442D18, double 0x3FF921FB54442D18, i32 0)
; CHECK-NEXT:    [[ARRAYIDX10:%.*]] = getelementptr inbounds [3 x i16], ptr @q, i64 0, i64 2
; CHECK-NEXT:    [[ARRAYIDX43:%.*]] = getelementptr inbounds [3 x i16], ptr @q, i64 0, i64 2
; CHECK-NEXT:    [[TMP22:%.*]] = load i16, ptr [[ARRAYIDX43]], align 2
; CHECK-NEXT:    call void @llvm.quantum.rotz(i16 [[TMP22]], double [[COEF]], i32 0)
; CHECK-NEXT:    [[ARRAYIDX8:%.*]] = getelementptr inbounds [3 x i16], ptr @q, i64 0, i64 1
; CHECK-NEXT:    [[ARRAYIDX9:%.*]] = getelementptr inbounds [3 x i16], ptr @q, i64 0, i64 2
; CHECK-NEXT:    [[ARRAYIDX42:%.*]] = getelementptr inbounds [3 x i16], ptr @q, i64 0, i64 2
; CHECK-NEXT:    [[TMP23:%.*]] = load i16, ptr [[ARRAYIDX42]], align 2
; CHECK-NEXT:    call void @llvm.quantum.rotxy(i16 [[TMP23]], double 0x3FF921FB54442D18, double 0x4012D97C7F3321D2, i32 0)
; CHECK-NEXT:    [[ARRAYIDX40:%.*]] = getelementptr inbounds [3 x i16], ptr @q, i64 0, i64 1
; CHECK-NEXT:    [[TMP24:%.*]] = load i16, ptr [[ARRAYIDX40]], align 2
; CHECK-NEXT:    [[ARRAYIDX41:%.*]] = getelementptr inbounds [3 x i16], ptr @q, i64 0, i64 2
; CHECK-NEXT:    [[TMP25:%.*]] = load i16, ptr [[ARRAYIDX41]], align 2
; CHECK-NEXT:    call void @llvm.quantum.cphase(i16 [[TMP24]], i16 [[TMP25]], double 0x400921FB54442D18, i32 0)
; CHECK-NEXT:    [[ARRAYIDX39:%.*]] = getelementptr inbounds [3 x i16], ptr @q, i64 0, i64 2
; CHECK-NEXT:    [[TMP26:%.*]] = load i16, ptr [[ARRAYIDX39]], align 2
; CHECK-NEXT:    call void @llvm.quantum.rotxy(i16 [[TMP26]], double 0x3FF921FB54442D18, double 0x3FF921FB54442D18, i32 0)
; CHECK-NEXT:    [[ARRAYIDX6:%.*]] = getelementptr inbounds [3 x i16], ptr @q, i64 0, i64 2
; CHECK-NEXT:    [[ARRAYIDX7:%.*]] = getelementptr inbounds [3 x i16], ptr @q, i64 0, i64 0
; CHECK-NEXT:    [[ARRAYIDX38:%.*]] = getelementptr inbounds [3 x i16], ptr @q, i64 0, i64 0
; CHECK-NEXT:    [[TMP27:%.*]] = load i16, ptr [[ARRAYIDX38]], align 2
; CHECK-NEXT:    call void @llvm.quantum.rotxy(i16 [[TMP27]], double 0x3FF921FB54442D18, double 0x4012D97C7F3321D2, i32 0)
; CHECK-NEXT:    [[ARRAYIDX36:%.*]] = getelementptr inbounds [3 x i16], ptr @q, i64 0, i64 2
; CHECK-NEXT:    [[TMP28:%.*]] = load i16, ptr [[ARRAYIDX36]], align 2
; CHECK-NEXT:    [[ARRAYIDX37:%.*]] = getelementptr inbounds [3 x i16], ptr @q, i64 0, i64 0
; CHECK-NEXT:    [[TMP29:%.*]] = load i16, ptr [[ARRAYIDX37]], align 2
; CHECK-NEXT:    call void @llvm.quantum.cphase(i16 [[TMP28]], i16 [[TMP29]], double 0x400921FB54442D18, i32 0)
; CHECK-NEXT:    [[ARRAYIDX35:%.*]] = getelementptr inbounds [3 x i16], ptr @q, i64 0, i64 0
; CHECK-NEXT:    [[TMP30:%.*]] = load i16, ptr [[ARRAYIDX35]], align 2
; CHECK-NEXT:    call void @llvm.quantum.rotxy(i16 [[TMP30]], double 0x3FF921FB54442D18, double 0x3FF921FB54442D18, i32 0)
; CHECK-NEXT:    [[ARRAYIDX5:%.*]] = getelementptr inbounds [3 x i16], ptr @q, i64 0, i64 0
; CHECK-NEXT:    [[ARRAYIDX34:%.*]] = getelementptr inbounds [3 x i16], ptr @q, i64 0, i64 0
; CHECK-NEXT:    [[TMP31:%.*]] = load i16, ptr [[ARRAYIDX34]], align 2
; CHECK-NEXT:    call void @llvm.quantum.rotz(i16 [[TMP31]], double [[COEF]], i32 0)
; CHECK-NEXT:    [[ARRAYIDX3:%.*]] = getelementptr inbounds [3 x i16], ptr @q, i64 0, i64 2
; CHECK-NEXT:    [[ARRAYIDX4:%.*]] = getelementptr inbounds [3 x i16], ptr @q, i64 0, i64 0
; CHECK-NEXT:    [[ARRAYIDX33:%.*]] = getelementptr inbounds [3 x i16], ptr @q, i64 0, i64 0
; CHECK-NEXT:    [[TMP32:%.*]] = load i16, ptr [[ARRAYIDX33]], align 2
; CHECK-NEXT:    call void @llvm.quantum.rotxy(i16 [[TMP32]], double 0x3FF921FB54442D18, double 0x4012D97C7F3321D2, i32 0)
; CHECK-NEXT:    [[ARRAYIDX31:%.*]] = getelementptr inbounds [3 x i16], ptr @q, i64 0, i64 2
; CHECK-NEXT:    [[TMP33:%.*]] = load i16, ptr [[ARRAYIDX31]], align 2
; CHECK-NEXT:    [[ARRAYIDX32:%.*]] = getelementptr inbounds [3 x i16], ptr @q, i64 0, i64 0
; CHECK-NEXT:    [[TMP34:%.*]] = load i16, ptr [[ARRAYIDX32]], align 2
; CHECK-NEXT:    call void @llvm.quantum.cphase(i16 [[TMP33]], i16 [[TMP34]], double 0x400921FB54442D18, i32 0)
; CHECK-NEXT:    [[ARRAYIDX30:%.*]] = getelementptr inbounds [3 x i16], ptr @q, i64 0, i64 0
; CHECK-NEXT:    [[TMP35:%.*]] = load i16, ptr [[ARRAYIDX30]], align 2
; CHECK-NEXT:    call void @llvm.quantum.rotxy(i16 [[TMP35]], double 0x3FF921FB54442D18, double 0x3FF921FB54442D18, i32 0)
; CHECK-NEXT:    [[ARRAYIDX2:%.*]] = getelementptr inbounds [3 x i16], ptr @q, i64 0, i64 0
; CHECK-NEXT:    [[ARRAYIDX29:%.*]] = getelementptr inbounds [3 x i16], ptr @q, i64 0, i64 0
; CHECK-NEXT:    [[TMP36:%.*]] = load i16, ptr [[ARRAYIDX29]], align 2
; CHECK-NEXT:    call void @llvm.quantum.rotxy(i16 [[TMP36]], double 0x3FF921FB54442D18, double 0x4012D97C7F3321D2, i32 0)
; CHECK-NEXT:    [[ARRAYIDX28:%.*]] = getelementptr inbounds [3 x i16], ptr @q, i64 0, i64 0
; CHECK-NEXT:    [[TMP37:%.*]] = load i16, ptr [[ARRAYIDX28]], align 2
; CHECK-NEXT:    call void @llvm.quantum.measz(i16 [[TMP37]], ptr [[C_I]], i1 false, i32 0)
; CHECK-NEXT:    [[ARRAYIDX27:%.*]] = getelementptr inbounds [3 x i16], ptr @q, i64 0, i64 0
; CHECK-NEXT:    [[TMP38:%.*]] = load i16, ptr [[ARRAYIDX27]], align 2
; CHECK-NEXT:    call void @llvm.quantum.rotxy(i16 [[TMP38]], double 0x3FF921FB54442D18, double 0x3FF921FB54442D18, i32 0)
; CHECK-NEXT:    [[ARRAYIDX1:%.*]] = getelementptr inbounds [3 x i16], ptr @q, i64 0, i64 1
; CHECK-NEXT:    [[ARRAYIDX26:%.*]] = getelementptr inbounds [3 x i16], ptr @q, i64 0, i64 1
; CHECK-NEXT:    [[TMP39:%.*]] = load i16, ptr [[ARRAYIDX26]], align 2
; CHECK-NEXT:    call void @llvm.quantum.rotxy(i16 [[TMP39]], double 0x3FF921FB54442D18, double 0x4012D97C7F3321D2, i32 0)
; CHECK-NEXT:    [[ARRAYIDX25:%.*]] = getelementptr inbounds [3 x i16], ptr @q, i64 0, i64 1
; CHECK-NEXT:    [[TMP40:%.*]] = load i16, ptr [[ARRAYIDX25]], align 2
; CHECK-NEXT:    call void @llvm.quantum.measz(i16 [[TMP40]], ptr [[ARRAYIDX3_I]], i1 false, i32 0)
; CHECK-NEXT:    [[ARRAYIDX24:%.*]] = getelementptr inbounds [3 x i16], ptr @q, i64 0, i64 1
; CHECK-NEXT:    [[TMP41:%.*]] = load i16, ptr [[ARRAYIDX24]], align 2
; CHECK-NEXT:    call void @llvm.quantum.rotxy(i16 [[TMP41]], double 0x3FF921FB54442D18, double 0x3FF921FB54442D18, i32 0)
; CHECK-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds [3 x i16], ptr @q, i64 0, i64 2
; CHECK-NEXT:    [[ARRAYIDX23:%.*]] = getelementptr inbounds [3 x i16], ptr @q, i64 0, i64 2
; CHECK-NEXT:    [[TMP42:%.*]] = load i16, ptr [[ARRAYIDX23]], align 2
; CHECK-NEXT:    call void @llvm.quantum.rotxy(i16 [[TMP42]], double 0x3FF921FB54442D18, double 0x4012D97C7F3321D2, i32 0)
; CHECK-NEXT:    [[ARRAYIDX22:%.*]] = getelementptr inbounds [3 x i16], ptr @q, i64 0, i64 2
; CHECK-NEXT:    [[TMP43:%.*]] = load i16, ptr [[ARRAYIDX22]], align 2
; CHECK-NEXT:    call void @llvm.quantum.measz(i16 [[TMP43]], ptr [[ARRAYIDX5_I]], i1 false, i32 0)
; CHECK-NEXT:    [[ARRAYIDX21:%.*]] = getelementptr inbounds [3 x i16], ptr @q, i64 0, i64 2
; CHECK-NEXT:    [[TMP44:%.*]] = load i16, ptr [[ARRAYIDX21]], align 2
; CHECK-NEXT:    call void @llvm.quantum.rotxy(i16 [[TMP44]], double 0x3FF921FB54442D18, double 0x3FF921FB54442D18, i32 2)
; CHECK-NEXT:    br label [[AQCC_MEAS_MOVE_END:%.*]]
; CHECK:       aqcc.meas.move.end:
; CHECK-NEXT:    [[TMP45:%.*]] = load i8, ptr [[C_I]], align 1, !tbaa [[TBAA0:![0-9]+]], !range [[RNG4:![0-9]+]], !noundef !5
; CHECK-NEXT:    [[TOBOOL_I:%.*]] = icmp ne i8 [[TMP45]], 0
; CHECK-NEXT:    [[CONV_I:%.*]] = uitofp i1 [[TOBOOL_I]] to double
; CHECK-NEXT:    [[TMP46:%.*]] = load i8, ptr [[ARRAYIDX3_I]], align 1, !tbaa [[TBAA0]], !range [[RNG4]], !noundef !5
; CHECK-NEXT:    [[TOBOOL8_I:%.*]] = icmp ne i8 [[TMP46]], 0
; CHECK-NEXT:    [[CONV9_I:%.*]] = uitofp i1 [[TOBOOL8_I]] to double
; CHECK-NEXT:    [[ADD_I:%.*]] = fadd double [[CONV_I]], [[CONV9_I]]
; CHECK-NEXT:    [[TMP47:%.*]] = load i8, ptr [[ARRAYIDX5_I]], align 1, !tbaa [[TBAA0]], !range [[RNG4]], !noundef !5
; CHECK-NEXT:    [[TOBOOL11_I:%.*]] = icmp ne i8 [[TMP47]], 0
; CHECK-NEXT:    [[CONV12_I:%.*]] = uitofp i1 [[TOBOOL11_I]] to double
; CHECK-NEXT:    [[ADD13_I:%.*]] = fadd double [[ADD_I]], [[CONV12_I]]
; CHECK-NEXT:    store double [[ADD13_I]], ptr [[E]], align 8, !tbaa [[TBAA6:![0-9]+]]
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 noundef 3, ptr noundef nonnull [[C_I]]) #[[ATTR5]]
; CHECK-NEXT:    ret void
;
entry:
  %c.i = alloca [3 x i8], align 1
  call void @llvm.lifetime.start.p0(i64 noundef 3, ptr noundef nonnull dereferenceable(3) %c.i) #5
  %arrayidx3.i = getelementptr inbounds [3 x i8], ptr %c.i, i64 0, i64 1
  %arrayidx5.i = getelementptr inbounds [3 x i8], ptr %c.i, i64 0, i64 2
  br label %aqcc.quantum

aqcc.quantum:                                     ; preds = %entry
  %arrayidx20 = getelementptr inbounds [3 x i16], ptr @q, i64 0, i64 0
  call void @_Z5PrepXRt(ptr %arrayidx20)
  %arrayidx19 = getelementptr inbounds [3 x i16], ptr @q, i64 0, i64 0
  call void @_Z5PrepXRt(ptr %arrayidx19)
  %arrayidx18 = getelementptr inbounds [3 x i16], ptr @q, i64 0, i64 0
  call void @_Z5PrepXRt(ptr %arrayidx18)
  %arrayidx16 = getelementptr inbounds [3 x i16], ptr @q, i64 0, i64 0
  %arrayidx17 = getelementptr inbounds [3 x i16], ptr @q, i64 0, i64 1
  call void @_Z4CNOTRtS_(ptr %arrayidx16, ptr %arrayidx17)
  %arrayidx15 = getelementptr inbounds [3 x i16], ptr @q, i64 0, i64 1
  call void @_Z2RZRtd(ptr %arrayidx15, double %coef)
  %arrayidx13 = getelementptr inbounds [3 x i16], ptr @q, i64 0, i64 0
  %arrayidx14 = getelementptr inbounds [3 x i16], ptr @q, i64 0, i64 1
  call void @_Z4CNOTRtS_(ptr %arrayidx13, ptr %arrayidx14)
  %arrayidx11 = getelementptr inbounds [3 x i16], ptr @q, i64 0, i64 1
  %arrayidx12 = getelementptr inbounds [3 x i16], ptr @q, i64 0, i64 2
  call void @_Z4CNOTRtS_(ptr %arrayidx11, ptr %arrayidx12)
  %arrayidx10 = getelementptr inbounds [3 x i16], ptr @q, i64 0, i64 2
  call void @_Z2RZRtd(ptr %arrayidx10, double %coef)
  %arrayidx8 = getelementptr inbounds [3 x i16], ptr @q, i64 0, i64 1
  %arrayidx9 = getelementptr inbounds [3 x i16], ptr @q, i64 0, i64 2
  call void @_Z4CNOTRtS_(ptr %arrayidx8, ptr %arrayidx9)
  %arrayidx6 = getelementptr inbounds [3 x i16], ptr @q, i64 0, i64 2
  %arrayidx7 = getelementptr inbounds [3 x i16], ptr @q, i64 0, i64 0
  call void @_Z4CNOTRtS_(ptr %arrayidx6, ptr %arrayidx7)
  %arrayidx5 = getelementptr inbounds [3 x i16], ptr @q, i64 0, i64 0
  call void @_Z2RZRtd(ptr %arrayidx5, double %coef)
  %arrayidx3 = getelementptr inbounds [3 x i16], ptr @q, i64 0, i64 2
  %arrayidx4 = getelementptr inbounds [3 x i16], ptr @q, i64 0, i64 0
  call void @_Z4CNOTRtS_(ptr %arrayidx3, ptr %arrayidx4)
  %arrayidx2 = getelementptr inbounds [3 x i16], ptr @q, i64 0, i64 0
  call void @_Z5MeasXRtRbb(ptr %arrayidx2, ptr %c.i, i1 false)
  %arrayidx1 = getelementptr inbounds [3 x i16], ptr @q, i64 0, i64 1
  call void @_Z5MeasXRtRbb(ptr %arrayidx1, ptr %arrayidx3.i, i1 false)
  %arrayidx = getelementptr inbounds [3 x i16], ptr @q, i64 0, i64 2
  call void @_Z5MeasXRtRbb(ptr %arrayidx, ptr %arrayidx5.i, i1 false)
  br label %aqcc.meas.move.end

aqcc.meas.move.end:                               ; preds = %aqcc.quantum
  %0 = load i8, ptr %c.i, align 1, !tbaa !0, !range !4, !noundef !5
  %tobool.i = icmp ne i8 %0, 0
  %conv.i = uitofp i1 %tobool.i to double
  %1 = load i8, ptr %arrayidx3.i, align 1, !tbaa !0, !range !4, !noundef !5
  %tobool8.i = icmp ne i8 %1, 0
  %conv9.i = uitofp i1 %tobool8.i to double
  %add.i = fadd double %conv.i, %conv9.i
  %2 = load i8, ptr %arrayidx5.i, align 1, !tbaa !0, !range !4, !noundef !5
  %tobool11.i = icmp ne i8 %2, 0
  %conv12.i = uitofp i1 %tobool11.i to double
  %add13.i = fadd double %add.i, %conv12.i
  store double %add13.i, ptr %E, align 8, !tbaa !6
  call void @llvm.lifetime.end.p0(i64 noundef 3, ptr noundef nonnull %c.i) #5
  ret void
}

; Function Attrs: mustprogress uwtable
define dso_local noundef double @_Z8minimizev() local_unnamed_addr #2 {
; CHECK-LABEL: define dso_local noundef double @_Z8minimizev
; CHECK-SAME: () local_unnamed_addr #[[ATTR2:[0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[E:%.*]] = alloca double, align 8
; CHECK-NEXT:    [[COEF:%.*]] = alloca double, align 8
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 noundef 8, ptr noundef nonnull align 8 dereferenceable(8) [[E]]) #[[ATTR5]]
; CHECK-NEXT:    store double 0.000000e+00, ptr [[E]], align 8, !tbaa [[TBAA6]]
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 noundef 8, ptr noundef nonnull align 8 [[COEF]]) #[[ATTR5]]
; CHECK-NEXT:    store double 1.000000e-01, ptr [[COEF]], align 8, !tbaa [[TBAA6]]
; CHECK-NEXT:    [[CALL1:%.*]] = call noundef zeroext i1 @_Z13min_classicalRdS_(ptr noundef nonnull align 8 dereferenceable(8) [[COEF]], ptr noundef nonnull align 8 dereferenceable(8) [[E]])
; CHECK-NEXT:    br i1 [[CALL1]], label [[WHILE_BODY:%.*]], label [[WHILE_END:%.*]]
; CHECK:       while.body:
; CHECK-NEXT:    [[TMP0:%.*]] = load double, ptr [[COEF]], align 8, !tbaa [[TBAA6]]
; CHECK-NEXT:    call void @_Z7computedRd.stub(double noundef [[TMP0]], ptr nocapture nofree noundef nonnull writeonly align 8 dereferenceable(8) [[E]]) #[[ATTR5]]
; CHECK-NEXT:    [[CALL:%.*]] = call noundef zeroext i1 @_Z13min_classicalRdS_(ptr noundef nonnull align 8 dereferenceable(8) [[COEF]], ptr noundef nonnull align 8 dereferenceable(8) [[E]])
; CHECK-NEXT:    br i1 [[CALL]], label [[WHILE_BODY]], label [[WHILE_END]], !llvm.loop [[LOOP8:![0-9]+]]
; CHECK:       while.end:
; CHECK-NEXT:    [[TMP1:%.*]] = load double, ptr [[E]], align 8, !tbaa [[TBAA6]]
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 noundef 8, ptr noundef nonnull [[COEF]]) #[[ATTR5]]
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 noundef 8, ptr noundef nonnull align 8 dereferenceable(8) [[E]]) #[[ATTR5]]
; CHECK-NEXT:    ret double [[TMP1]]
;
entry:
  %E = alloca double, align 8
  %coef = alloca double, align 8
  call void @llvm.lifetime.start.p0(i64 noundef 8, ptr noundef nonnull align 8 dereferenceable(8) %E) #5
  store double 0.000000e+00, ptr %E, align 8, !tbaa !6
  call void @llvm.lifetime.start.p0(i64 noundef 8, ptr noundef nonnull align 8 %coef) #5
  store double 1.000000e-01, ptr %coef, align 8, !tbaa !6
  %call1 = call noundef zeroext i1 @_Z13min_classicalRdS_(ptr noundef nonnull align 8 dereferenceable(8) %coef, ptr noundef nonnull align 8 dereferenceable(8) %E)
  br i1 %call1, label %while.body, label %while.end

while.body:                                       ; preds = %while.body, %entry
  %0 = load double, ptr %coef, align 8, !tbaa !6
  call void @_Z7computedRd.stub(double noundef %0, ptr nocapture nofree noundef nonnull writeonly align 8 dereferenceable(8) %E) #5
  %call = call noundef zeroext i1 @_Z13min_classicalRdS_(ptr noundef nonnull align 8 dereferenceable(8) %coef, ptr noundef nonnull align 8 dereferenceable(8) %E)
  br i1 %call, label %while.body, label %while.end, !llvm.loop !8

while.end:                                        ; preds = %while.body, %entry
  %1 = load double, ptr %E, align 8, !tbaa !6
  call void @llvm.lifetime.end.p0(i64 noundef 8, ptr noundef nonnull %coef) #5
  call void @llvm.lifetime.end.p0(i64 noundef 8, ptr noundef nonnull align 8 dereferenceable(8) %E) #5
  ret double %1
}

declare noundef zeroext i1 @_Z13min_classicalRdS_(ptr noundef nonnull align 8 dereferenceable(8), ptr noundef nonnull align 8 dereferenceable(8)) local_unnamed_addr #3

; Function Attrs: mustprogress norecurse uwtable
define dso_local noundef i32 @main() local_unnamed_addr #4 {
; CHECK-LABEL: define dso_local noundef i32 @main
; CHECK-SAME: () local_unnamed_addr #[[ATTR4:[0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[E_I:%.*]] = alloca double, align 8
; CHECK-NEXT:    [[COEF_I:%.*]] = alloca double, align 8
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 noundef 8, ptr noundef nonnull align 8 dereferenceable(8) [[E_I]]) #[[ATTR5]]
; CHECK-NEXT:    store double 0.000000e+00, ptr [[E_I]], align 8, !tbaa [[TBAA6]]
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 noundef 8, ptr noundef nonnull align 8 [[COEF_I]]) #[[ATTR5]]
; CHECK-NEXT:    store double 1.000000e-01, ptr [[COEF_I]], align 8, !tbaa [[TBAA6]]
; CHECK-NEXT:    [[CALL1_I:%.*]] = call noundef zeroext i1 @_Z13min_classicalRdS_(ptr noundef nonnull align 8 dereferenceable(8) [[COEF_I]], ptr noundef nonnull align 8 dereferenceable(8) [[E_I]])
; CHECK-NEXT:    br i1 [[CALL1_I]], label [[WHILE_BODY_I:%.*]], label [[_Z8MINIMIZEV_EXIT:%.*]]
; CHECK:       while.body.i:
; CHECK-NEXT:    [[TMP0:%.*]] = load double, ptr [[COEF_I]], align 8, !tbaa [[TBAA6]]
; CHECK-NEXT:    call void @_Z7computedRd.stub(double noundef [[TMP0]], ptr nocapture nofree noundef nonnull writeonly align 8 dereferenceable(8) [[E_I]]) #[[ATTR5]]
; CHECK-NEXT:    [[CALL_I:%.*]] = call noundef zeroext i1 @_Z13min_classicalRdS_(ptr noundef nonnull align 8 dereferenceable(8) [[COEF_I]], ptr noundef nonnull align 8 dereferenceable(8) [[E_I]])
; CHECK-NEXT:    br i1 [[CALL_I]], label [[WHILE_BODY_I]], label [[_Z8MINIMIZEV_EXIT]], !llvm.loop [[LOOP8]]
; CHECK:       _Z8minimizev.exit:
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 noundef 8, ptr noundef nonnull [[COEF_I]]) #[[ATTR5]]
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 noundef 8, ptr noundef nonnull align 8 dereferenceable(8) [[E_I]]) #[[ATTR5]]
; CHECK-NEXT:    ret i32 0
;
entry:
  %E.i = alloca double, align 8
  %coef.i = alloca double, align 8
  call void @llvm.lifetime.start.p0(i64 noundef 8, ptr noundef nonnull align 8 dereferenceable(8) %E.i) #5
  store double 0.000000e+00, ptr %E.i, align 8, !tbaa !6
  call void @llvm.lifetime.start.p0(i64 noundef 8, ptr noundef nonnull align 8 %coef.i) #5
  store double 1.000000e-01, ptr %coef.i, align 8, !tbaa !6
  %call1.i = call noundef zeroext i1 @_Z13min_classicalRdS_(ptr noundef nonnull align 8 dereferenceable(8) %coef.i, ptr noundef nonnull align 8 dereferenceable(8) %E.i)
  br i1 %call1.i, label %while.body.i, label %_Z8minimizev.exit

while.body.i:                                     ; preds = %while.body.i, %entry
  %0 = load double, ptr %coef.i, align 8, !tbaa !6
  call void @_Z7computedRd.stub(double noundef %0, ptr nocapture nofree noundef nonnull writeonly align 8 dereferenceable(8) %E.i) #5
  %call.i = call noundef zeroext i1 @_Z13min_classicalRdS_(ptr noundef nonnull align 8 dereferenceable(8) %coef.i, ptr noundef nonnull align 8 dereferenceable(8) %E.i)
  br i1 %call.i, label %while.body.i, label %_Z8minimizev.exit, !llvm.loop !8

_Z8minimizev.exit:                                ; preds = %while.body.i, %entry
  call void @llvm.lifetime.end.p0(i64 noundef 8, ptr noundef nonnull %coef.i) #5
  call void @llvm.lifetime.end.p0(i64 noundef 8, ptr noundef nonnull align 8 dereferenceable(8) %E.i) #5
  ret i32 0
}

; Function Attrs: nounwind
declare void @llvm.quantum.qubit(ptr) #5

; Function Attrs: nounwind
declare void @llvm.quantum.param(double) #5

; Function Attrs: nounwind
declare void @llvm.quantum.cbit(ptr) #5

declare i32 @_ZN4qrt021initializeQrtSystem64EPdPcS1_(ptr, ptr, ptr)

declare i1 @_ZN4qrt013isInitializedEv()

declare void @_ZN4qrt020updateMeasurementMapEPbmb(ptr, i64, i1)

declare i32 @_ZN4qrt014scheduleKernelEPFvvEj(ptr, i32)

declare i32 @_ZN4qrt018dismantleQrtSystemEv()

attributes #0 = { mustprogress noinline nounwind uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }
attributes #2 = { mustprogress uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { mustprogress norecurse uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { nounwind }

!0 = !{!1, !1, i64 0}
!1 = !{!"bool", !2, i64 0}
!2 = !{!"omnipotent char", !3, i64 0}
!3 = !{!"Simple C++ TBAA"}
!4 = !{i8 0, i8 2}
!5 = !{}
!6 = !{!7, !7, i64 0}
!7 = !{!"double", !2, i64 0}
!8 = distinct !{!8, !9, !10}
!9 = !{!"llvm.loop.mustprogress"}
!10 = !{!"llvm.loop.unroll.disable"}
