; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 3
; RUN: opt -S %loadintelquantumpasses -p="q-annotations-to-json,spin-native-annotate,q-loop-unroll"  -o - %s | FileCheck %s --dump-input fail
; ModuleID = 'test.ll'
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"struct.qexpr::Converter" = type { i8 }

$_ZNK5qexpr9ConverterIXadL_Z7PrepAllvEEE7convertEv = comdat any

@.str = private unnamed_addr constant [325 x i8] c"{     \22matrix_real\22 : \221/sqrt(2)*[1, 1, 1, -1]\22,     \22matrix_imag\22 : [0, 0, 0, 0],     \22matrix_order\22 : \22rm\22,     \22is_hermitian\22 : true,     \22is_unitary\22 : true,     \22is_mutable\22 : true,     \22qubit_list\22 : [0],     \22parametric_list\22 : [],     \22control_qubit_list\22 : [],     \22local_basis_list\22 : [4],     \22identifier\22 : 3   }\00", section "llvm.metadata"
@.str.1 = private unnamed_addr constant [37 x i8] c"include/clang/Quantum/quintrinsics.h\00", section "llvm.metadata"
@.str.2 = private unnamed_addr constant [313 x i8] c"{     \22matrix_real\22 : [0, 1, 1, 0],     \22matrix_imag\22 : [0, 0, 0, 0],     \22matrix_order\22 : \22rm\22,     \22is_hermitian\22 : true,     \22is_unitary\22 : true,     \22is_mutable\22 : true,     \22qubit_list\22 : [0],     \22parametric_list\22 : [],     \22control_qubit_list\22 : [],     \22local_basis_list\22 : [1],     \22identifier\22 : 12   }\00", section "llvm.metadata"
@.str.3 = private unnamed_addr constant [314 x i8] c"{     \22matrix_real\22 : [0, 0, 0, 0],     \22matrix_imag\22 : [0, -1, 1, 0],     \22matrix_order\22 : \22rm\22,     \22is_hermitian\22 : true,     \22is_unitary\22 : true,     \22is_mutable\22 : true,     \22qubit_list\22 : [0],     \22parametric_list\22 : [],     \22control_qubit_list\22 : [],     \22local_basis_list\22 : [2],     \22identifier\22 : 18   }\00", section "llvm.metadata"
@.str.4 = private unnamed_addr constant [313 x i8] c"{     \22matrix_real\22 : [1, 0, 0, -1],     \22matrix_imag\22 : [0, 0, 0, 0],     \22matrix_order\22 : \22rm\22,     \22is_hermitian\22 : true,     \22is_unitary\22 : true,     \22is_mutable\22 : true,     \22qubit_list\22 : [0],     \22parametric_list\22 : [],     \22control_qubit_list\22 : [],     \22local_basis_list\22 : [3],     \22identifier\22 : 6   }\00", section "llvm.metadata"
@.str.5 = private unnamed_addr constant [313 x i8] c"{     \22matrix_real\22 : [1, 0, 0, 0],     \22matrix_imag\22 : [0, 0, 0, 1],     \22matrix_order\22 : \22rm\22,     \22is_hermitian\22 : false,     \22is_unitary\22 : true,     \22is_mutable\22 : true,     \22qubit_list\22 : [0],     \22parametric_list\22 : [],     \22control_qubit_list\22 : [],     \22local_basis_list\22 : [3],     \22identifier\22 : 5   }\00", section "llvm.metadata"
@.str.6 = private unnamed_addr constant [315 x i8] c"{     \22matrix_real\22 : [1, 0, 0, 0],     \22matrix_imag\22 : [0, 0, 0, -1],     \22matrix_order\22 : \22rm\22,     \22is_hermitian\22 : false,     \22is_unitary\22 : true,     \22is_mutable\22 : true,     \22qubit_list\22 : [0],     \22parametric_list\22 : [],     \22control_qubit_list\22 : [],     \22local_basis_list\22 : [3],     \22identifier\22 : 11   }\00", section "llvm.metadata"
@.str.7 = private unnamed_addr constant [334 x i8] c"{     \22matrix_real\22 : \22[1, 0, 0, cos(pi/4)]\22,     \22matrix_imag\22 : \22[0, 0, 0, sin(pi/4)]\22,     \22matrix_order\22 : \22rm\22,     \22is_hermitian\22 : false,     \22is_unitary\22 : true,     \22is_mutable\22 : true,     \22qubit_list\22 : [0],     \22parametric_list\22 : [],     \22control_qubit_list\22 : [],     \22local_basis_list\22 : [3],     \22identifier\22 : 24   }\00", section "llvm.metadata"
@.str.8 = private unnamed_addr constant [335 x i8] c"{     \22matrix_real\22 : \22[1, 0, 0, cos(pi/4)]\22,     \22matrix_imag\22 : \22[0, 0, 0, -sin(pi/4)]\22,     \22matrix_order\22 : \22rm\22,     \22is_hermitian\22 : false,     \22is_unitary\22 : true,     \22is_mutable\22 : true,     \22qubit_list\22 : [0],     \22parametric_list\22 : [],     \22control_qubit_list\22 : [],     \22local_basis_list\22 : [3],     \22identifier\22 : 25   }\00", section "llvm.metadata"
@.str.9 = private unnamed_addr constant [364 x i8] c"{     \22matrix_real\22 : \22[cos(angle/2), 0, 0, cos(angle/2)]\22,     \22matrix_imag\22 : \22[0, -sin(angle/2), sin(angle/2), 0]\22,     \22matrix_order\22 : \22rm\22,     \22is_hermitian\22 : false,     \22is_unitary\22 : true,     \22is_mutable\22 : true,     \22qubit_list\22 : [0],     \22parametric_list\22 : [1],     \22control_qubit_list\22 : [],     \22local_basis_list\22 : [1],     \22identifier\22 : 26   }\00", section "llvm.metadata"
@.str.10 = private unnamed_addr constant [362 x i8] c"{     \22matrix_real\22 : \22[cos(angle/2), -sin(angle/2), sin(angle/2), cos(angle/2)]\22,     \22matrix_imag\22 : [0, 0, 0, 0],     \22matrix_order\22 : \22rm\22,     \22is_hermitian\22 : false,     \22is_unitary\22 : true,     \22is_mutable\22 : true,     \22qubit_list\22 : [0],     \22parametric_list\22 : [1],     \22control_qubit_list\22 : [],     \22local_basis_list\22 : [2],     \22identifier\22 : 27   }\00", section "llvm.metadata"
@.str.11 = private unnamed_addr constant [364 x i8] c"{     \22matrix_real\22 : \22[cos(angle/2), 0, 0, cos(angle/2)]\22,     \22matrix_imag\22 : \22[-sin(angle/2), 0, 0, sin(angle/2)]\22,     \22matrix_order\22 : \22rm\22,     \22is_hermitian\22 : false,     \22is_unitary\22 : true,     \22is_mutable\22 : true,     \22qubit_list\22 : [0],     \22parametric_list\22 : [1],     \22control_qubit_list\22 : [],     \22local_basis_list\22 : [3],     \22identifier\22 : 28   }\00", section "llvm.metadata"
@.str.12 = private unnamed_addr constant [396 x i8] c"{     \22matrix_real\22 : [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, -1],     \22matrix_imag\22 : [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     \22matrix_order\22 : \22rm\22,     \22is_hermitian\22 : true,     \22is_unitary\22 : true,     \22is_mutable\22 : true,     \22qubit_list\22 : [0, 1],     \22parametric_list\22 : [],     \22control_qubit_list\22 : [0, 1],     \22local_basis_list\22 : [3, 3],     \22identifier\22 : 37   }\00", section "llvm.metadata"
@.str.13 = private unnamed_addr constant [392 x i8] c"{     \22matrix_real\22 : [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0],     \22matrix_imag\22 : [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     \22matrix_order\22 : \22rm\22,     \22is_hermitian\22 : true,     \22is_unitary\22 : true,     \22is_mutable\22 : true,     \22qubit_list\22 : [0, 1],     \22parametric_list\22 : [],     \22control_qubit_list\22 : [0],     \22local_basis_list\22 : [3, 1],     \22identifier\22 : 35   }\00", section "llvm.metadata"
@.str.14 = private unnamed_addr constant [391 x i8] c"{     \22matrix_real\22 : [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1],     \22matrix_imag\22 : [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     \22matrix_order\22 : \22rm\22,     \22is_hermitian\22 : true,     \22is_unitary\22 : true,     \22is_mutable\22 : true,     \22qubit_list\22 : [0, 1],     \22parametric_list\22 : [],     \22control_qubit_list\22 : [],     \22local_basis_list\22 : [0, 0],     \22identifier\22 : 38   }\00", section "llvm.metadata"
@.str.15 = private unnamed_addr constant [689 x i8] c"{     \22matrix_real\22 : [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0],     \22matrix_imag\22 : [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],     \22matrix_order\22 : \22rm\22,     \22is_hermitian\22 : true,     \22is_unitary\22 : true,     \22is_mutable\22 : true,     \22qubit_list\22 : [0, 1, 2],     \22parametric_list\22 : [],     \22control_qubit_list\22 : [0, 1],     \22local_basis_list\22 : [3, 3, 1],     \22identifier\22 : 39   }\00", section "llvm.metadata"
@.str.16 = private unnamed_addr constant [417 x i8] c"{     \22matrix_real\22 : \22{qt(prob0) : [0.5, 0.5, 0.5, 0.5], qt(prob1) : [0.5, -0.5, 0.5, -0.5]}\22,     \22matrix_imag\22 : \22{qt(prob0) : [0, 0, 0, 0], qt(prob1) : [0, 0, 0, 0]}\22,     \22matrix_order\22 : \22rm\22,     \22is_hermitian\22 : false,     \22is_unitary\22 : false,     \22is_mutable\22 : true,     \22qubit_list\22 : [0],     \22parametric_list\22 : [],     \22control_qubit_list\22 : [],     \22local_basis_list\22 : [1],     \22identifier\22 : 40   }\00", section "llvm.metadata"
@.str.17 = private unnamed_addr constant [417 x i8] c"{     \22matrix_real\22 : \22{qt(prob0) : [0.5, 0, 0, 0.5], qt(prob1) : [0.5, 0, 0, -0.5]}\22,     \22matrix_imag\22 : \22{qt(prob0) : [0, 0.5, -0.5, 0], qt(prob1) : [0, 0.5, 0.5, 0]}\22,     \22matrix_order\22 : \22rm\22,     \22is_hermitian\22 : false,     \22is_unitary\22 : false,     \22is_mutable\22 : true,     \22qubit_list\22 : [0],     \22parametric_list\22 : [],     \22control_qubit_list\22 : [],     \22local_basis_list\22 : [2],     \22identifier\22 : 41   }\00", section "llvm.metadata"
@.str.18 = private unnamed_addr constant [399 x i8] c"{     \22matrix_real\22 : \22{qt(prob0) : [1, 0, 0, 0], qt(prob1) : [0, 1, 0, 0]}\22,     \22matrix_imag\22 : \22{qt(prob0) : [0, 0, 0, 0], qt(prob1) : [0, 0, 0, 0]}\22,     \22matrix_order\22 : \22rm\22,     \22is_hermitian\22 : false,     \22is_unitary\22 : false,     \22is_mutable\22 : true,     \22qubit_list\22 : [0],     \22parametric_list\22 : [],     \22control_qubit_list\22 : [],     \22local_basis_list\22 : [3],     \22identifier\22 : 42   }\00", section "llvm.metadata"
@.str.19 = private unnamed_addr constant [421 x i8] c"{     \22matrix_real\22 : \22{qt(prob0) : [0.5, 0.5, 0.5, 0.5], qt(prob1) : [0.5, -0.5, -0.5, 0.5]}\22,     \22matrix_imag\22 : \22{qt(prob0) : [0, 0, 0, 0], qt(prob1) : [0, 0, 0, 0]}\22,     \22matrix_order\22 : \22rm\22,     \22is_hermitian\22 : false,     \22is_unitary\22 : false,     \22is_mutable\22 : true,     \22qubit_list\22 : [0],     \22parametric_list\22 : [1, 2],     \22control_qubit_list\22 : [],     \22local_basis_list\22 : [1],     \22identifier\22 : 43   }\00", section "llvm.metadata"
@.str.20 = private unnamed_addr constant [421 x i8] c"{     \22matrix_real\22 : \22{qt(prob0) : [0.5, 0, 0, 0.5], qt(prob1) : [0.5, 0, 0, 0.5]}\22,     \22matrix_imag\22 : \22{qt(prob0) : [0, 0.5, -0.5, 0], qt(prob1) : [0, -0.5, 0.5, 0]}\22,     \22matrix_order\22 : \22rm\22,     \22is_hermitian\22 : false,     \22is_unitary\22 : false,     \22is_mutable\22 : true,     \22qubit_list\22 : [0],     \22parametric_list\22 : [1, 2],     \22control_qubit_list\22 : [],     \22local_basis_list\22 : [2],     \22identifier\22 : 44   }\00", section "llvm.metadata"
@.str.21 = private unnamed_addr constant [403 x i8] c"{     \22matrix_real\22 : \22{qt(prob0) : [1, 0, 0, 0], qt(prob1) : [0, 0, 0, 1]}\22,     \22matrix_imag\22 : \22{qt(prob0) : [0, 0, 0, 0], qt(prob1) : [0, 0, 0, 0]}\22,     \22matrix_order\22 : \22rm\22,     \22is_hermitian\22 : false,     \22is_unitary\22 : false,     \22is_mutable\22 : true,     \22qubit_list\22 : [0],     \22parametric_list\22 : [1, 2],     \22control_qubit_list\22 : [],     \22local_basis_list\22 : [3],     \22identifier\22 : 45   }\00", section "llvm.metadata"
@.str.22 = private unnamed_addr constant [420 x i8] c"{     \22matrix_real\22 : \22[1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, cos(angle)]\22,     \22matrix_imag\22 : \22[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -sin(angle)]\22,     \22matrix_order\22 : \22rm\22,     \22is_hermitian\22 : false,     \22is_unitary\22 : true,     \22is_mutable\22 : true,     \22qubit_list\22 : [0, 1],     \22parametric_list\22 : [2],     \22control_qubit_list\22 : [0, 1],     \22local_basis_list\22 : [3, 3],     \22identifier\22 : 46   }\00", section "llvm.metadata"
@.str.23 = private unnamed_addr constant [423 x i8] c"{     \22matrix_real\22 : \22[cos(theta/2), -sin(theta/2) sin(phi), sin(theta/2) sin(phi), cos(theta/2)]\22,     \22matrix_imag\22 : \22[0, -sin(theta/2)cos(phi), sin(theta/2)cos(phi), 0]\22,     \22matrix_order\22 : \22rm\22,     \22is_hermitian\22 : false,     \22is_unitary\22 : true,     \22is_mutable\22 : true,     \22qubit_list\22 : [0],     \22parametric_list\22 : [1,2],     \22control_qubit_list\22 : [],     \22local_basis_list\22 : [0],     \22identifier\22 : 47   }\00", section "llvm.metadata"
@.str.24 = private unnamed_addr constant [503 x i8] c"{     \22matrix_real\22 : \22[1, 0, 0, 0, 0, (1+cos(angle))/2, (1-cos(angle))/2, 0, 0, (1-cos(angle))/2, (1+cos(angle))/2, 0, 0, 0, 0, 1]\22,     \22matrix_imag\22 : \22[0, 0, 0, 0, 0, sin(angle)/2, -sin(angle)/2, 0, 0, -sin(angle)/2, sin(angle)/2, 0, 0, 0, 0, 0]\22,     \22matrix_order\22 : \22rm\22,     \22is_hermitian\22 : false,     \22is_unitary\22 : true,     \22is_mutable\22 : true,     \22qubit_list\22 : [0, 1],     \22parametric_list\22 : [2],     \22control_qubit_list\22 : [],     \22local_basis_list\22 : [0, 0],     \22identifier\22 : 53   }\00", section "llvm.metadata"
@.str.25 = private unnamed_addr constant [25 x i8] c"{\22fleq_wrapper\22 : true }\00", section "llvm.metadata"
@.str.26 = private unnamed_addr constant [30 x i8] c"include/clang/Quantum/qlist.h\00", section "llvm.metadata"
@.str.27 = private unnamed_addr constant [30 x i8] c"include/clang/Quantum/qexpr.h\00", section "llvm.metadata"
@q = dso_local global [3 x i16] zeroinitializer, align 2
@llvm.global.annotations = appending global [75 x { ptr, ptr, ptr, i32, ptr }] [{ ptr, ptr, ptr, i32, ptr } { ptr @_Z1HRt, ptr @.str, ptr @.str.1, i32 47, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @_Z1XRt, ptr @.str.2, ptr @.str.1, i32 66, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @_Z1YRt, ptr @.str.3, ptr @.str.1, i32 85, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @_Z1ZRt, ptr @.str.4, ptr @.str.1, i32 105, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @_Z1SRt, ptr @.str.5, ptr @.str.1, i32 124, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @_Z4SdagRt, ptr @.str.6, ptr @.str.1, i32 143, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @_Z1TRt, ptr @.str.7, ptr @.str.1, i32 162, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @_Z4TdagRt, ptr @.str.8, ptr @.str.1, i32 181, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @_Z2RXRtd, ptr @.str.9, ptr @.str.1, i32 200, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @_Z2RYRtd, ptr @.str.10, ptr @.str.1, i32 221, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @_Z2RZRtd, ptr @.str.11, ptr @.str.1, i32 242, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @_Z2CZRtS_, ptr @.str.12, ptr @.str.1, i32 263, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @_Z4CNOTRtS_, ptr @.str.13, ptr @.str.1, i32 284, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @_Z4SWAPRtS_, ptr @.str.14, ptr @.str.1, i32 305, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @_Z7ToffoliRtS_S_, ptr @.str.15, ptr @.str.1, i32 326, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @_Z5PrepXRt, ptr @.str.16, ptr @.str.1, i32 350, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @_Z5PrepYRt, ptr @.str.17, ptr @.str.1, i32 367, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @_Z5PrepZRt, ptr @.str.18, ptr @.str.1, i32 384, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @_Z5MeasXRtRbb, ptr @.str.19, ptr @.str.1, i32 401, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @_Z5MeasYRtRbb, ptr @.str.20, ptr @.str.1, i32 421, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @_Z5MeasZRtRbb, ptr @.str.21, ptr @.str.1, i32 441, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @_Z6CPhaseRtS_d, ptr @.str.22, ptr @.str.1, i32 469, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @_Z3RXYRtdd, ptr @.str.23, ptr @.str.1, i32 491, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @_Z5SwapARtS_d, ptr @.str.24, ptr @.str.1, i32 513, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @_ZN5qlist4sizeEPt, ptr @.str.25, ptr @.str.26, i32 206, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @_ZN5qlist11qbits_equalERtS0_, ptr @.str.25, ptr @.str.26, i32 209, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @_ZN5qexpr8identityEv, ptr @.str.25, ptr @.str.27, i32 46, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @_ZN5qexpr12global_phaseEd, ptr @.str.25, ptr @.str.27, i32 48, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @_ZN5qexpr9eval_holdEi, ptr @.str.25, ptr @.str.27, i32 74, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @_ZN5qexpr12eval_releaseEi, ptr @.str.25, ptr @.str.27, i32 76, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @_ZN5qexpr2_HERt, ptr @.str.25, ptr @.str.27, i32 80, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @_ZN5qexpr2_XERt, ptr @.str.25, ptr @.str.27, i32 82, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @_ZN5qexpr2_YERt, ptr @.str.25, ptr @.str.27, i32 84, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @_ZN5qexpr2_ZERt, ptr @.str.25, ptr @.str.27, i32 86, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @_ZN5qexpr2_SERt, ptr @.str.25, ptr @.str.27, i32 88, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @_ZN5qexpr5_SdagERt, ptr @.str.25, ptr @.str.27, i32 90, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @_ZN5qexpr2_TERt, ptr @.str.25, ptr @.str.27, i32 92, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @_ZN5qexpr5_TdagERt, ptr @.str.25, ptr @.str.27, i32 94, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @_ZN5qexpr3_RXERtd, ptr @.str.25, ptr @.str.27, i32 96, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @_ZN5qexpr3_RYERtd, ptr @.str.25, ptr @.str.27, i32 98, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @_ZN5qexpr3_RZERtd, ptr @.str.25, ptr @.str.27, i32 100, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @_ZN5qexpr3_CZERtS0_, ptr @.str.25, ptr @.str.27, i32 102, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @_ZN5qexpr5_CNOTERtS0_, ptr @.str.25, ptr @.str.27, i32 104, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @_ZN5qexpr5_SWAPERtS0_, ptr @.str.25, ptr @.str.27, i32 106, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @_ZN5qexpr8_ToffoliERtS0_S0_, ptr @.str.25, ptr @.str.27, i32 108, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @_ZN5qexpr6_PrepXERt, ptr @.str.25, ptr @.str.27, i32 111, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @_ZN5qexpr6_PrepYERt, ptr @.str.25, ptr @.str.27, i32 113, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @_ZN5qexpr6_PrepZERt, ptr @.str.25, ptr @.str.27, i32 115, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @_ZN5qexpr6_MeasXERtRb, ptr @.str.25, ptr @.str.27, i32 118, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @_ZN5qexpr6_MeasYERtRb, ptr @.str.25, ptr @.str.27, i32 120, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @_ZN5qexpr6_MeasZERtRb, ptr @.str.25, ptr @.str.27, i32 122, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @_ZN5qexpr7_CPhaseERtS0_d, ptr @.str.25, ptr @.str.27, i32 125, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @_ZN5qexpr4_RXYERtdd, ptr @.str.25, ptr @.str.27, i32 127, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @_ZN5qexpr6_SwapAERtS0_d, ptr @.str.25, ptr @.str.27, i32 129, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @_ZN5qexpr4joinEii, ptr @.str.25, ptr @.str.27, i32 144, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @_ZN5qexpr4bindEii, ptr @.str.25, ptr @.str.27, i32 154, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @_ZN5qexpr6invertEi, ptr @.str.25, ptr @.str.27, i32 160, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @_ZN5qexpr5powerEji, ptr @.str.25, ptr @.str.27, i32 169, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @_ZN5qexpr7controlERti, ptr @.str.25, ptr @.str.27, i32 183, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @_ZN5qexpr7controlERtbi, ptr @.str.25, ptr @.str.27, i32 196, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @_ZN5qexpr7controlEPti, ptr @.str.25, ptr @.str.27, i32 210, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @_ZN5qexpr7controlEPtji, ptr @.str.25, ptr @.str.27, i32 228, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @_ZN5qexpr7controlERKN5qlist5QListEi, ptr @.str.25, ptr @.str.27, i32 230, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @_ZN5qexpr7controlERKN5qlist5QListEji, ptr @.str.25, ptr @.str.27, i32 232, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @_ZN5qexpr3qIfERtii, ptr @.str.25, ptr @.str.27, i32 240, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @_ZN5qexpr3cIfEbii, ptr @.str.25, ptr @.str.27, i32 256, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @_ZN5qexpr7cIfTrueEbi, ptr @.str.25, ptr @.str.27, i32 263, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @_ZN5qexpr8cIfFalseEbi, ptr @.str.25, ptr @.str.27, i32 270, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @_ZN5qexpr3letEPKci, ptr @.str.25, ptr @.str.27, i32 281, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @_ZN5qexpr3getEPKc, ptr @.str.25, ptr @.str.27, i32 286, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @_ZN5qexpr13exitAtCompileEN5qlist8DataListE, ptr @.str.25, ptr @.str.27, i32 292, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @_ZN5qexpr13exitAtRuntimeEN5qlist8DataListE, ptr @.str.25, ptr @.str.27, i32 298, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @_ZN5qexpr5fenceEi, ptr @.str.25, ptr @.str.27, i32 304, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @_ZN5qexpr17printQuantumLogicEi, ptr @.str.25, ptr @.str.27, i32 316, ptr null }, { ptr, ptr, ptr, i32, ptr } { ptr @_ZN5qexpr13printDataListEN5qlist8DataListEi, ptr @.str.25, ptr @.str.27, i32 323, ptr null }], section "llvm.metadata"

; Function Attrs: mustprogress noinline uwtable
define dso_local void @_Z1HRt(ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" %q) #0 {
; CHECK-LABEL: define dso_local void @_Z1HRt(
; CHECK-SAME: ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" [[Q:%.*]]) #[[ATTR0:[0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    call void @llvm.quantum.qubit(ptr noundef nonnull [[Q]])
; CHECK-NEXT:    ret void
;
entry:
  call void @llvm.quantum.qubit(ptr noundef nonnull %q)
  ret void
}

declare void @_Z15__quantum_qubitPt(ptr noundef) local_unnamed_addr #1

; Function Attrs: mustprogress noinline uwtable
define dso_local void @_Z1XRt(ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" %q) #0 {
; CHECK-LABEL: define dso_local void @_Z1XRt(
; CHECK-SAME: ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" [[Q:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    call void @llvm.quantum.qubit(ptr noundef nonnull [[Q]])
; CHECK-NEXT:    ret void
;
entry:
  call void @llvm.quantum.qubit(ptr noundef nonnull %q)
  ret void
}

; Function Attrs: mustprogress noinline uwtable
define dso_local void @_Z1YRt(ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" %q) #0 {
; CHECK-LABEL: define dso_local void @_Z1YRt(
; CHECK-SAME: ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" [[Q:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    call void @llvm.quantum.qubit(ptr noundef nonnull [[Q]])
; CHECK-NEXT:    ret void
;
entry:
  call void @llvm.quantum.qubit(ptr noundef nonnull %q)
  ret void
}

; Function Attrs: mustprogress noinline uwtable
define dso_local void @_Z1ZRt(ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" %q) #0 {
; CHECK-LABEL: define dso_local void @_Z1ZRt(
; CHECK-SAME: ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" [[Q:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    call void @llvm.quantum.qubit(ptr noundef nonnull [[Q]])
; CHECK-NEXT:    ret void
;
entry:
  call void @llvm.quantum.qubit(ptr noundef nonnull %q)
  ret void
}

; Function Attrs: mustprogress noinline uwtable
define dso_local void @_Z1SRt(ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" %q) #0 {
; CHECK-LABEL: define dso_local void @_Z1SRt(
; CHECK-SAME: ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" [[Q:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    call void @llvm.quantum.qubit(ptr noundef nonnull [[Q]])
; CHECK-NEXT:    ret void
;
entry:
  call void @llvm.quantum.qubit(ptr noundef nonnull %q)
  ret void
}

; Function Attrs: mustprogress noinline uwtable
define dso_local void @_Z4SdagRt(ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" %q) #0 {
; CHECK-LABEL: define dso_local void @_Z4SdagRt(
; CHECK-SAME: ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" [[Q:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    call void @llvm.quantum.qubit(ptr noundef nonnull [[Q]])
; CHECK-NEXT:    ret void
;
entry:
  call void @llvm.quantum.qubit(ptr noundef nonnull %q)
  ret void
}

; Function Attrs: mustprogress noinline uwtable
define dso_local void @_Z1TRt(ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" %q) #0 {
; CHECK-LABEL: define dso_local void @_Z1TRt(
; CHECK-SAME: ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" [[Q:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    call void @llvm.quantum.qubit(ptr noundef nonnull [[Q]])
; CHECK-NEXT:    ret void
;
entry:
  call void @llvm.quantum.qubit(ptr noundef nonnull %q)
  ret void
}

; Function Attrs: mustprogress noinline uwtable
define dso_local void @_Z4TdagRt(ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" %q) #0 {
; CHECK-LABEL: define dso_local void @_Z4TdagRt(
; CHECK-SAME: ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" [[Q:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    call void @llvm.quantum.qubit(ptr noundef nonnull [[Q]])
; CHECK-NEXT:    ret void
;
entry:
  call void @llvm.quantum.qubit(ptr noundef nonnull %q)
  ret void
}

; Function Attrs: mustprogress noinline uwtable
define dso_local void @_Z2RXRtd(ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" %q, double noundef %angle) #0 {
; CHECK-LABEL: define dso_local void @_Z2RXRtd(
; CHECK-SAME: ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" [[Q:%.*]], double noundef [[ANGLE:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    call void @llvm.quantum.qubit(ptr noundef nonnull [[Q]])
; CHECK-NEXT:    call void @llvm.quantum.param(double noundef [[ANGLE]])
; CHECK-NEXT:    ret void
;
entry:
  call void @llvm.quantum.qubit(ptr noundef nonnull %q)
  call void @llvm.quantum.param(double noundef %angle)
  ret void
}

declare void @_Z15__quantum_paramd(double noundef) local_unnamed_addr #1

; Function Attrs: mustprogress noinline uwtable
define dso_local void @_Z2RYRtd(ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" %q, double noundef %angle) #0 {
; CHECK-LABEL: define dso_local void @_Z2RYRtd(
; CHECK-SAME: ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" [[Q:%.*]], double noundef [[ANGLE:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    call void @llvm.quantum.qubit(ptr noundef nonnull [[Q]])
; CHECK-NEXT:    call void @llvm.quantum.param(double noundef [[ANGLE]])
; CHECK-NEXT:    ret void
;
entry:
  call void @llvm.quantum.qubit(ptr noundef nonnull %q)
  call void @llvm.quantum.param(double noundef %angle)
  ret void
}

; Function Attrs: mustprogress noinline uwtable
define dso_local void @_Z2RZRtd(ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" %q, double noundef %angle) #0 {
; CHECK-LABEL: define dso_local void @_Z2RZRtd(
; CHECK-SAME: ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" [[Q:%.*]], double noundef [[ANGLE:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    call void @llvm.quantum.qubit(ptr noundef nonnull [[Q]])
; CHECK-NEXT:    call void @llvm.quantum.param(double noundef [[ANGLE]])
; CHECK-NEXT:    ret void
;
entry:
  call void @llvm.quantum.qubit(ptr noundef nonnull %q)
  call void @llvm.quantum.param(double noundef %angle)
  ret void
}

; Function Attrs: mustprogress noinline uwtable
define dso_local void @_Z2CZRtS_(ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" %ctrl, ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" %target) #0 {
; CHECK-LABEL: define dso_local void @_Z2CZRtS_(
; CHECK-SAME: ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" [[CTRL:%.*]], ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" [[TARGET:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    call void @llvm.quantum.qubit(ptr noundef nonnull [[CTRL]])
; CHECK-NEXT:    call void @llvm.quantum.qubit(ptr noundef nonnull [[TARGET]])
; CHECK-NEXT:    ret void
;
entry:
  call void @llvm.quantum.qubit(ptr noundef nonnull %ctrl)
  call void @llvm.quantum.qubit(ptr noundef nonnull %target)
  ret void
}

; Function Attrs: mustprogress noinline uwtable
define dso_local void @_Z4CNOTRtS_(ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" %ctrl, ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" %target) #0 {
; CHECK-LABEL: define dso_local void @_Z4CNOTRtS_(
; CHECK-SAME: ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" [[CTRL:%.*]], ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" [[TARGET:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    call void @llvm.quantum.qubit(ptr noundef nonnull [[CTRL]])
; CHECK-NEXT:    call void @llvm.quantum.qubit(ptr noundef nonnull [[TARGET]])
; CHECK-NEXT:    ret void
;
entry:
  call void @llvm.quantum.qubit(ptr noundef nonnull %ctrl)
  call void @llvm.quantum.qubit(ptr noundef nonnull %target)
  ret void
}

; Function Attrs: mustprogress noinline uwtable
define dso_local void @_Z4SWAPRtS_(ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" %ctrl, ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" %target) #0 {
; CHECK-LABEL: define dso_local void @_Z4SWAPRtS_(
; CHECK-SAME: ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" [[CTRL:%.*]], ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" [[TARGET:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    call void @llvm.quantum.qubit(ptr noundef nonnull [[CTRL]])
; CHECK-NEXT:    call void @llvm.quantum.qubit(ptr noundef nonnull [[TARGET]])
; CHECK-NEXT:    ret void
;
entry:
  call void @llvm.quantum.qubit(ptr noundef nonnull %ctrl)
  call void @llvm.quantum.qubit(ptr noundef nonnull %target)
  ret void
}

; Function Attrs: mustprogress noinline uwtable
define dso_local void @_Z7ToffoliRtS_S_(ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" %ctrl0, ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" %ctrl1, ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" %target) #0 {
; CHECK-LABEL: define dso_local void @_Z7ToffoliRtS_S_(
; CHECK-SAME: ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" [[CTRL0:%.*]], ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" [[CTRL1:%.*]], ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" [[TARGET:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    call void @llvm.quantum.qubit(ptr noundef nonnull [[CTRL0]])
; CHECK-NEXT:    call void @llvm.quantum.qubit(ptr noundef nonnull [[CTRL1]])
; CHECK-NEXT:    call void @llvm.quantum.qubit(ptr noundef nonnull [[TARGET]])
; CHECK-NEXT:    ret void
;
entry:
  call void @llvm.quantum.qubit(ptr noundef nonnull %ctrl0)
  call void @llvm.quantum.qubit(ptr noundef nonnull %ctrl1)
  call void @llvm.quantum.qubit(ptr noundef nonnull %target)
  ret void
}

; Function Attrs: mustprogress noinline uwtable
define dso_local void @_Z5PrepXRt(ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" %q) #0 {
; CHECK-LABEL: define dso_local void @_Z5PrepXRt(
; CHECK-SAME: ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" [[Q:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    call void @llvm.quantum.qubit(ptr noundef nonnull [[Q]])
; CHECK-NEXT:    ret void
;
entry:
  call void @llvm.quantum.qubit(ptr noundef nonnull %q)
  ret void
}

; Function Attrs: mustprogress noinline uwtable
define dso_local void @_Z5PrepYRt(ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" %q) #0 {
; CHECK-LABEL: define dso_local void @_Z5PrepYRt(
; CHECK-SAME: ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" [[Q:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    call void @llvm.quantum.qubit(ptr noundef nonnull [[Q]])
; CHECK-NEXT:    ret void
;
entry:
  call void @llvm.quantum.qubit(ptr noundef nonnull %q)
  ret void
}

; Function Attrs: mustprogress noinline uwtable
define dso_local void @_Z5PrepZRt(ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" %q) #0 {
; CHECK-LABEL: define dso_local void @_Z5PrepZRt(
; CHECK-SAME: ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" [[Q:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    call void @llvm.quantum.qubit(ptr noundef nonnull [[Q]])
; CHECK-NEXT:    ret void
;
entry:
  call void @llvm.quantum.qubit(ptr noundef nonnull %q)
  ret void
}

; Function Attrs: mustprogress noinline uwtable
define dso_local void @_Z5MeasXRtRbb(ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" %q, ptr noundef nonnull align 1 dereferenceable(1) "cbit_ref" %c, i1 noundef zeroext %flip) #0 {
; CHECK-LABEL: define dso_local void @_Z5MeasXRtRbb(
; CHECK-SAME: ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" [[Q:%.*]], ptr noundef nonnull align 1 dereferenceable(1) "cbit_ref" [[C:%.*]], i1 noundef zeroext [[FLIP:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    call void @llvm.quantum.qubit(ptr noundef nonnull [[Q]])
; CHECK-NEXT:    call void @llvm.quantum.cbit(ptr noundef nonnull [[C]])
; CHECK-NEXT:    [[CONV:%.*]] = uitofp i1 [[FLIP]] to double
; CHECK-NEXT:    call void @llvm.quantum.param(double noundef [[CONV]])
; CHECK-NEXT:    ret void
;
entry:
  call void @llvm.quantum.qubit(ptr noundef nonnull %q)
  call void @llvm.quantum.cbit(ptr noundef nonnull %c)
  %conv = uitofp i1 %flip to double
  call void @llvm.quantum.param(double noundef %conv)
  ret void
}

declare void @_Z14__quantum_cbitPb(ptr noundef) local_unnamed_addr #1

; Function Attrs: mustprogress noinline uwtable
define dso_local void @_Z5MeasYRtRbb(ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" %q, ptr noundef nonnull align 1 dereferenceable(1) "cbit_ref" %c, i1 noundef zeroext %flip) #0 {
; CHECK-LABEL: define dso_local void @_Z5MeasYRtRbb(
; CHECK-SAME: ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" [[Q:%.*]], ptr noundef nonnull align 1 dereferenceable(1) "cbit_ref" [[C:%.*]], i1 noundef zeroext [[FLIP:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    call void @llvm.quantum.qubit(ptr noundef nonnull [[Q]])
; CHECK-NEXT:    call void @llvm.quantum.cbit(ptr noundef nonnull [[C]])
; CHECK-NEXT:    [[CONV:%.*]] = uitofp i1 [[FLIP]] to double
; CHECK-NEXT:    call void @llvm.quantum.param(double noundef [[CONV]])
; CHECK-NEXT:    ret void
;
entry:
  call void @llvm.quantum.qubit(ptr noundef nonnull %q)
  call void @llvm.quantum.cbit(ptr noundef nonnull %c)
  %conv = uitofp i1 %flip to double
  call void @llvm.quantum.param(double noundef %conv)
  ret void
}

; Function Attrs: mustprogress noinline uwtable
define dso_local void @_Z5MeasZRtRbb(ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" %q, ptr noundef nonnull align 1 dereferenceable(1) "cbit_ref" %c, i1 noundef zeroext %flip) #0 {
; CHECK-LABEL: define dso_local void @_Z5MeasZRtRbb(
; CHECK-SAME: ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" [[Q:%.*]], ptr noundef nonnull align 1 dereferenceable(1) "cbit_ref" [[C:%.*]], i1 noundef zeroext [[FLIP:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    call void @llvm.quantum.qubit(ptr noundef nonnull [[Q]])
; CHECK-NEXT:    call void @llvm.quantum.cbit(ptr noundef nonnull [[C]])
; CHECK-NEXT:    [[CONV:%.*]] = uitofp i1 [[FLIP]] to double
; CHECK-NEXT:    call void @llvm.quantum.param(double noundef [[CONV]])
; CHECK-NEXT:    ret void
;
entry:
  call void @llvm.quantum.qubit(ptr noundef nonnull %q)
  call void @llvm.quantum.cbit(ptr noundef nonnull %c)
  %conv = uitofp i1 %flip to double
  call void @llvm.quantum.param(double noundef %conv)
  ret void
}

; Function Attrs: mustprogress noinline uwtable
define dso_local void @_Z6CPhaseRtS_d(ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" %ctrl, ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" %target, double noundef %angle) #0 {
; CHECK-LABEL: define dso_local void @_Z6CPhaseRtS_d(
; CHECK-SAME: ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" [[CTRL:%.*]], ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" [[TARGET:%.*]], double noundef [[ANGLE:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    call void @llvm.quantum.qubit(ptr noundef nonnull [[CTRL]])
; CHECK-NEXT:    call void @llvm.quantum.qubit(ptr noundef nonnull [[TARGET]])
; CHECK-NEXT:    call void @llvm.quantum.param(double noundef [[ANGLE]])
; CHECK-NEXT:    ret void
;
entry:
  call void @llvm.quantum.qubit(ptr noundef nonnull %ctrl)
  call void @llvm.quantum.qubit(ptr noundef nonnull %target)
  call void @llvm.quantum.param(double noundef %angle)
  ret void
}

; Function Attrs: mustprogress noinline uwtable
define dso_local void @_Z3RXYRtdd(ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" %q, double noundef %theta, double noundef %phi) #0 {
; CHECK-LABEL: define dso_local void @_Z3RXYRtdd(
; CHECK-SAME: ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" [[Q:%.*]], double noundef [[THETA:%.*]], double noundef [[PHI:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    call void @llvm.quantum.qubit(ptr noundef nonnull [[Q]])
; CHECK-NEXT:    call void @llvm.quantum.param(double noundef [[THETA]])
; CHECK-NEXT:    call void @llvm.quantum.param(double noundef [[PHI]])
; CHECK-NEXT:    ret void
;
entry:
  call void @llvm.quantum.qubit(ptr noundef nonnull %q)
  call void @llvm.quantum.param(double noundef %theta)
  call void @llvm.quantum.param(double noundef %phi)
  ret void
}

; Function Attrs: mustprogress noinline uwtable
define dso_local void @_Z5SwapARtS_d(ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" %q1, ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" %q2, double noundef %angle) #0 {
; CHECK-LABEL: define dso_local void @_Z5SwapARtS_d(
; CHECK-SAME: ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" [[Q1:%.*]], ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" [[Q2:%.*]], double noundef [[ANGLE:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    call void @llvm.quantum.qubit(ptr noundef nonnull [[Q1]])
; CHECK-NEXT:    call void @llvm.quantum.qubit(ptr noundef nonnull [[Q2]])
; CHECK-NEXT:    call void @llvm.quantum.param(double noundef [[ANGLE]])
; CHECK-NEXT:    ret void
;
entry:
  call void @llvm.quantum.qubit(ptr noundef nonnull %q1)
  call void @llvm.quantum.qubit(ptr noundef nonnull %q2)
  call void @llvm.quantum.param(double noundef %angle)
  ret void
}

; Function Attrs: alwaysinline mustprogress nounwind uwtable
define dso_local noundef i64 @_ZN5qlist4sizeEPt(ptr noundef %reg) #2 {
; CHECK-LABEL: define dso_local noundef i64 @_ZN5qlist4sizeEPt(
; CHECK-SAME: ptr noundef [[REG:%.*]]) #[[ATTR2:[0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CALL:%.*]] = call noundef i64 @llvm.fleq.qlist.size(ptr noundef [[REG]]) #[[ATTR8:[0-9]+]]
; CHECK-NEXT:    ret i64 [[CALL]]
;
entry:
  %call = call noundef i64 @llvm.fleq.qlist.size(ptr noundef %reg) #8
  ret i64 %call
}

; Function Attrs: nounwind
declare noundef i64 @_ZN15quantum_builtin12__qlist_sizeEPt(ptr noundef) local_unnamed_addr #3

; Function Attrs: alwaysinline mustprogress nounwind uwtable
define dso_local noundef zeroext i1 @_ZN5qlist11qbits_equalERtS0_(ptr noundef nonnull align 2 dereferenceable(2) %q1, ptr noundef nonnull align 2 dereferenceable(2) %q2) #2 {
; CHECK-LABEL: define dso_local noundef zeroext i1 @_ZN5qlist11qbits_equalERtS0_(
; CHECK-SAME: ptr noundef nonnull align 2 dereferenceable(2) [[Q1:%.*]], ptr noundef nonnull align 2 dereferenceable(2) [[Q2:%.*]]) #[[ATTR2]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CALL:%.*]] = call noundef zeroext i1 @llvm.fleq.qlist.equal(ptr noundef nonnull [[Q1]], ptr noundef nonnull [[Q2]]) #[[ATTR8]]
; CHECK-NEXT:    ret i1 [[CALL]]
;
entry:
  %call = call noundef zeroext i1 @llvm.fleq.qlist.equal(ptr noundef nonnull %q1, ptr noundef nonnull %q2) #8
  ret i1 %call
}

; Function Attrs: nounwind
declare noundef zeroext i1 @_ZN15quantum_builtin13__qlist_equalEPtS0_(ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: alwaysinline mustprogress nounwind uwtable
define dso_local noundef i32 @_ZN5qexpr8identityEv() #4 {
; CHECK-LABEL: define dso_local noundef i32 @_ZN5qexpr8identityEv(
; CHECK-SAME: ) #[[ATTR4:[0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CALL:%.*]] = call noundef i32 @llvm.fleq.qexpr.identity(double noundef 0.000000e+00) #[[ATTR8]]
; CHECK-NEXT:    ret i32 [[CALL]]
;
entry:
  %call = call noundef i32 @llvm.fleq.qexpr.identity(double noundef 0.000000e+00) #8
  ret i32 %call
}

; Function Attrs: nounwind
declare noundef i32 @_ZN15quantum_builtin16__qexpr_identityEd(double noundef) local_unnamed_addr #3

; Function Attrs: alwaysinline mustprogress nounwind uwtable
define dso_local noundef i32 @_ZN5qexpr12global_phaseEd(double noundef %angle) #4 {
; CHECK-LABEL: define dso_local noundef i32 @_ZN5qexpr12global_phaseEd(
; CHECK-SAME: double noundef [[ANGLE:%.*]]) #[[ATTR4]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CALL:%.*]] = call noundef i32 @llvm.fleq.qexpr.identity(double noundef [[ANGLE]]) #[[ATTR8]]
; CHECK-NEXT:    ret i32 [[CALL]]
;
entry:
  %call = call noundef i32 @llvm.fleq.qexpr.identity(double noundef %angle) #8
  ret i32 %call
}

; Function Attrs: alwaysinline mustprogress nounwind uwtable
define dso_local void @_ZN5qexpr9eval_holdEi(i32 noundef "qexpr_val" %e) #2 {
; CHECK-LABEL: define dso_local void @_ZN5qexpr9eval_holdEi(
; CHECK-SAME: i32 noundef "qexpr_val" [[E:%.*]]) #[[ATTR2]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    call void @llvm.fleq.qexpr.eval.hold(i32 noundef [[E]]) #[[ATTR8]]
; CHECK-NEXT:    ret void
;
entry:
  call void @llvm.fleq.qexpr.eval.hold(i32 noundef %e) #8
  ret void
}

; Function Attrs: nounwind
declare void @_ZN15quantum_builtin17__qexpr_eval_holdEi(i32 noundef) local_unnamed_addr #3

; Function Attrs: alwaysinline mustprogress nounwind uwtable
define dso_local void @_ZN5qexpr12eval_releaseEi(i32 noundef "qexpr_val" %e) #2 {
; CHECK-LABEL: define dso_local void @_ZN5qexpr12eval_releaseEi(
; CHECK-SAME: i32 noundef "qexpr_val" [[E:%.*]]) #[[ATTR2]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    call void @llvm.fleq.qexpr.eval.release(i32 noundef [[E]]) #[[ATTR8]]
; CHECK-NEXT:    ret void
;
entry:
  call void @llvm.fleq.qexpr.eval.release(i32 noundef %e) #8
  ret void
}

; Function Attrs: nounwind
declare void @_ZN15quantum_builtin20__qexpr_eval_releaseEi(i32 noundef) local_unnamed_addr #3

; Function Attrs: alwaysinline mustprogress nounwind uwtable
define dso_local noundef i32 @_ZN5qexpr2_HERt(ptr noundef nonnull align 2 dereferenceable(2) %q) #4 {
; CHECK-LABEL: define dso_local noundef i32 @_ZN5qexpr2_HERt(
; CHECK-SAME: ptr noundef nonnull align 2 dereferenceable(2) [[Q:%.*]]) #[[ATTR4]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CALL:%.*]] = call noundef i32 @llvm.fleq.gate.qexpr.h(ptr noundef nonnull [[Q]]) #[[ATTR8]]
; CHECK-NEXT:    ret i32 [[CALL]]
;
entry:
  %call = call noundef i32 @llvm.fleq.gate.qexpr.h(ptr noundef nonnull %q) #8
  ret i32 %call
}

; Function Attrs: nounwind
declare noundef i32 @_ZN15quantum_builtin9__qexpr_HEPt(ptr noundef) local_unnamed_addr #3

; Function Attrs: alwaysinline mustprogress nounwind uwtable
define dso_local noundef i32 @_ZN5qexpr2_XERt(ptr noundef nonnull align 2 dereferenceable(2) %q) #4 {
; CHECK-LABEL: define dso_local noundef i32 @_ZN5qexpr2_XERt(
; CHECK-SAME: ptr noundef nonnull align 2 dereferenceable(2) [[Q:%.*]]) #[[ATTR4]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CALL:%.*]] = call noundef i32 @llvm.fleq.gate.qexpr.x(ptr noundef nonnull [[Q]]) #[[ATTR8]]
; CHECK-NEXT:    ret i32 [[CALL]]
;
entry:
  %call = call noundef i32 @llvm.fleq.gate.qexpr.x(ptr noundef nonnull %q) #8
  ret i32 %call
}

; Function Attrs: nounwind
declare noundef i32 @_ZN15quantum_builtin9__qexpr_XEPt(ptr noundef) local_unnamed_addr #3

; Function Attrs: alwaysinline mustprogress nounwind uwtable
define dso_local noundef i32 @_ZN5qexpr2_YERt(ptr noundef nonnull align 2 dereferenceable(2) %q) #4 {
; CHECK-LABEL: define dso_local noundef i32 @_ZN5qexpr2_YERt(
; CHECK-SAME: ptr noundef nonnull align 2 dereferenceable(2) [[Q:%.*]]) #[[ATTR4]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CALL:%.*]] = call noundef i32 @llvm.fleq.gate.qexpr.y(ptr noundef nonnull [[Q]]) #[[ATTR8]]
; CHECK-NEXT:    ret i32 [[CALL]]
;
entry:
  %call = call noundef i32 @llvm.fleq.gate.qexpr.y(ptr noundef nonnull %q) #8
  ret i32 %call
}

; Function Attrs: nounwind
declare noundef i32 @_ZN15quantum_builtin9__qexpr_YEPt(ptr noundef) local_unnamed_addr #3

; Function Attrs: alwaysinline mustprogress nounwind uwtable
define dso_local noundef i32 @_ZN5qexpr2_ZERt(ptr noundef nonnull align 2 dereferenceable(2) %q) #4 {
; CHECK-LABEL: define dso_local noundef i32 @_ZN5qexpr2_ZERt(
; CHECK-SAME: ptr noundef nonnull align 2 dereferenceable(2) [[Q:%.*]]) #[[ATTR4]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CALL:%.*]] = call noundef i32 @llvm.fleq.gate.qexpr.z(ptr noundef nonnull [[Q]]) #[[ATTR8]]
; CHECK-NEXT:    ret i32 [[CALL]]
;
entry:
  %call = call noundef i32 @llvm.fleq.gate.qexpr.z(ptr noundef nonnull %q) #8
  ret i32 %call
}

; Function Attrs: nounwind
declare noundef i32 @_ZN15quantum_builtin9__qexpr_ZEPt(ptr noundef) local_unnamed_addr #3

; Function Attrs: alwaysinline mustprogress nounwind uwtable
define dso_local noundef i32 @_ZN5qexpr2_SERt(ptr noundef nonnull align 2 dereferenceable(2) %q) #4 {
; CHECK-LABEL: define dso_local noundef i32 @_ZN5qexpr2_SERt(
; CHECK-SAME: ptr noundef nonnull align 2 dereferenceable(2) [[Q:%.*]]) #[[ATTR4]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CALL:%.*]] = call noundef i32 @llvm.fleq.gate.qexpr.s(ptr noundef nonnull [[Q]]) #[[ATTR8]]
; CHECK-NEXT:    ret i32 [[CALL]]
;
entry:
  %call = call noundef i32 @llvm.fleq.gate.qexpr.s(ptr noundef nonnull %q) #8
  ret i32 %call
}

; Function Attrs: nounwind
declare noundef i32 @_ZN15quantum_builtin9__qexpr_SEPt(ptr noundef) local_unnamed_addr #3

; Function Attrs: alwaysinline mustprogress nounwind uwtable
define dso_local noundef i32 @_ZN5qexpr5_SdagERt(ptr noundef nonnull align 2 dereferenceable(2) %q) #4 {
; CHECK-LABEL: define dso_local noundef i32 @_ZN5qexpr5_SdagERt(
; CHECK-SAME: ptr noundef nonnull align 2 dereferenceable(2) [[Q:%.*]]) #[[ATTR4]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CALL:%.*]] = call noundef i32 @llvm.fleq.gate.qexpr.s.dag(ptr noundef nonnull [[Q]]) #[[ATTR8]]
; CHECK-NEXT:    ret i32 [[CALL]]
;
entry:
  %call = call noundef i32 @llvm.fleq.gate.qexpr.s.dag(ptr noundef nonnull %q) #8
  ret i32 %call
}

; Function Attrs: nounwind
declare noundef i32 @_ZN15quantum_builtin12__qexpr_SdagEPt(ptr noundef) local_unnamed_addr #3

; Function Attrs: alwaysinline mustprogress nounwind uwtable
define dso_local noundef i32 @_ZN5qexpr2_TERt(ptr noundef nonnull align 2 dereferenceable(2) %q) #4 {
; CHECK-LABEL: define dso_local noundef i32 @_ZN5qexpr2_TERt(
; CHECK-SAME: ptr noundef nonnull align 2 dereferenceable(2) [[Q:%.*]]) #[[ATTR4]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CALL:%.*]] = call noundef i32 @llvm.fleq.gate.qexpr.t(ptr noundef nonnull [[Q]]) #[[ATTR8]]
; CHECK-NEXT:    ret i32 [[CALL]]
;
entry:
  %call = call noundef i32 @llvm.fleq.gate.qexpr.t(ptr noundef nonnull %q) #8
  ret i32 %call
}

; Function Attrs: nounwind
declare noundef i32 @_ZN15quantum_builtin9__qexpr_TEPt(ptr noundef) local_unnamed_addr #3

; Function Attrs: alwaysinline mustprogress nounwind uwtable
define dso_local noundef i32 @_ZN5qexpr5_TdagERt(ptr noundef nonnull align 2 dereferenceable(2) %q) #4 {
; CHECK-LABEL: define dso_local noundef i32 @_ZN5qexpr5_TdagERt(
; CHECK-SAME: ptr noundef nonnull align 2 dereferenceable(2) [[Q:%.*]]) #[[ATTR4]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CALL:%.*]] = call noundef i32 @llvm.fleq.gate.qexpr.t.dag(ptr noundef nonnull [[Q]]) #[[ATTR8]]
; CHECK-NEXT:    ret i32 [[CALL]]
;
entry:
  %call = call noundef i32 @llvm.fleq.gate.qexpr.t.dag(ptr noundef nonnull %q) #8
  ret i32 %call
}

; Function Attrs: nounwind
declare noundef i32 @_ZN15quantum_builtin12__qexpr_TdagEPt(ptr noundef) local_unnamed_addr #3

; Function Attrs: alwaysinline mustprogress nounwind uwtable
define dso_local noundef i32 @_ZN5qexpr3_RXERtd(ptr noundef nonnull align 2 dereferenceable(2) %q, double noundef %angle) #4 {
; CHECK-LABEL: define dso_local noundef i32 @_ZN5qexpr3_RXERtd(
; CHECK-SAME: ptr noundef nonnull align 2 dereferenceable(2) [[Q:%.*]], double noundef [[ANGLE:%.*]]) #[[ATTR4]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CALL:%.*]] = call noundef i32 @llvm.fleq.gate.qexpr.rx(ptr noundef nonnull [[Q]], double noundef [[ANGLE]]) #[[ATTR8]]
; CHECK-NEXT:    ret i32 [[CALL]]
;
entry:
  %call = call noundef i32 @llvm.fleq.gate.qexpr.rx(ptr noundef nonnull %q, double noundef %angle) #8
  ret i32 %call
}

; Function Attrs: nounwind
declare noundef i32 @_ZN15quantum_builtin10__qexpr_RXEPtd(ptr noundef, double noundef) local_unnamed_addr #3

; Function Attrs: alwaysinline mustprogress nounwind uwtable
define dso_local noundef i32 @_ZN5qexpr3_RYERtd(ptr noundef nonnull align 2 dereferenceable(2) %q, double noundef %angle) #4 {
; CHECK-LABEL: define dso_local noundef i32 @_ZN5qexpr3_RYERtd(
; CHECK-SAME: ptr noundef nonnull align 2 dereferenceable(2) [[Q:%.*]], double noundef [[ANGLE:%.*]]) #[[ATTR4]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CALL:%.*]] = call noundef i32 @llvm.fleq.gate.qexpr.ry(ptr noundef nonnull [[Q]], double noundef [[ANGLE]]) #[[ATTR8]]
; CHECK-NEXT:    ret i32 [[CALL]]
;
entry:
  %call = call noundef i32 @llvm.fleq.gate.qexpr.ry(ptr noundef nonnull %q, double noundef %angle) #8
  ret i32 %call
}

; Function Attrs: nounwind
declare noundef i32 @_ZN15quantum_builtin10__qexpr_RYEPtd(ptr noundef, double noundef) local_unnamed_addr #3

; Function Attrs: alwaysinline mustprogress nounwind uwtable
define dso_local noundef i32 @_ZN5qexpr3_RZERtd(ptr noundef nonnull align 2 dereferenceable(2) %q, double noundef %angle) #4 {
; CHECK-LABEL: define dso_local noundef i32 @_ZN5qexpr3_RZERtd(
; CHECK-SAME: ptr noundef nonnull align 2 dereferenceable(2) [[Q:%.*]], double noundef [[ANGLE:%.*]]) #[[ATTR4]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CALL:%.*]] = call noundef i32 @llvm.fleq.gate.qexpr.rz(ptr noundef nonnull [[Q]], double noundef [[ANGLE]]) #[[ATTR8]]
; CHECK-NEXT:    ret i32 [[CALL]]
;
entry:
  %call = call noundef i32 @llvm.fleq.gate.qexpr.rz(ptr noundef nonnull %q, double noundef %angle) #8
  ret i32 %call
}

; Function Attrs: nounwind
declare noundef i32 @_ZN15quantum_builtin10__qexpr_RZEPtd(ptr noundef, double noundef) local_unnamed_addr #3

; Function Attrs: alwaysinline mustprogress nounwind uwtable
define dso_local noundef i32 @_ZN5qexpr3_CZERtS0_(ptr noundef nonnull align 2 dereferenceable(2) %ctrl, ptr noundef nonnull align 2 dereferenceable(2) %tgt) #4 {
; CHECK-LABEL: define dso_local noundef i32 @_ZN5qexpr3_CZERtS0_(
; CHECK-SAME: ptr noundef nonnull align 2 dereferenceable(2) [[CTRL:%.*]], ptr noundef nonnull align 2 dereferenceable(2) [[TGT:%.*]]) #[[ATTR4]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CALL:%.*]] = call noundef i32 @llvm.fleq.gate.qexpr.cz(ptr noundef nonnull [[CTRL]], ptr noundef nonnull [[TGT]]) #[[ATTR8]]
; CHECK-NEXT:    ret i32 [[CALL]]
;
entry:
  %call = call noundef i32 @llvm.fleq.gate.qexpr.cz(ptr noundef nonnull %ctrl, ptr noundef nonnull %tgt) #8
  ret i32 %call
}

; Function Attrs: nounwind
declare noundef i32 @_ZN15quantum_builtin10__qexpr_CZEPtS0_(ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: alwaysinline mustprogress nounwind uwtable
define dso_local noundef i32 @_ZN5qexpr5_CNOTERtS0_(ptr noundef nonnull align 2 dereferenceable(2) %ctrl, ptr noundef nonnull align 2 dereferenceable(2) %tgt) #4 {
; CHECK-LABEL: define dso_local noundef i32 @_ZN5qexpr5_CNOTERtS0_(
; CHECK-SAME: ptr noundef nonnull align 2 dereferenceable(2) [[CTRL:%.*]], ptr noundef nonnull align 2 dereferenceable(2) [[TGT:%.*]]) #[[ATTR4]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CALL:%.*]] = call noundef i32 @llvm.fleq.gate.qexpr.cnot(ptr noundef nonnull [[CTRL]], ptr noundef nonnull [[TGT]]) #[[ATTR8]]
; CHECK-NEXT:    ret i32 [[CALL]]
;
entry:
  %call = call noundef i32 @llvm.fleq.gate.qexpr.cnot(ptr noundef nonnull %ctrl, ptr noundef nonnull %tgt) #8
  ret i32 %call
}

; Function Attrs: nounwind
declare noundef i32 @_ZN15quantum_builtin12__qexpr_CNOTEPtS0_(ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: alwaysinline mustprogress nounwind uwtable
define dso_local noundef i32 @_ZN5qexpr5_SWAPERtS0_(ptr noundef nonnull align 2 dereferenceable(2) %q1, ptr noundef nonnull align 2 dereferenceable(2) %q2) #4 {
; CHECK-LABEL: define dso_local noundef i32 @_ZN5qexpr5_SWAPERtS0_(
; CHECK-SAME: ptr noundef nonnull align 2 dereferenceable(2) [[Q1:%.*]], ptr noundef nonnull align 2 dereferenceable(2) [[Q2:%.*]]) #[[ATTR4]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CALL:%.*]] = call noundef i32 @llvm.fleq.gate.qexpr.swap(ptr noundef nonnull [[Q1]], ptr noundef nonnull [[Q2]]) #[[ATTR8]]
; CHECK-NEXT:    ret i32 [[CALL]]
;
entry:
  %call = call noundef i32 @llvm.fleq.gate.qexpr.swap(ptr noundef nonnull %q1, ptr noundef nonnull %q2) #8
  ret i32 %call
}

; Function Attrs: nounwind
declare noundef i32 @_ZN15quantum_builtin12__qexpr_SWAPEPtS0_(ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: alwaysinline mustprogress nounwind uwtable
define dso_local noundef i32 @_ZN5qexpr8_ToffoliERtS0_S0_(ptr noundef nonnull align 2 dereferenceable(2) %q1, ptr noundef nonnull align 2 dereferenceable(2) %q2, ptr noundef nonnull align 2 dereferenceable(2) %q3) #4 {
; CHECK-LABEL: define dso_local noundef i32 @_ZN5qexpr8_ToffoliERtS0_S0_(
; CHECK-SAME: ptr noundef nonnull align 2 dereferenceable(2) [[Q1:%.*]], ptr noundef nonnull align 2 dereferenceable(2) [[Q2:%.*]], ptr noundef nonnull align 2 dereferenceable(2) [[Q3:%.*]]) #[[ATTR4]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CALL:%.*]] = call noundef i32 @llvm.fleq.gate.qexpr.tof(ptr noundef nonnull [[Q1]], ptr noundef nonnull [[Q2]], ptr noundef nonnull [[Q3]]) #[[ATTR8]]
; CHECK-NEXT:    ret i32 [[CALL]]
;
entry:
  %call = call noundef i32 @llvm.fleq.gate.qexpr.tof(ptr noundef nonnull %q1, ptr noundef nonnull %q2, ptr noundef nonnull %q3) #8
  ret i32 %call
}

; Function Attrs: nounwind
declare noundef i32 @_ZN15quantum_builtin15__qexpr_ToffoliEPtS0_S0_(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: alwaysinline mustprogress nounwind uwtable
define dso_local noundef i32 @_ZN5qexpr6_PrepXERt(ptr noundef nonnull align 2 dereferenceable(2) %q) #4 {
; CHECK-LABEL: define dso_local noundef i32 @_ZN5qexpr6_PrepXERt(
; CHECK-SAME: ptr noundef nonnull align 2 dereferenceable(2) [[Q:%.*]]) #[[ATTR4]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CALL:%.*]] = call noundef i32 @llvm.fleq.gate.qexpr.prepx(ptr noundef nonnull [[Q]]) #[[ATTR8]]
; CHECK-NEXT:    ret i32 [[CALL]]
;
entry:
  %call = call noundef i32 @llvm.fleq.gate.qexpr.prepx(ptr noundef nonnull %q) #8
  ret i32 %call
}

; Function Attrs: nounwind
declare noundef i32 @_ZN15quantum_builtin13__qexpr_PrepXEPt(ptr noundef) local_unnamed_addr #3

; Function Attrs: alwaysinline mustprogress nounwind uwtable
define dso_local noundef i32 @_ZN5qexpr6_PrepYERt(ptr noundef nonnull align 2 dereferenceable(2) %q) #4 {
; CHECK-LABEL: define dso_local noundef i32 @_ZN5qexpr6_PrepYERt(
; CHECK-SAME: ptr noundef nonnull align 2 dereferenceable(2) [[Q:%.*]]) #[[ATTR4]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CALL:%.*]] = call noundef i32 @llvm.fleq.gate.qexpr.prepy(ptr noundef nonnull [[Q]]) #[[ATTR8]]
; CHECK-NEXT:    ret i32 [[CALL]]
;
entry:
  %call = call noundef i32 @llvm.fleq.gate.qexpr.prepy(ptr noundef nonnull %q) #8
  ret i32 %call
}

; Function Attrs: nounwind
declare noundef i32 @_ZN15quantum_builtin13__qexpr_PrepYEPt(ptr noundef) local_unnamed_addr #3

; Function Attrs: alwaysinline mustprogress nounwind uwtable
define dso_local noundef i32 @_ZN5qexpr6_PrepZERt(ptr noundef nonnull align 2 dereferenceable(2) %q) #4 {
; CHECK-LABEL: define dso_local noundef i32 @_ZN5qexpr6_PrepZERt(
; CHECK-SAME: ptr noundef nonnull align 2 dereferenceable(2) [[Q:%.*]]) #[[ATTR4]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CALL:%.*]] = call noundef i32 @llvm.fleq.gate.qexpr.prepz(ptr noundef nonnull [[Q]]) #[[ATTR8]]
; CHECK-NEXT:    ret i32 [[CALL]]
;
entry:
  %call = call noundef i32 @llvm.fleq.gate.qexpr.prepz(ptr noundef nonnull %q) #8
  ret i32 %call
}

; Function Attrs: nounwind
declare noundef i32 @_ZN15quantum_builtin13__qexpr_PrepZEPt(ptr noundef) local_unnamed_addr #3

; Function Attrs: alwaysinline mustprogress nounwind uwtable
define dso_local noundef i32 @_ZN5qexpr6_MeasXERtRb(ptr noundef nonnull align 2 dereferenceable(2) %q, ptr noundef nonnull align 1 dereferenceable(1) %c) #4 {
; CHECK-LABEL: define dso_local noundef i32 @_ZN5qexpr6_MeasXERtRb(
; CHECK-SAME: ptr noundef nonnull align 2 dereferenceable(2) [[Q:%.*]], ptr noundef nonnull align 1 dereferenceable(1) [[C:%.*]]) #[[ATTR4]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CALL:%.*]] = call noundef i32 @llvm.fleq.gate.qexpr.measx(ptr noundef nonnull [[Q]], ptr noundef nonnull [[C]]) #[[ATTR8]]
; CHECK-NEXT:    ret i32 [[CALL]]
;
entry:
  %call = call noundef i32 @llvm.fleq.gate.qexpr.measx(ptr noundef nonnull %q, ptr noundef nonnull %c) #8
  ret i32 %call
}

; Function Attrs: nounwind
declare noundef i32 @_ZN15quantum_builtin13__qexpr_MeasXEPtPb(ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: alwaysinline mustprogress nounwind uwtable
define dso_local noundef i32 @_ZN5qexpr6_MeasYERtRb(ptr noundef nonnull align 2 dereferenceable(2) %q, ptr noundef nonnull align 1 dereferenceable(1) %c) #4 {
; CHECK-LABEL: define dso_local noundef i32 @_ZN5qexpr6_MeasYERtRb(
; CHECK-SAME: ptr noundef nonnull align 2 dereferenceable(2) [[Q:%.*]], ptr noundef nonnull align 1 dereferenceable(1) [[C:%.*]]) #[[ATTR4]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CALL:%.*]] = call noundef i32 @llvm.fleq.gate.qexpr.measy(ptr noundef nonnull [[Q]], ptr noundef nonnull [[C]]) #[[ATTR8]]
; CHECK-NEXT:    ret i32 [[CALL]]
;
entry:
  %call = call noundef i32 @llvm.fleq.gate.qexpr.measy(ptr noundef nonnull %q, ptr noundef nonnull %c) #8
  ret i32 %call
}

; Function Attrs: nounwind
declare noundef i32 @_ZN15quantum_builtin13__qexpr_MeasYEPtPb(ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: alwaysinline mustprogress nounwind uwtable
define dso_local noundef i32 @_ZN5qexpr6_MeasZERtRb(ptr noundef nonnull align 2 dereferenceable(2) %q, ptr noundef nonnull align 1 dereferenceable(1) %c) #4 {
; CHECK-LABEL: define dso_local noundef i32 @_ZN5qexpr6_MeasZERtRb(
; CHECK-SAME: ptr noundef nonnull align 2 dereferenceable(2) [[Q:%.*]], ptr noundef nonnull align 1 dereferenceable(1) [[C:%.*]]) #[[ATTR4]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CALL:%.*]] = call noundef i32 @llvm.fleq.gate.qexpr.measz(ptr noundef nonnull [[Q]], ptr noundef nonnull [[C]]) #[[ATTR8]]
; CHECK-NEXT:    ret i32 [[CALL]]
;
entry:
  %call = call noundef i32 @llvm.fleq.gate.qexpr.measz(ptr noundef nonnull %q, ptr noundef nonnull %c) #8
  ret i32 %call
}

; Function Attrs: nounwind
declare noundef i32 @_ZN15quantum_builtin13__qexpr_MeasZEPtPb(ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: alwaysinline mustprogress nounwind uwtable
define dso_local noundef i32 @_ZN5qexpr7_CPhaseERtS0_d(ptr noundef nonnull align 2 dereferenceable(2) %ctrl, ptr noundef nonnull align 2 dereferenceable(2) %tgt, double noundef %angle) #4 {
; CHECK-LABEL: define dso_local noundef i32 @_ZN5qexpr7_CPhaseERtS0_d(
; CHECK-SAME: ptr noundef nonnull align 2 dereferenceable(2) [[CTRL:%.*]], ptr noundef nonnull align 2 dereferenceable(2) [[TGT:%.*]], double noundef [[ANGLE:%.*]]) #[[ATTR4]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CALL:%.*]] = call noundef i32 @llvm.fleq.gate.qexpr.cphase(ptr noundef nonnull [[CTRL]], ptr noundef nonnull [[TGT]], double noundef [[ANGLE]]) #[[ATTR8]]
; CHECK-NEXT:    ret i32 [[CALL]]
;
entry:
  %call = call noundef i32 @llvm.fleq.gate.qexpr.cphase(ptr noundef nonnull %ctrl, ptr noundef nonnull %tgt, double noundef %angle) #8
  ret i32 %call
}

; Function Attrs: nounwind
declare noundef i32 @_ZN15quantum_builtin14__qexpr_CPhaseEPtS0_d(ptr noundef, ptr noundef, double noundef) local_unnamed_addr #3

; Function Attrs: alwaysinline mustprogress nounwind uwtable
define dso_local noundef i32 @_ZN5qexpr4_RXYERtdd(ptr noundef nonnull align 2 dereferenceable(2) %q, double noundef %theta, double noundef %phi) #4 {
; CHECK-LABEL: define dso_local noundef i32 @_ZN5qexpr4_RXYERtdd(
; CHECK-SAME: ptr noundef nonnull align 2 dereferenceable(2) [[Q:%.*]], double noundef [[THETA:%.*]], double noundef [[PHI:%.*]]) #[[ATTR4]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CALL:%.*]] = call noundef i32 @llvm.fleq.gate.qexpr.rxy(ptr noundef nonnull [[Q]], double noundef [[THETA]], double noundef [[PHI]]) #[[ATTR8]]
; CHECK-NEXT:    ret i32 [[CALL]]
;
entry:
  %call = call noundef i32 @llvm.fleq.gate.qexpr.rxy(ptr noundef nonnull %q, double noundef %theta, double noundef %phi) #8
  ret i32 %call
}

; Function Attrs: nounwind
declare noundef i32 @_ZN15quantum_builtin11__qexpr_RXYEPtdd(ptr noundef, double noundef, double noundef) local_unnamed_addr #3

; Function Attrs: alwaysinline mustprogress nounwind uwtable
define dso_local noundef i32 @_ZN5qexpr6_SwapAERtS0_d(ptr noundef nonnull align 2 dereferenceable(2) %q1, ptr noundef nonnull align 2 dereferenceable(2) %q2, double noundef %angle) #4 {
; CHECK-LABEL: define dso_local noundef i32 @_ZN5qexpr6_SwapAERtS0_d(
; CHECK-SAME: ptr noundef nonnull align 2 dereferenceable(2) [[Q1:%.*]], ptr noundef nonnull align 2 dereferenceable(2) [[Q2:%.*]], double noundef [[ANGLE:%.*]]) #[[ATTR4]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CALL:%.*]] = call noundef i32 @llvm.fleq.gate.qexpr.swapa(ptr noundef nonnull [[Q1]], ptr noundef nonnull [[Q2]], double noundef [[ANGLE]]) #[[ATTR8]]
; CHECK-NEXT:    ret i32 [[CALL]]
;
entry:
  %call = call noundef i32 @llvm.fleq.gate.qexpr.swapa(ptr noundef nonnull %q1, ptr noundef nonnull %q2, double noundef %angle) #8
  ret i32 %call
}

; Function Attrs: nounwind
declare noundef i32 @_ZN15quantum_builtin13__qexpr_SwapAEPtS0_d(ptr noundef, ptr noundef, double noundef) local_unnamed_addr #3

; Function Attrs: alwaysinline mustprogress nounwind uwtable
define dso_local noundef i32 @_ZN5qexpr4joinEii(i32 noundef "qexpr_val" %e1, i32 noundef "qexpr_val" %e2) #4 {
; CHECK-LABEL: define dso_local noundef i32 @_ZN5qexpr4joinEii(
; CHECK-SAME: i32 noundef "qexpr_val" [[E1:%.*]], i32 noundef "qexpr_val" [[E2:%.*]]) #[[ATTR4]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CALL:%.*]] = call noundef i32 @llvm.fleq.qexpr.join(i32 noundef [[E1]], i32 noundef [[E2]]) #[[ATTR8]]
; CHECK-NEXT:    ret i32 [[CALL]]
;
entry:
  %call = call noundef i32 @llvm.fleq.qexpr.join(i32 noundef %e1, i32 noundef %e2) #8
  ret i32 %call
}

; Function Attrs: nounwind
declare noundef i32 @_ZN15quantum_builtin12__qexpr_joinEii(i32 noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: alwaysinline mustprogress nounwind uwtable
define dso_local noundef i32 @_ZN5qexpr4bindEii(i32 noundef %e1, i32 noundef "qexpr_val" %e2) #2 {
; CHECK-LABEL: define dso_local noundef i32 @_ZN5qexpr4bindEii(
; CHECK-SAME: i32 noundef [[E1:%.*]], i32 noundef "qexpr_val" [[E2:%.*]]) #[[ATTR2]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CALL:%.*]] = call noundef i32 @llvm.fleq.qexpr.bind(i32 noundef [[E1]], i32 noundef [[E2]]) #[[ATTR8]]
; CHECK-NEXT:    ret i32 [[CALL]]
;
entry:
  %call = call noundef i32 @llvm.fleq.qexpr.bind(i32 noundef %e1, i32 noundef %e2) #8
  ret i32 %call
}

; Function Attrs: nounwind
declare noundef i32 @_ZN15quantum_builtin12__qexpr_bindEii(i32 noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: alwaysinline mustprogress nounwind uwtable
define dso_local noundef i32 @_ZN5qexpr6invertEi(i32 noundef "qexpr_val" %e) #4 {
; CHECK-LABEL: define dso_local noundef i32 @_ZN5qexpr6invertEi(
; CHECK-SAME: i32 noundef "qexpr_val" [[E:%.*]]) #[[ATTR4]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CALL:%.*]] = call noundef i32 @llvm.fleq.qexpr.invert(i32 noundef [[E]]) #[[ATTR8]]
; CHECK-NEXT:    ret i32 [[CALL]]
;
entry:
  %call = call noundef i32 @llvm.fleq.qexpr.invert(i32 noundef %e) #8
  ret i32 %call
}

; Function Attrs: nounwind
declare noundef i32 @_ZN15quantum_builtin14__qexpr_invertEi(i32 noundef) local_unnamed_addr #3

; Function Attrs: alwaysinline mustprogress nounwind uwtable
define dso_local noundef i32 @_ZN5qexpr5powerEji(i32 noundef %n, i32 noundef "qexpr_val" %e) #4 {
; CHECK-LABEL: define dso_local noundef i32 @_ZN5qexpr5powerEji(
; CHECK-SAME: i32 noundef [[N:%.*]], i32 noundef "qexpr_val" [[E:%.*]]) #[[ATTR4]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CALL:%.*]] = call noundef i32 @llvm.fleq.qexpr.power(i32 noundef [[N]], i32 noundef [[E]]) #[[ATTR8]]
; CHECK-NEXT:    ret i32 [[CALL]]
;
entry:
  %call = call noundef i32 @llvm.fleq.qexpr.power(i32 noundef %n, i32 noundef %e) #8
  ret i32 %call
}

; Function Attrs: nounwind
declare noundef i32 @_ZN15quantum_builtin13__qexpr_powerEji(i32 noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: alwaysinline mustprogress nounwind uwtable
define dso_local noundef i32 @_ZN5qexpr7controlERti(ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" %ctrl, i32 noundef "qexpr_val" %e) #4 {
; CHECK-LABEL: define dso_local noundef i32 @_ZN5qexpr7controlERti(
; CHECK-SAME: ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" [[CTRL:%.*]], i32 noundef "qexpr_val" [[E:%.*]]) #[[ATTR4]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CALL:%.*]] = call noundef i32 @llvm.fleq.qexpr.control(ptr noundef nonnull [[CTRL]], i1 noundef zeroext true, i32 noundef [[E]]) #[[ATTR8]]
; CHECK-NEXT:    ret i32 [[CALL]]
;
entry:
  %call = call noundef i32 @llvm.fleq.qexpr.control(ptr noundef nonnull %ctrl, i1 noundef zeroext true, i32 noundef %e) #8
  ret i32 %call
}

; Function Attrs: nounwind
declare noundef i32 @_ZN15quantum_builtin15__qexpr_controlEPtbi(ptr noundef, i1 noundef zeroext, i32 noundef) local_unnamed_addr #3

; Function Attrs: alwaysinline mustprogress nounwind uwtable
define dso_local noundef i32 @_ZN5qexpr7controlERtbi(ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" %ctrl, i1 noundef zeroext %control_if, i32 noundef "qexpr_val" %e) #4 {
; CHECK-LABEL: define dso_local noundef i32 @_ZN5qexpr7controlERtbi(
; CHECK-SAME: ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" [[CTRL:%.*]], i1 noundef zeroext [[CONTROL_IF:%.*]], i32 noundef "qexpr_val" [[E:%.*]]) #[[ATTR4]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CALL:%.*]] = call noundef i32 @llvm.fleq.qexpr.control(ptr noundef nonnull [[CTRL]], i1 noundef zeroext [[CONTROL_IF]], i32 noundef [[E]]) #[[ATTR8]]
; CHECK-NEXT:    ret i32 [[CALL]]
;
entry:
  %call = call noundef i32 @llvm.fleq.qexpr.control(ptr noundef nonnull %ctrl, i1 noundef zeroext %control_if, i32 noundef %e) #8
  ret i32 %call
}

; Function Attrs: alwaysinline mustprogress nounwind uwtable
define dso_local noundef i32 @_ZN5qexpr7controlEPti(ptr noundef "qubit_ref" %ctrls, i32 noundef "qexpr_val" %e) #4 {
; CHECK-LABEL: define dso_local noundef i32 @_ZN5qexpr7controlEPti(
; CHECK-SAME: ptr noundef "qubit_ref" [[CTRLS:%.*]], i32 noundef "qexpr_val" [[E:%.*]]) #[[ATTR4]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CALL:%.*]] = call noundef i32 @llvm.fleq.qexpr.multi.control(ptr noundef [[CTRLS]], i32 noundef -1, i32 noundef [[E]]) #[[ATTR8]]
; CHECK-NEXT:    ret i32 [[CALL]]
;
entry:
  %call = call noundef i32 @llvm.fleq.qexpr.multi.control(ptr noundef %ctrls, i32 noundef -1, i32 noundef %e) #8
  ret i32 %call
}

; Function Attrs: nounwind
declare noundef i32 @_ZN15quantum_builtin21__qexpr_multi_controlEPtji(ptr noundef, i32 noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: alwaysinline mustprogress nounwind uwtable
define dso_local noundef i32 @_ZN5qexpr7controlEPtji(ptr noundef "qubit_ref" %ctrls, i32 noundef %control_on, i32 noundef "qexpr_val" %e) #4 {
; CHECK-LABEL: define dso_local noundef i32 @_ZN5qexpr7controlEPtji(
; CHECK-SAME: ptr noundef "qubit_ref" [[CTRLS:%.*]], i32 noundef [[CONTROL_ON:%.*]], i32 noundef "qexpr_val" [[E:%.*]]) #[[ATTR4]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CALL:%.*]] = call noundef i32 @llvm.fleq.qexpr.multi.control(ptr noundef [[CTRLS]], i32 noundef [[CONTROL_ON]], i32 noundef [[E]]) #[[ATTR8]]
; CHECK-NEXT:    ret i32 [[CALL]]
;
entry:
  %call = call noundef i32 @llvm.fleq.qexpr.multi.control(ptr noundef %ctrls, i32 noundef %control_on, i32 noundef %e) #8
  ret i32 %call
}

; Function Attrs: alwaysinline mustprogress nounwind uwtable
define dso_local noundef i32 @_ZN5qexpr7controlERKN5qlist5QListEi(ptr nocapture noundef nonnull readonly align 8 dereferenceable(8) "qubit_ref" %ctrls, i32 noundef "qexpr_val" %e) #4 {
; CHECK-LABEL: define dso_local noundef i32 @_ZN5qexpr7controlERKN5qlist5QListEi(
; CHECK-SAME: ptr nocapture noundef nonnull readonly align 8 dereferenceable(8) "qubit_ref" [[CTRLS:%.*]], i32 noundef "qexpr_val" [[E:%.*]]) #[[ATTR4]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[CTRLS]], align 8, !tbaa [[TBAA0:![0-9]+]]
; CHECK-NEXT:    [[CALL:%.*]] = call noundef i32 @llvm.fleq.qexpr.multi.control(ptr noundef [[TMP0]], i32 noundef -1, i32 noundef [[E]]) #[[ATTR8]]
; CHECK-NEXT:    ret i32 [[CALL]]
;
entry:
  %0 = load ptr, ptr %ctrls, align 8, !tbaa !0
  %call = call noundef i32 @llvm.fleq.qexpr.multi.control(ptr noundef %0, i32 noundef -1, i32 noundef %e) #8
  ret i32 %call
}

; Function Attrs: alwaysinline mustprogress nounwind uwtable
define dso_local noundef i32 @_ZN5qexpr7controlERKN5qlist5QListEji(ptr nocapture noundef nonnull readonly align 8 dereferenceable(8) "qubit_ref" %ctrls, i32 noundef %control_on, i32 noundef "qexpr_val" %e) #4 {
; CHECK-LABEL: define dso_local noundef i32 @_ZN5qexpr7controlERKN5qlist5QListEji(
; CHECK-SAME: ptr nocapture noundef nonnull readonly align 8 dereferenceable(8) "qubit_ref" [[CTRLS:%.*]], i32 noundef [[CONTROL_ON:%.*]], i32 noundef "qexpr_val" [[E:%.*]]) #[[ATTR4]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[CTRLS]], align 8, !tbaa [[TBAA0]]
; CHECK-NEXT:    [[CALL:%.*]] = call noundef i32 @llvm.fleq.qexpr.multi.control(ptr noundef [[TMP0]], i32 noundef [[CONTROL_ON]], i32 noundef [[E]]) #[[ATTR8]]
; CHECK-NEXT:    ret i32 [[CALL]]
;
entry:
  %0 = load ptr, ptr %ctrls, align 8, !tbaa !0
  %call = call noundef i32 @llvm.fleq.qexpr.multi.control(ptr noundef %0, i32 noundef %control_on, i32 noundef %e) #8
  ret i32 %call
}

; Function Attrs: alwaysinline mustprogress nounwind uwtable
define dso_local noundef i32 @_ZN5qexpr3qIfERtii(ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" %ctrl, i32 noundef "qexpr_val" %eT, i32 noundef "qexpr_val" %eF) #4 {
; CHECK-LABEL: define dso_local noundef i32 @_ZN5qexpr3qIfERtii(
; CHECK-SAME: ptr noundef nonnull align 2 dereferenceable(2) "qubit_ref" [[CTRL:%.*]], i32 noundef "qexpr_val" [[ET:%.*]], i32 noundef "qexpr_val" [[EF:%.*]]) #[[ATTR4]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CALL:%.*]] = call noundef i32 @llvm.fleq.qexpr.control(ptr noundef nonnull [[CTRL]], i1 noundef zeroext true, i32 noundef [[ET]]) #[[ATTR8]]
; CHECK-NEXT:    [[CALL1:%.*]] = call noundef i32 @llvm.fleq.qexpr.control(ptr noundef nonnull [[CTRL]], i1 noundef zeroext false, i32 noundef [[EF]]) #[[ATTR8]]
; CHECK-NEXT:    [[CALL2:%.*]] = call noundef i32 @llvm.fleq.qexpr.join(i32 noundef [[CALL]], i32 noundef [[CALL1]]) #[[ATTR8]]
; CHECK-NEXT:    ret i32 [[CALL2]]
;
entry:
  %call = call noundef i32 @llvm.fleq.qexpr.control(ptr noundef nonnull %ctrl, i1 noundef zeroext true, i32 noundef %eT) #8
  %call1 = call noundef i32 @llvm.fleq.qexpr.control(ptr noundef nonnull %ctrl, i1 noundef zeroext false, i32 noundef %eF) #8
  %call2 = call noundef i32 @llvm.fleq.qexpr.join(i32 noundef %call, i32 noundef %call1) #8
  ret i32 %call2
}

; Function Attrs: alwaysinline mustprogress nounwind uwtable
define dso_local noundef i32 @_ZN5qexpr3cIfEbii(i1 noundef zeroext %b, i32 noundef "qexpr_val" %eTrue, i32 noundef "qexpr_val" %eFalse) #4 {
; CHECK-LABEL: define dso_local noundef i32 @_ZN5qexpr3cIfEbii(
; CHECK-SAME: i1 noundef zeroext [[B:%.*]], i32 noundef "qexpr_val" [[ETRUE:%.*]], i32 noundef "qexpr_val" [[EFALSE:%.*]]) #[[ATTR4]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[SELECT:%.*]] = select i1 [[B]], i32 [[ETRUE]], i32 [[EFALSE]]
; CHECK-NEXT:    ret i32 [[SELECT]]
;
entry:
  %select = select i1 %b, i32 %eTrue, i32 %eFalse
  ret i32 %select
}

; Function Attrs: nounwind
declare noundef i32 @_ZN15quantum_builtin14__qexpr_branchEbii(i1 noundef zeroext, i32 noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: alwaysinline mustprogress nounwind uwtable
define dso_local noundef i32 @_ZN5qexpr7cIfTrueEbi(i1 noundef zeroext %b, i32 noundef "qexpr_val" %eTrue) #4 {
; CHECK-LABEL: define dso_local noundef i32 @_ZN5qexpr7cIfTrueEbi(
; CHECK-SAME: i1 noundef zeroext [[B:%.*]], i32 noundef "qexpr_val" [[ETRUE:%.*]]) #[[ATTR4]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CALL_I:%.*]] = call noundef i32 @llvm.fleq.qexpr.identity(double noundef 0.000000e+00) #[[ATTR8]]
; CHECK-NEXT:    [[SELECT:%.*]] = select i1 [[B]], i32 [[ETRUE]], i32 [[CALL_I]]
; CHECK-NEXT:    ret i32 [[SELECT]]
;
entry:
  %call.i = call noundef i32 @llvm.fleq.qexpr.identity(double noundef 0.000000e+00) #8
  %select = select i1 %b, i32 %eTrue, i32 %call.i
  ret i32 %select
}

; Function Attrs: alwaysinline mustprogress nounwind uwtable
define dso_local noundef i32 @_ZN5qexpr8cIfFalseEbi(i1 noundef zeroext %b, i32 noundef "qexpr_val" %eFalse) #4 {
; CHECK-LABEL: define dso_local noundef i32 @_ZN5qexpr8cIfFalseEbi(
; CHECK-SAME: i1 noundef zeroext [[B:%.*]], i32 noundef "qexpr_val" [[EFALSE:%.*]]) #[[ATTR4]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CALL_I:%.*]] = call noundef i32 @llvm.fleq.qexpr.identity(double noundef 0.000000e+00) #[[ATTR8]]
; CHECK-NEXT:    [[SELECT:%.*]] = select i1 [[B]], i32 [[CALL_I]], i32 [[EFALSE]]
; CHECK-NEXT:    ret i32 [[SELECT]]
;
entry:
  %call.i = call noundef i32 @llvm.fleq.qexpr.identity(double noundef 0.000000e+00) #8
  %select = select i1 %b, i32 %call.i, i32 %eFalse
  ret i32 %select
}

; Function Attrs: alwaysinline mustprogress nounwind uwtable
define dso_local void @_ZN5qexpr3letEPKci(ptr noundef %key, i32 noundef "qexpr_val" %e) #2 {
; CHECK-LABEL: define dso_local void @_ZN5qexpr3letEPKci(
; CHECK-SAME: ptr noundef [[KEY:%.*]], i32 noundef "qexpr_val" [[E:%.*]]) #[[ATTR2]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    call void @llvm.fleq.qexpr.let(ptr noundef [[KEY]], i32 noundef [[E]]) #[[ATTR8]]
; CHECK-NEXT:    ret void
;
entry:
  call void @llvm.fleq.qexpr.let(ptr noundef %key, i32 noundef %e) #8
  ret void
}

; Function Attrs: nounwind
declare void @_ZN15quantum_builtin11__qexpr_letEPKci(ptr noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: alwaysinline mustprogress nounwind uwtable
define dso_local noundef i32 @_ZN5qexpr3getEPKc(ptr noundef %key) #4 {
; CHECK-LABEL: define dso_local noundef i32 @_ZN5qexpr3getEPKc(
; CHECK-SAME: ptr noundef [[KEY:%.*]]) #[[ATTR4]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CALL:%.*]] = call noundef i32 @llvm.fleq.qexpr.get(ptr noundef [[KEY]]) #[[ATTR8]]
; CHECK-NEXT:    ret i32 [[CALL]]
;
entry:
  %call = call noundef i32 @llvm.fleq.qexpr.get(ptr noundef %key) #8
  ret i32 %call
}

; Function Attrs: nounwind
declare noundef i32 @_ZN15quantum_builtin11__qexpr_getEPKc(ptr noundef) local_unnamed_addr #3

; Function Attrs: alwaysinline mustprogress nounwind uwtable
define dso_local noundef i32 @_ZN5qexpr13exitAtCompileEN5qlist8DataListE(ptr %d.coerce) #2 {
; CHECK-LABEL: define dso_local noundef i32 @_ZN5qexpr13exitAtCompileEN5qlist8DataListE(
; CHECK-SAME: ptr [[D_COERCE:%.*]]) #[[ATTR2]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CALL:%.*]] = call noundef i32 @llvm.fleq.qexpr.ct.exit(ptr noundef [[D_COERCE]]) #[[ATTR8]]
; CHECK-NEXT:    ret i32 [[CALL]]
;
entry:
  %call = call noundef i32 @llvm.fleq.qexpr.ct.exit(ptr noundef %d.coerce) #8
  ret i32 %call
}

; Function Attrs: nounwind
declare noundef i32 @_ZN15quantum_builtin15__qexpr_ct_exitEPKc(ptr noundef) local_unnamed_addr #3

; Function Attrs: alwaysinline mustprogress nounwind uwtable
define dso_local noundef i32 @_ZN5qexpr13exitAtRuntimeEN5qlist8DataListE(ptr %d.coerce) #2 {
; CHECK-LABEL: define dso_local noundef i32 @_ZN5qexpr13exitAtRuntimeEN5qlist8DataListE(
; CHECK-SAME: ptr [[D_COERCE:%.*]]) #[[ATTR2]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CALL:%.*]] = call noundef i32 @llvm.fleq.qexpr.rt.exit(ptr noundef [[D_COERCE]]) #[[ATTR8]]
; CHECK-NEXT:    ret i32 [[CALL]]
;
entry:
  %call = call noundef i32 @llvm.fleq.qexpr.rt.exit(ptr noundef %d.coerce) #8
  ret i32 %call
}

; Function Attrs: nounwind
declare noundef i32 @_ZN15quantum_builtin15__qexpr_rt_exitEPKc(ptr noundef) local_unnamed_addr #3

; Function Attrs: alwaysinline mustprogress nounwind uwtable
define dso_local noundef i32 @_ZN5qexpr5fenceEi(i32 noundef %e) #2 {
; CHECK-LABEL: define dso_local noundef i32 @_ZN5qexpr5fenceEi(
; CHECK-SAME: i32 noundef [[E:%.*]]) #[[ATTR2]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CALL_I:%.*]] = call noundef i32 @llvm.fleq.qexpr.identity(double noundef 0.000000e+00) #[[ATTR8]]
; CHECK-NEXT:    [[CALL_I2:%.*]] = call noundef i32 @llvm.fleq.qexpr.bind(i32 noundef [[E]], i32 noundef [[CALL_I]]) #[[ATTR8]]
; CHECK-NEXT:    ret i32 [[CALL_I2]]
;
entry:
  %call.i = call noundef i32 @llvm.fleq.qexpr.identity(double noundef 0.000000e+00) #8
  %call.i2 = call noundef i32 @llvm.fleq.qexpr.bind(i32 noundef %e, i32 noundef %call.i) #8
  ret i32 %call.i2
}

; Function Attrs: alwaysinline mustprogress nounwind uwtable
define dso_local noundef i32 @_ZN5qexpr17printQuantumLogicEi(i32 noundef %e) #2 {
; CHECK-LABEL: define dso_local noundef i32 @_ZN5qexpr17printQuantumLogicEi(
; CHECK-SAME: i32 noundef [[E:%.*]]) #[[ATTR2]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CALL:%.*]] = call noundef i32 @llvm.fleq.qexpr.print.passthru(i32 noundef [[E]]) #[[ATTR8]]
; CHECK-NEXT:    ret i32 [[CALL]]
;
entry:
  %call = call noundef i32 @llvm.fleq.qexpr.print.passthru(i32 noundef %e) #8
  ret i32 %call
}

; Function Attrs: nounwind
declare noundef i32 @_ZN15quantum_builtin22__qexpr_print_passthruEi(i32 noundef) local_unnamed_addr #3

; Function Attrs: alwaysinline mustprogress nounwind uwtable
define dso_local noundef i32 @_ZN5qexpr13printDataListEN5qlist8DataListEi(ptr %d.coerce, i32 noundef %e) #2 {
; CHECK-LABEL: define dso_local noundef i32 @_ZN5qexpr13printDataListEN5qlist8DataListEi(
; CHECK-SAME: ptr [[D_COERCE:%.*]], i32 noundef [[E:%.*]]) #[[ATTR2]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CALL:%.*]] = call noundef i32 @llvm.fleq.datalist.print.passthru(ptr noundef [[D_COERCE]], i32 noundef [[E]]) #[[ATTR8]]
; CHECK-NEXT:    ret i32 [[CALL]]
;
entry:
  %call = call noundef i32 @llvm.fleq.datalist.print.passthru(ptr noundef %d.coerce, i32 noundef %e) #8
  ret i32 %call
}

; Function Attrs: nounwind
declare noundef i32 @_ZN15quantum_builtin25__datalist_print_passthruEPKci(ptr noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: mustprogress noinline uwtable
define dso_local void @_Z7PrepAllv.stub() local_unnamed_addr #0 section ".qbbs_text" {
; CHECK-LABEL: define dso_local void @_Z7PrepAllv.stub(
; CHECK-SAME: ) local_unnamed_addr #[[ATTR0]] section ".qbbs_text" {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    br label [[FOR_BODY:%.*]]
; CHECK:       for.body:
; CHECK-NEXT:    tail call void @_Z5PrepZRt(ptr noundef nonnull align 2 dereferenceable(2) @q)
; CHECK-NEXT:    tail call void @_Z5PrepZRt(ptr noundef nonnull align 2 dereferenceable(2) getelementptr inbounds ([3 x i16], ptr @q, i64 0, i64 1))
; CHECK-NEXT:    tail call void @_Z5PrepZRt(ptr noundef nonnull align 2 dereferenceable(2) getelementptr inbounds ([3 x i16], ptr @q, i64 0, i64 2))
; CHECK-NEXT:    ret void
;
entry:
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body
  ret void

for.body:                                         ; preds = %for.body, %entry
  %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next, %for.body ]
  %arrayidx = getelementptr inbounds [3 x i16], ptr @q, i64 0, i64 %indvars.iv
  tail call void @_Z5PrepZRt(ptr noundef nonnull align 2 dereferenceable(2) %arrayidx)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, 3
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body, !llvm.loop !5
}

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #5

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #5

; Function Attrs: mustprogress norecurse uwtable
define dso_local noundef i32 @main() local_unnamed_addr #6 {
; CHECK-LABEL: define dso_local noundef i32 @main(
; CHECK-SAME: ) local_unnamed_addr #[[ATTR6:[0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CONVERTER_I:%.*]] = alloca %"struct.qexpr::Converter", align 1
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 1, ptr nonnull [[CONVERTER_I]]) #[[ATTR8]]
; CHECK-NEXT:    [[CALL_I:%.*]] = call noundef i32 @_ZNK5qexpr9ConverterIXadL_Z7PrepAllvEEE7convertEv(ptr noundef nonnull align 1 dereferenceable(1) [[CONVERTER_I]])
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 1, ptr nonnull [[CONVERTER_I]]) #[[ATTR8]]
; CHECK-NEXT:    call void @llvm.fleq.qexpr.eval.hold(i32 noundef [[CALL_I]]) #[[ATTR8]]
; CHECK-NEXT:    ret i32 0
;
entry:
  %converter.i = alloca %"struct.qexpr::Converter", align 1
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %converter.i) #8
  %call.i = call noundef i32 @_ZNK5qexpr9ConverterIXadL_Z7PrepAllvEEE7convertEv(ptr noundef nonnull align 1 dereferenceable(1) %converter.i)
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %converter.i) #8
  call void @llvm.fleq.qexpr.eval.hold(i32 noundef %call.i) #8
  ret i32 0
}

; Function Attrs: mustprogress noinline uwtable
define linkonce_odr dso_local noundef i32 @_ZNK5qexpr9ConverterIXadL_Z7PrepAllvEEE7convertEv(ptr noundef nonnull align 1 dereferenceable(1) %this) local_unnamed_addr #7 comdat align 2 {
; CHECK-LABEL: define linkonce_odr dso_local noundef i32 @_ZNK5qexpr9ConverterIXadL_Z7PrepAllvEEE7convertEv(
; CHECK-SAME: ptr noundef nonnull align 1 dereferenceable(1) [[THIS:%.*]]) local_unnamed_addr #[[ATTR7:[0-9]+]] comdat align 2 {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    br label [[FOR_BODY_I:%.*]]
; CHECK:       for.body.i:
; CHECK-NEXT:    tail call void @_Z5PrepZRt(ptr noundef nonnull align 2 dereferenceable(2) @q)
; CHECK-NEXT:    tail call void @_Z5PrepZRt(ptr noundef nonnull align 2 dereferenceable(2) getelementptr inbounds ([3 x i16], ptr @q, i64 0, i64 1))
; CHECK-NEXT:    tail call void @_Z5PrepZRt(ptr noundef nonnull align 2 dereferenceable(2) getelementptr inbounds ([3 x i16], ptr @q, i64 0, i64 2))
; CHECK-NEXT:    [[CALL:%.*]] = call noundef i32 @llvm.fleq.qexpr.this.expression() #[[ATTR8]]
; CHECK-NEXT:    ret i32 [[CALL]]
;
entry:
  br label %for.body.i

for.body.i:                                       ; preds = %for.body.i, %entry
  %indvars.iv.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i, %for.body.i ]
  %arrayidx.i = getelementptr inbounds [3 x i16], ptr @q, i64 0, i64 %indvars.iv.i
  tail call void @_Z5PrepZRt(ptr noundef nonnull align 2 dereferenceable(2) %arrayidx.i)
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.next.i, 3
  br i1 %exitcond.not.i, label %_Z7PrepAllv.stub.exit, label %for.body.i, !llvm.loop !5

_Z7PrepAllv.stub.exit:                            ; preds = %for.body.i
  %call = call noundef i32 @llvm.fleq.qexpr.this.expression() #8
  ret i32 %call
}

; Function Attrs: nounwind
declare noundef i32 @_ZN15quantum_builtin23__qexpr_this_expressionEv() local_unnamed_addr #3

; Function Attrs: nounwind
declare void @llvm.quantum.qubit(ptr) #8

; Function Attrs: nounwind
declare void @llvm.quantum.param(double) #8

; Function Attrs: nounwind
declare void @llvm.quantum.cbit(ptr) #8

; Function Attrs: nounwind
declare i64 @llvm.fleq.qlist.size(ptr) #8

; Function Attrs: nounwind
declare i1 @llvm.fleq.qlist.equal(ptr, ptr) #8

; Function Attrs: nounwind
declare i32 @llvm.fleq.qexpr.identity(double) #8

; Function Attrs: nounwind
declare void @llvm.fleq.qexpr.eval.hold(i32) #8

; Function Attrs: nounwind
declare void @llvm.fleq.qexpr.eval.release(i32) #8

; Function Attrs: nounwind
declare i32 @llvm.fleq.gate.qexpr.h(ptr) #8

; Function Attrs: nounwind
declare i32 @llvm.fleq.gate.qexpr.x(ptr) #8

; Function Attrs: nounwind
declare i32 @llvm.fleq.gate.qexpr.y(ptr) #8

; Function Attrs: nounwind
declare i32 @llvm.fleq.gate.qexpr.z(ptr) #8

; Function Attrs: nounwind
declare i32 @llvm.fleq.gate.qexpr.s(ptr) #8

; Function Attrs: nounwind
declare i32 @llvm.fleq.gate.qexpr.s.dag(ptr) #8

; Function Attrs: nounwind
declare i32 @llvm.fleq.gate.qexpr.t(ptr) #8

; Function Attrs: nounwind
declare i32 @llvm.fleq.gate.qexpr.t.dag(ptr) #8

; Function Attrs: nounwind
declare i32 @llvm.fleq.gate.qexpr.rx(ptr, double) #8

; Function Attrs: nounwind
declare i32 @llvm.fleq.gate.qexpr.ry(ptr, double) #8

; Function Attrs: nounwind
declare i32 @llvm.fleq.gate.qexpr.rz(ptr, double) #8

; Function Attrs: nounwind
declare i32 @llvm.fleq.gate.qexpr.cz(ptr, ptr) #8

; Function Attrs: nounwind
declare i32 @llvm.fleq.gate.qexpr.cnot(ptr, ptr) #8

; Function Attrs: nounwind
declare i32 @llvm.fleq.gate.qexpr.swap(ptr, ptr) #8

; Function Attrs: nounwind
declare i32 @llvm.fleq.gate.qexpr.tof(ptr, ptr, ptr) #8

; Function Attrs: nounwind
declare i32 @llvm.fleq.gate.qexpr.prepx(ptr) #8

; Function Attrs: nounwind
declare i32 @llvm.fleq.gate.qexpr.prepy(ptr) #8

; Function Attrs: nounwind
declare i32 @llvm.fleq.gate.qexpr.prepz(ptr) #8

; Function Attrs: nounwind
declare i32 @llvm.fleq.gate.qexpr.measx(ptr, ptr) #8

; Function Attrs: nounwind
declare i32 @llvm.fleq.gate.qexpr.measy(ptr, ptr) #8

; Function Attrs: nounwind
declare i32 @llvm.fleq.gate.qexpr.measz(ptr, ptr) #8

; Function Attrs: nounwind
declare i32 @llvm.fleq.gate.qexpr.cphase(ptr, ptr, double) #8

; Function Attrs: nounwind
declare i32 @llvm.fleq.gate.qexpr.rxy(ptr, double, double) #8

; Function Attrs: nounwind
declare i32 @llvm.fleq.gate.qexpr.swapa(ptr, ptr, double) #8

; Function Attrs: nounwind
declare i32 @llvm.fleq.qexpr.join(i32, i32) #8

; Function Attrs: nounwind
declare i32 @llvm.fleq.qexpr.bind(i32, i32) #8

; Function Attrs: nounwind
declare i32 @llvm.fleq.qexpr.invert(i32) #8

; Function Attrs: nounwind
declare i32 @llvm.fleq.qexpr.power(i32, i32) #8

; Function Attrs: nounwind
declare i32 @llvm.fleq.qexpr.control(ptr, i1, i32) #8

; Function Attrs: nounwind
declare i32 @llvm.fleq.qexpr.multi.control(ptr, i32, i32) #8

; Function Attrs: nounwind
declare i32 @llvm.fleq.qexpr.branch(i1, i32, i32) #8

; Function Attrs: nounwind
declare void @llvm.fleq.qexpr.let(ptr, i32) #8

; Function Attrs: nounwind
declare i32 @llvm.fleq.qexpr.get(ptr) #8

; Function Attrs: nounwind
declare i32 @llvm.fleq.qexpr.ct.exit(ptr) #8

; Function Attrs: nounwind
declare i32 @llvm.fleq.qexpr.rt.exit(ptr) #8

; Function Attrs: nounwind
declare i32 @llvm.fleq.qexpr.print.passthru(i32) #8

; Function Attrs: nounwind
declare i32 @llvm.fleq.datalist.print.passthru(ptr, i32) #8

; Function Attrs: nounwind
declare i32 @llvm.fleq.qexpr.this.expression() #8

attributes #0 = { mustprogress noinline uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { alwaysinline mustprogress nounwind uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { alwaysinline mustprogress nounwind uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "qexpr_func_val" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }
attributes #6 = { mustprogress norecurse uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #7 = { mustprogress noinline uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "qexpr_func_val" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #8 = { nounwind }

!0 = !{!1, !2, i64 0}
!1 = !{!"_ZTSN5qlist5QListE", !2, i64 0}
!2 = !{!"any pointer", !3, i64 0}
!3 = !{!"omnipotent char", !4, i64 0}
!4 = !{!"Simple C++ TBAA"}
!5 = distinct !{!5, !6, !7}
!6 = !{!"llvm.loop.mustprogress"}
!7 = !{!"llvm.loop.unroll.disable"}
